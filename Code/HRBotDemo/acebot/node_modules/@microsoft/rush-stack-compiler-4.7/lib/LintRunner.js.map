{"version":3,"file":"LintRunner.js","sourceRoot":"","sources":["../src/LintRunner.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,6BAA6B;AAC7B,oEAA6E;AAE7E,iDAA8C;AAC9C,iDAA8C;AAG9C,mEAAgE;AAEhE;;GAEG;AACH,MAAa,UAAW,SAAQ,6CAAwC;IAItE,YAAmB,WAA8B,EAAE,QAAgB,EAAE,gBAAmC;QACtG,KAAK,CAAC,WAAW,EAAE,QAAQ,EAAE,gBAAgB,CAAC,CAAC;QAE/C,IAAI,CAAC,aAAa,GAAG,IAAI,2BAAY,CAAC,WAAW,EAAE,QAAQ,EAAE,gBAAgB,CAAC,CAAC;QAC/E,IAAI,CAAC,aAAa,GAAG,IAAI,2BAAY,CAAC,WAAW,EAAE,QAAQ,EAAE,gBAAgB,CAAC,CAAC;IACjF,CAAC;IAEM,KAAK,CAAC,MAAM;QACjB,MAAM,cAAc,GAAW,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,iBAAiB,EAAE,aAAa,CAAC,CAAC;QAEtG,IAAI,8BAAU,CAAC,MAAM,CAAC,cAAc,CAAC,EAAE;YACrC,MAAM,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC;SACnC;QAED,0FAA0F;QAC1F,wGAAwG;QACxG,oGAAoG;QACpG,iCAAiC;QACjC,MAAM,eAAe,GAAW,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,iBAAiB,EAAE,cAAc,CAAC,CAAC;QACxG,MAAM,eAAe,GAAW,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,iBAAiB,EAAE,gBAAgB,CAAC,CAAC;QAE1G,IAAI,8BAAU,CAAC,MAAM,CAAC,eAAe,CAAC,IAAI,8BAAU,CAAC,MAAM,CAAC,eAAe,CAAC,EAAE;YAC5E,MAAM,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC;SACnC;IACH,CAAC;CACF;AA7BD,gCA6BC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport { ITerminalProvider, FileSystem } from '@rushstack/node-core-library';\r\n\r\nimport { TslintRunner } from './TslintRunner';\r\nimport { EslintRunner } from './EslintRunner';\r\n\r\nimport { ILintRunnerConfig } from './ILintRunnerConfig';\r\nimport { RushStackCompilerBase } from './RushStackCompilerBase';\r\n\r\n/**\r\n * @beta\r\n */\r\nexport class LintRunner extends RushStackCompilerBase<ILintRunnerConfig> {\r\n  private _eslintRunner: EslintRunner;\r\n  private _tslintRunner: TslintRunner;\r\n\r\n  public constructor(taskOptions: ILintRunnerConfig, rootPath: string, terminalProvider: ITerminalProvider) {\r\n    super(taskOptions, rootPath, terminalProvider);\r\n\r\n    this._eslintRunner = new EslintRunner(taskOptions, rootPath, terminalProvider);\r\n    this._tslintRunner = new TslintRunner(taskOptions, rootPath, terminalProvider);\r\n  }\r\n\r\n  public async invoke(): Promise<void> {\r\n    const tslintFilePath: string = path.join(this._standardBuildFolders.projectFolderPath, 'tslint.json');\r\n\r\n    if (FileSystem.exists(tslintFilePath)) {\r\n      await this._tslintRunner.invoke();\r\n    }\r\n\r\n    // ESLint supports too many different filenames and formats for its config file.  To avoid\r\n    // needless inconsistency, we only support JSON and JavaScript.  They are the most conventional formats,\r\n    // and have useful tradeoffs:  JSON is deterministic, whereas JavaScript enables certain workarounds\r\n    // for limitations of the format.\r\n    const eslintFilePath1: string = path.join(this._standardBuildFolders.projectFolderPath, '.eslintrc.js');\r\n    const eslintFilePath2: string = path.join(this._standardBuildFolders.projectFolderPath, '.eslintrc.json');\r\n\r\n    if (FileSystem.exists(eslintFilePath1) || FileSystem.exists(eslintFilePath2)) {\r\n      await this._eslintRunner.invoke();\r\n    }\r\n  }\r\n}\r\n"]}