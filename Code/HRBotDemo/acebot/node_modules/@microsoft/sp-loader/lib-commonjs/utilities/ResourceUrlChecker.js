"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var sp_diagnostics_1 = require("@microsoft/sp-diagnostics");
var resolveAddress_1 = tslib_1.__importDefault(require("./resolveAddress"));
var ErrorBuilder_1 = tslib_1.__importDefault(require("../error/ErrorBuilder"));
var UrlStatus;
(function (UrlStatus) {
    UrlStatus[UrlStatus["Undefined"] = 0] = "Undefined";
    UrlStatus[UrlStatus["OK"] = 1] = "OK";
    UrlStatus[UrlStatus["FileNotFound"] = 2] = "FileNotFound";
    UrlStatus[UrlStatus["Forbidden"] = 3] = "Forbidden";
    UrlStatus[UrlStatus["ClientError"] = 4] = "ClientError";
    UrlStatus[UrlStatus["ServerError"] = 5] = "ServerError";
    UrlStatus[UrlStatus["NetworkError"] = 6] = "NetworkError";
})(UrlStatus || (UrlStatus = {}));
var LOG_SOURCE = sp_diagnostics_1._LogSource.create('ResourceUrlChecker');
var LOCALHOST_URL_REGEXP = /^http[s]?:\/\/localhost/;
var TENANT_URL_REGEXP = /^http[s]?:\/\/[a-zA-Z0-9]+.sharepoint.com/;
var HTTPS_URL_REGEXP = /^https:\/\//;
/**
 * Checks if a resource URL is accessible and throws the right error for each case.
 *
 * In the case of localhost errors, it provides guidance on usage of 'gulp' to solve them.
 */
var ResourceUrlChecker = /** @class */ (function () {
    function ResourceUrlChecker() {
    }
    /**
     * Checks the resource URL for the HTTP response status code.
     * If the response is not successful, it throws the appropriate error.
     * @param manifest - Manifest where the resource is defined
     * @param name - Name of the resource to check
     */
    ResourceUrlChecker.checkResourceUrl = function (manifest, name) {
        sp_core_library_1.Validate.isNotNullOrUndefined(manifest, 'manifest');
        sp_core_library_1.Validate.isNonemptyString(name, 'name');
        var url = (0, resolveAddress_1.default)(manifest, name, ResourceUrlChecker.useSecondaryCdn);
        return ResourceUrlChecker._getUrlStatus(url).then(function (urlStatus) {
            if (urlStatus !== UrlStatus.OK) {
                return ResourceUrlChecker._throwUrlStatusError(urlStatus, manifest, name, url.path);
            }
            return Promise.resolve();
        });
    };
    ResourceUrlChecker._throwUrlStatusError = function (urlStatus, manifest, resourceName, url) {
        switch (urlStatus) {
            case UrlStatus.FileNotFound:
                if (url.match(LOCALHOST_URL_REGEXP)) {
                    throw ErrorBuilder_1.default.buildUrlStatusLocalhostFileNotFoundError(manifest, resourceName, url);
                }
                else {
                    throw ErrorBuilder_1.default.buildUrlStatusFileNotFoundError(manifest, resourceName, url);
                }
            case UrlStatus.Forbidden:
                throw ErrorBuilder_1.default.buildUrlStatusForbiddenError(manifest, resourceName, url);
            case UrlStatus.ClientError:
                throw ErrorBuilder_1.default.buildUrlStatusClientErrorError(manifest, resourceName, url);
            case UrlStatus.ServerError:
                throw ErrorBuilder_1.default.buildUrlStatusServerErrorError(manifest, resourceName, url);
            case UrlStatus.NetworkError:
                if (url.match(LOCALHOST_URL_REGEXP)) {
                    throw ErrorBuilder_1.default.buildUrlStatusLocalhostNetworkErrorError(manifest, resourceName, url);
                }
                else if (url.match(TENANT_URL_REGEXP)) {
                    throw ErrorBuilder_1.default.buildUrlStatusDocLibNetworkErrorError(manifest, resourceName, url);
                }
                else if (url.match(HTTPS_URL_REGEXP)) {
                    throw ErrorBuilder_1.default.buildUrlStatusHttpsNetworkErrorError(manifest, resourceName, url);
                }
                else {
                    throw ErrorBuilder_1.default.buildUrlStatusNetworkErrorError(manifest, resourceName, url);
                }
            case UrlStatus.Undefined:
            default:
                throw ErrorBuilder_1.default.buildUrlStatusUndefinedError(manifest, resourceName, url);
        }
    };
    // This is not using HttpClient because it might not be initialized at this time.
    // Do not use this code outside of sp-loader
    ResourceUrlChecker._getUrlStatus = function (url) {
        var requestInit = {
            method: 'HEAD',
            mode: 'cors',
            integrity: url.integrity
        };
        // TODO (1213908): Handle the subresource integrity
        var request = new Request(url.path, requestInit);
        return window
            .fetch(request)
            .then(function (response) {
            var httpStatusCode = response.status;
            if (httpStatusCode >= 200 && httpStatusCode < 300) {
                return UrlStatus.OK;
            }
            if (httpStatusCode === 404) {
                return UrlStatus.FileNotFound;
            }
            if (httpStatusCode === 403) {
                return UrlStatus.Forbidden;
            }
            if (httpStatusCode >= 400 && httpStatusCode < 500) {
                return UrlStatus.ClientError;
            }
            if (httpStatusCode >= 500 && httpStatusCode < 600) {
                return UrlStatus.ServerError;
            }
            return UrlStatus.Undefined;
        })
            .catch(function (error) {
            sp_diagnostics_1._TraceLogger.logError(LOG_SOURCE, error);
            return UrlStatus.NetworkError;
        });
    };
    ResourceUrlChecker.useSecondaryCdn = false;
    return ResourceUrlChecker;
}());
exports.default = ResourceUrlChecker;
//# sourceMappingURL=ResourceUrlChecker.js.map