import { type ITerminal } from '@rushstack/node-core-library';
/**
 * This interface represents the raw custom-tips.json file which allows repo maintainers
 * to configure extra details to be printed alongside certain Rush messages.
 * @beta
 */
export interface ICustomTipsJson {
    /**
     *  Specifies the custom tips to be displayed by Rush.
     */
    customTips?: ICustomTipItemJson[];
}
/**
 * An item from the {@link ICustomTipsJson.customTips} list.
 * @beta
 */
export interface ICustomTipItemJson {
    /**
     * (REQUIRED) An identifier indicating a message that may be printed by Rush.
     * If that message is printed, then this custom tip will be shown.
     * Consult the Rush documentation for the current list of possible identifiers.
     */
    tipId: CustomTipId;
    /**
     * (REQUIRED) The message text to be displayed for this tip.
     */
    message: string;
}
/**
 * An identifier representing a Rush message that can be customized by
 * defining a custom tip in `common/config/rush/custom-tips.json`.
 * @remarks
 * Custom tip ids always start with the `TIP_` prefix.
 *
 * @privateRemarks
 * Events from the Rush process should with "TIP_RUSH_".
 * Events from a PNPM subprocess should start with "TIP_PNPM_".
 *
 * @beta
 */
export declare enum CustomTipId {
    TIP_RUSH_INCONSISTENT_VERSIONS = "TIP_RUSH_INCONSISTENT_VERSIONS",
    TIP_PNPM_UNEXPECTED_STORE = "TIP_PNPM_UNEXPECTED_STORE",
    TIP_PNPM_NO_MATCHING_VERSION = "TIP_PNPM_NO_MATCHING_VERSION",
    TIP_PNPM_NO_MATCHING_VERSION_INSIDE_WORKSPACE = "TIP_PNPM_NO_MATCHING_VERSION_INSIDE_WORKSPACE",
    TIP_PNPM_PEER_DEP_ISSUES = "TIP_PNPM_PEER_DEP_ISSUES",
    TIP_PNPM_OUTDATED_LOCKFILE = "TIP_PNPM_OUTDATED_LOCKFILE",
    TIP_PNPM_TARBALL_INTEGRITY = "TIP_PNPM_TARBALL_INTEGRITY",
    TIP_PNPM_MISMATCHED_RELEASE_CHANNEL = "TIP_PNPM_MISMATCHED_RELEASE_CHANNEL",
    TIP_PNPM_INVALID_NODE_VERSION = "TIP_PNPM_INVALID_NODE_VERSION"
}
/**
 * The severity of a custom tip.
 * It determines the printing severity ("Error" = red, "Warning" = yellow, "Info" = normal).
 *
 * @beta
 */
export declare enum CustomTipSeverity {
    Warning = "Warning",
    Error = "Error",
    Info = "Info"
}
/**
 * The type of the custom tip.
 *
 * @remarks
 * There might be types like `git` in the future.
 *
 * @beta
 */
export declare enum CustomTipType {
    rush = "rush",
    pnpm = "pnpm"
}
/**
 * Metadata for a custom tip.
 *
 * @remarks
 * This differs from the  {@link ICustomTipItemJson} interface in that these are not configurable by the user;
 * it's the inherent state of a custom tip. For example, the custom tip for `ERR_PNPM_NO_MATCHING_VERSION`
 * has a inherent severity of `Error`, and a inherent match function that rush maintainer defines.
 *
 * @beta
 */
export interface ICustomTipInfo {
    tipId: CustomTipId;
    /**
     * The severity of the custom tip. It will determine the printing severity ("Error" = red, "Warning" = yellow, "Info" = normal).
     *
     * @remarks
     *  The severity should be consistent with the original message, unless there are strong reasons not to.
     */
    severity: CustomTipSeverity;
    /**
     * The type of the custom tip.
     */
    type: CustomTipType;
    /**
     * The function to determine how to match this tipId.
     *
     * @remarks
     * This function might need to be updated if the depending package is updated.
     * For example, if `pnpm` change the error logs for "ERR_PNPM_NO_MATCHING_VERSION", we will need to update the match function accordingly.
     */
    isMatch?: (str: string) => boolean;
}
export declare const RUSH_CUSTOM_TIPS: Readonly<Record<`TIP_RUSH_${string}` & CustomTipId, ICustomTipInfo>>;
export declare const PNPM_CUSTOM_TIPS: Readonly<Record<`TIP_PNPM_${string}` & CustomTipId, ICustomTipInfo>>;
/**
 * Used to access the `common/config/rush/custom-tips.json` config file,
 * which allows repo maintainers to configure extra details to be printed alongside
 * certain Rush messages.
 * @beta
 */
export declare class CustomTipsConfiguration {
    private static _jsonSchema;
    readonly providedCustomTipsByTipId: ReadonlyMap<CustomTipId, ICustomTipItemJson>;
    /**
     * A registry mapping custom tip IDs to their corresponding metadata.
     *
     * @remarks
     * This registry is used to look up metadata for custom tips based on their IDs. The metadata includes
     * information such as the severity level, the type of tip, and an optional matching function.
     *
     * Each key in the registry corresponds to a `CustomTipIdEnum` value, and each value is an object
     * implementing the `ICustomTipInfo` interface.
     *
     * @example
     * ```typescript
     * const tipInfo = CustomTipsConfiguration.customTipRegistry[CustomTipIdEnum.TIP_RUSH_INCONSISTENT_VERSIONS];
     * console.log(tipInfo.severity);  // Output: CustomTipSeverity.Error
     * ```
     *
     * See {@link CustomTipId} for the list of custom tip IDs.
     * See {@link ICustomTipInfo} for the structure of the metadata.
     */
    static customTipRegistry: Readonly<Record<CustomTipId, ICustomTipInfo>>;
    constructor(configFilePath: string);
    /**
     * If custom-tips.json defines a tip for the specified tipId,
     * display the tip on the terminal.
     *
     * @remarks
     * The severity of the tip is defined in ${@link CustomTipsConfiguration.customTipRegistry}.
     * If you want to change the severity specifically for this call, use other API like {@link CustomTipsConfiguration._showErrorTip}.
     *
     * @internal
     */
    _showTip(terminal: ITerminal, tipId: CustomTipId): void;
    /**
     * If custom-tips.json defines a tip for the specified tipId,
     * display the tip on the terminal.
     * @internal
     */
    _showInfoTip(terminal: ITerminal, tipId: CustomTipId): void;
    /**
     * If custom-tips.json defines a tip for the specified tipId,
     * display the tip on the terminal.
     * @internal
     */
    _showWarningTip(terminal: ITerminal, tipId: CustomTipId): void;
    /**
     * If custom-tips.json defines a tip for the specified tipId,
     * display the tip on the terminal.
     * @internal
     */
    _showErrorTip(terminal: ITerminal, tipId: CustomTipId): void;
    private _writeMessageWithPipes;
}
//# sourceMappingURL=CustomTipsConfiguration.d.ts.map