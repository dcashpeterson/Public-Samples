"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypingsGenerator = void 0;
const typings_generator_1 = require("@rushstack/typings-generator");
const LocFileParser_1 = require("./LocFileParser");
/**
 * This is a simple tool that generates .d.ts files for .loc.json, .resx.json, .resjson, and .resx files.
 *
 * @public
 */
class TypingsGenerator extends typings_generator_1.StringValuesTypingsGenerator {
    constructor(options) {
        const { ignoreString, processComment } = options;
        super({
            ...options,
            fileExtensions: ['.resx', '.resx.json', '.loc.json', '.resjson'],
            parseAndGenerateTypings: (fileContents, filePath, resxFilePath) => {
                const locFileData = (0, LocFileParser_1.parseLocFile)({
                    filePath: filePath,
                    content: fileContents,
                    terminal: this._options.terminal,
                    resxNewlineNormalization: options.resxNewlineNormalization,
                    ignoreMissingResxComments: options.ignoreMissingResxComments,
                    ignoreString
                });
                const typings = [];
                // eslint-disable-next-line guard-for-in
                for (const stringName in locFileData) {
                    let comment = locFileData[stringName].comment;
                    if (processComment) {
                        comment = processComment(comment, resxFilePath, stringName);
                    }
                    typings.push({
                        exportName: stringName,
                        comment
                    });
                }
                return { typings };
            }
        });
    }
}
exports.TypingsGenerator = TypingsGenerator;
//# sourceMappingURL=TypingsGenerator.js.map