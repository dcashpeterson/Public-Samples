{"version":3,"file":"loader.js","sourceRoot":"","sources":["../src/loader.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as path from 'path';\nimport type { SpawnSyncReturns } from 'child_process';\nimport { JsonFile, type JsonObject, Executable } from '@rushstack/node-core-library';\n\nimport {\n  tryFindRushJsonLocation,\n  RUSH_LIB_NAME,\n  type RushLibModuleType,\n  requireRushLibUnderFolderPath,\n  sdkContext\n} from './helpers';\n\ndeclare const global: typeof globalThis & {\n  ___rush___rushLibModule?: RushLibModuleType;\n  ___rush___rushLibModuleFromEnvironment?: RushLibModuleType;\n  ___rush___rushLibModuleFromInstallAndRunRush?: RushLibModuleType;\n};\n\n/**\n * Type of {@link ISdkCallbackEvent.logMessage}\n * @public\n */\nexport interface IProgressBarCallbackLogMessage {\n  /**\n   * A status message to print in the log window, or `undefined` if there are\n   * no further messages.  This string may contain newlines.\n   */\n  text: string;\n\n  /**\n   * The type of message.  More message types may be added in the future.\n   */\n  kind: 'info' | 'debug';\n}\n\n/**\n * Event options for {@link ILoadSdkAsyncOptions.onNotifyEvent}\n * @public\n */\nexport interface ISdkCallbackEvent {\n  /**\n   * Allows the caller to display log information about the operation.\n   */\n  logMessage: IProgressBarCallbackLogMessage | undefined;\n\n  /**\n   * Allows the caller to display a progress bar for long-running operations.\n   *\n   * @remarks\n   * If a long-running operation is required, then `progressPercent` will\n   * start at 0.0 and count upwards and finish at 100.0 if the operation completes\n   * successfully.  If the long-running operation has not yet started, or\n   * is not required, then the value will be `undefined`.\n   */\n  progressPercent: number | undefined;\n}\n\n/**\n * Type of {@link ILoadSdkAsyncOptions.onNotifyEvent}\n * @public\n */\nexport type SdkNotifyEventCallback = (sdkEvent: ISdkCallbackEvent) => void;\n\n/**\n * Options for {@link RushSdkLoader.loadAsync}\n * @public\n */\nexport interface ILoadSdkAsyncOptions {\n  /**\n   * The folder to start from when searching for the Rush workspace configuration.\n   * If this folder does not contain a `rush.json` file, then each parent folder\n   * will be searched.  If `rush.json` is not found, then the SDK fails to load.\n   */\n  rushJsonSearchFolder?: string;\n\n  /**\n   * A cancellation token that the caller can use to prematurely abort the operation.\n   */\n  abortSignal?: AbortSignal;\n\n  /**\n   * Allows the caller to monitor the progress of the operation.\n   */\n  onNotifyEvent?: SdkNotifyEventCallback;\n}\n\n/**\n * Exposes operations that control how the `@microsoft/rush-lib` engine is\n * located and loaded.\n * @public\n */\nexport class RushSdkLoader {\n  /**\n   * Throws an \"AbortError\" exception if abortSignal.aborted is true.\n   */\n  private static _checkForCancel(\n    abortSignal: AbortSignal,\n    onNotifyEvent: SdkNotifyEventCallback | undefined,\n    progressPercent: number | undefined\n  ): void {\n    if (!abortSignal?.aborted) {\n      return;\n    }\n\n    if (onNotifyEvent) {\n      onNotifyEvent({\n        logMessage: {\n          kind: 'info',\n          text: `The operation was canceled`\n        },\n        progressPercent\n      });\n    }\n\n    const error: Error = new Error('The operation was canceled');\n    error.name = 'AbortError';\n    throw error;\n  }\n\n  /**\n   * Returns true if the Rush engine has already been loaded.\n   */\n  public static get isLoaded(): boolean {\n    return sdkContext.rushLibModule !== undefined;\n  }\n\n  /**\n   * Manually load the Rush engine based on rush.json found for `rushJsonSearchFolder`.\n   * Throws an exception if {@link RushSdkLoader.isLoaded} is already `true`.\n   *\n   * @remarks\n   * This API supports an callback that can be used display a progress bar,\n   * log of operations, and allow the operation to be canceled prematurely.\n   */\n  public static async loadAsync(options?: ILoadSdkAsyncOptions): Promise<void> {\n    // SCENARIO 5: The rush-lib engine is loaded manually using rushSdkLoader.loadAsync().\n\n    if (!options) {\n      options = {};\n    }\n\n    if (RushSdkLoader.isLoaded) {\n      throw new Error('RushSdkLoader.loadAsync() failed because the Rush engine has already been loaded');\n    }\n\n    const onNotifyEvent: SdkNotifyEventCallback | undefined = options.onNotifyEvent;\n    let progressPercent: number | undefined = undefined;\n\n    const abortSignal: AbortSignal | undefined = options.abortSignal;\n\n    try {\n      const rushJsonSearchFolder: string = options.rushJsonSearchFolder ?? process.cwd();\n\n      if (onNotifyEvent) {\n        onNotifyEvent({\n          logMessage: {\n            kind: 'debug',\n            text: `Searching for rush.json starting from: ` + rushJsonSearchFolder\n          },\n          progressPercent\n        });\n      }\n\n      const rushJsonPath: string | undefined = tryFindRushJsonLocation(rushJsonSearchFolder);\n      if (!rushJsonPath) {\n        throw new Error(\n          'Unable to find rush.json in the specified folder or its parent folders:\\n' +\n            `${rushJsonSearchFolder}\\n`\n        );\n      }\n      const monorepoRoot: string = path.dirname(rushJsonPath);\n\n      const rushJson: JsonObject = await JsonFile.loadAsync(rushJsonPath);\n      const { rushVersion } = rushJson;\n\n      const installRunNodeModuleFolder: string = path.join(\n        monorepoRoot,\n        `common/temp/install-run/@microsoft+rush@${rushVersion}`\n      );\n\n      try {\n        // First, try to load the version of \"rush-lib\" that was installed by install-run-rush.js\n        if (onNotifyEvent) {\n          onNotifyEvent({\n            logMessage: {\n              kind: 'info',\n              text: `Trying to load  ${RUSH_LIB_NAME} installed by install-run-rush`\n            },\n            progressPercent\n          });\n        }\n        sdkContext.rushLibModule = requireRushLibUnderFolderPath(installRunNodeModuleFolder);\n      } catch (e1) {\n        let installAndRunRushStderrContent: string = '';\n        try {\n          const installAndRunRushJSPath: string = path.join(\n            monorepoRoot,\n            'common/scripts/install-run-rush.js'\n          );\n\n          if (onNotifyEvent) {\n            onNotifyEvent({\n              logMessage: {\n                kind: 'info',\n                text: 'The Rush engine has not been installed yet. Invoking install-run-rush.js...'\n              },\n              progressPercent\n            });\n          }\n\n          // Start the installation\n          progressPercent = 0;\n\n          const installAndRunRushProcess: SpawnSyncReturns<string> = Executable.spawnSync(\n            'node',\n            [installAndRunRushJSPath, '--help'],\n            {\n              stdio: 'pipe'\n            }\n          );\n\n          installAndRunRushStderrContent = installAndRunRushProcess.stderr;\n          if (installAndRunRushProcess.status !== 0) {\n            throw new Error(`The ${RUSH_LIB_NAME} package failed to install`);\n          }\n\n          if (abortSignal) {\n            RushSdkLoader._checkForCancel(abortSignal, onNotifyEvent, progressPercent);\n          }\n\n          // TODO: Implement incremental progress updates\n          progressPercent = 90;\n\n          // Retry to load \"rush-lib\" after install-run-rush run\n          if (onNotifyEvent) {\n            onNotifyEvent({\n              logMessage: {\n                kind: 'debug',\n                text: `Trying to load  ${RUSH_LIB_NAME} installed by install-run-rush a second time`\n              },\n              progressPercent\n            });\n          }\n\n          sdkContext.rushLibModule = requireRushLibUnderFolderPath(installRunNodeModuleFolder);\n\n          progressPercent = 100;\n        } catch (e2) {\n          // eslint-disable-next-line no-console\n          console.error(`${installAndRunRushStderrContent}`);\n          throw new Error(`The ${RUSH_LIB_NAME} package failed to load`);\n        }\n      }\n\n      if (sdkContext.rushLibModule !== undefined) {\n        // to track which scenario is active and how it got initialized.\n        global.___rush___rushLibModuleFromInstallAndRunRush = sdkContext.rushLibModule;\n        if (onNotifyEvent) {\n          onNotifyEvent({\n            logMessage: {\n              kind: 'debug',\n              text: `Loaded ${RUSH_LIB_NAME} installed by install-run-rush`\n            },\n            progressPercent\n          });\n        }\n      }\n    } catch (e) {\n      if (onNotifyEvent) {\n        onNotifyEvent({\n          logMessage: {\n            kind: 'info',\n            text: 'The operation failed: ' + (e.message ?? 'An unknown error occurred')\n          },\n          progressPercent\n        });\n      }\n      throw e;\n    }\n  }\n}\n"]}