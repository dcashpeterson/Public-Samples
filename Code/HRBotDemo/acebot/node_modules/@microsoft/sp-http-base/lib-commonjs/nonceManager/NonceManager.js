"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NonceManager = void 0;
var sp_diagnostics_1 = require("@microsoft/sp-diagnostics");
var NonceManager = /** @class */ (function () {
    function NonceManager() {
        this._nonceMap = new Map();
        this._NONCE_REGEX = /nonce="([^"]*)"/;
    }
    NonceManager.getNonceManager = function () {
        if (this._nonceManager == null) {
            this._nonceManager = new NonceManager();
        }
        return this._nonceManager;
    };
    /**
     * This method returns the nonce corresponding to their resource endpoint, if it's not present in the cached nonce map
     * then fetch it from the resource server.
     *
     * @param resourceEndpoint - The endpoint the caller is requesting a resource from.
     * @returns A promise containing the nonce string.
     */
    NonceManager.prototype.getNonceFromResource = function (resourceEndpoint, useCachedToken) {
        var _this = this;
        var shrNonceKey = this._getKey(resourceEndpoint);
        var shrNonce = this._getNonce(shrNonceKey);
        if (shrNonce && useCachedToken) {
            return Promise.resolve(shrNonce);
        }
        // creating PoP Resource request header
        var reqHeaders = new Headers();
        reqHeaders.append('Authorization', 'Bearer');
        reqHeaders.append('Accept-Auth', 'PoP');
        var options = {
            method: 'HEAD',
            headers: reqHeaders,
            credentials: 'omit'
        };
        this._qosMonitor = new sp_diagnostics_1._QosMonitor('NonceManager.GetShrNonce');
        return fetch(resourceEndpoint, options)
            .then(function (response) {
            var _a, _b, _c;
            var wwwAuthenticateHeader = response.headers.get('www-authenticate');
            if (response.status === 401 && wwwAuthenticateHeader) {
                var nonce = wwwAuthenticateHeader.match(_this._NONCE_REGEX);
                if ((nonce === null || nonce === void 0 ? void 0 : nonce.length) === 2) {
                    shrNonce = nonce[1];
                }
                else {
                    var error = new Error('Unable to fetch nonce from wwwAuthenticate Header: ' + wwwAuthenticateHeader);
                    (_a = _this._qosMonitor) === null || _a === void 0 ? void 0 : _a.writeUnexpectedFailure('getShrNonceFromResource', error, response);
                    return Promise.reject(error);
                }
                _this.updateNonceMap(shrNonceKey, shrNonce);
                (_b = _this._qosMonitor) === null || _b === void 0 ? void 0 : _b.writeSuccess({ ResourceEndpoint: resourceEndpoint });
                return Promise.resolve(shrNonce);
            }
            else {
                var error = new Error('Error while fetching nonce from resource.\n Resource response: ' + response);
                (_c = _this._qosMonitor) === null || _c === void 0 ? void 0 : _c.writeUnexpectedFailure('getShrNonceFromResource', error, response);
                return Promise.reject(error);
            }
        })
            .catch(function (error) {
            var _a;
            (_a = _this._qosMonitor) === null || _a === void 0 ? void 0 : _a.writeUnexpectedFailure(error.errorCode, error);
            return Promise.reject(error);
        });
    };
    /**
     * update Nonce Map with new nonce-resourceEndpoint pair
     */
    NonceManager.prototype.updateNonceMap = function (shrNonceKey, nonce) {
        if (nonce) {
            this._nonceMap[shrNonceKey] = nonce;
        }
        else {
            throw new Error('updateNonceMap failed as nonce is not present');
        }
    };
    /**
     * return key i.e. hostname used for nonce based on url
     */
    NonceManager.prototype._getKey = function (resourceEndpoint) {
        try {
            if (!resourceEndpoint.startsWith('http://') && !resourceEndpoint.startsWith('https://')) {
                resourceEndpoint = 'https://'.concat(resourceEndpoint);
            }
            var hostname = new URL(resourceEndpoint).hostname;
            return hostname;
        }
        catch (error) {
            throw new Error(error.message + ': wrong-url');
        }
    };
    /**
     * return the nonce value from Nonce Map if present, otherwise return empty string
     */
    NonceManager.prototype._getNonce = function (shrNonceKey) {
        return this._nonceMap[shrNonceKey] ? this._nonceMap[shrNonceKey] : '';
    };
    return NonceManager;
}());
exports.NonceManager = NonceManager;
//# sourceMappingURL=NonceManager.js.map