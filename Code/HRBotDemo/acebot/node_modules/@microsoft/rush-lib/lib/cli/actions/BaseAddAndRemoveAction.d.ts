import type { CommandLineFlagParameter, CommandLineStringListParameter } from '@rushstack/ts-command-line';
import { BaseRushAction, type IBaseRushActionOptions } from './BaseRushAction';
import type { RushConfigurationProject } from '../../api/RushConfigurationProject';
import type { IPackageForRushUpdate, IPackageJsonUpdaterRushBaseUpdateOptions } from '../../logic/PackageJsonUpdaterTypes';
export interface IBasePackageJsonUpdaterRushOptions {
    /**
     * The projects whose package.jsons should get updated
     */
    projects: RushConfigurationProject[];
    /**
     * The dependencies to be added.
     */
    packagesToHandle: IPackageForRushUpdate[];
    /**
     * If specified, "rush update" will not be run after updating the package.json file(s).
     */
    skipUpdate: boolean;
    /**
     * If specified, "rush update" will be run in debug mode.
     */
    debugInstall: boolean;
}
/**
 * This is the common base class for AddAction and RemoveAction.
 */
export declare abstract class BaseAddAndRemoveAction extends BaseRushAction {
    protected abstract readonly _allFlag: CommandLineFlagParameter;
    protected readonly _skipUpdateFlag: CommandLineFlagParameter;
    protected abstract readonly _packageNameList: CommandLineStringListParameter;
    protected get specifiedPackageNameList(): readonly string[];
    constructor(options: IBaseRushActionOptions);
    protected abstract getUpdateOptions(): IPackageJsonUpdaterRushBaseUpdateOptions;
    protected getProjects(): RushConfigurationProject[];
    runAsync(): Promise<void>;
}
//# sourceMappingURL=BaseAddAndRemoveAction.d.ts.map