{"version":3,"file":"PackletAnalyzer.js","sourceRoot":"","sources":["../src/PackletAnalyzer.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as fs from 'fs';\r\nimport { Path } from './Path';\r\n\r\nexport type InputFileMessageIds =\r\n  | 'file-in-packets-folder'\r\n  | 'invalid-packlet-name'\r\n  | 'misplaced-packlets-folder'\r\n  | 'missing-src-folder'\r\n  | 'missing-tsconfig'\r\n  | 'packlet-folder-case';\r\n\r\nexport type ImportMessageIds =\r\n  | 'bypassed-entry-point'\r\n  | 'circular-entry-point'\r\n  | 'packlet-importing-project-file';\r\n\r\nexport interface IAnalyzerError {\r\n  messageId: InputFileMessageIds | ImportMessageIds;\r\n  data?: Readonly<Record<string, unknown>>;\r\n}\r\n\r\nexport class PackletAnalyzer {\r\n  private static _validPackletName: RegExp = /^[a-z0-9]+(-[a-z0-9]+)*$/;\r\n\r\n  /**\r\n   * The input file being linted.\r\n   *\r\n   * Example: \"/path/to/my-project/src/file.ts\"\r\n   */\r\n  public readonly inputFilePath: string;\r\n\r\n  /**\r\n   * An error that occurred while analyzing the inputFilePath.\r\n   */\r\n  public readonly error: IAnalyzerError | undefined;\r\n\r\n  /**\r\n   * Returned to indicate that the linter can ignore this file.  Possible reasons:\r\n   * - It's outside the \"src\" folder\r\n   * - The project doesn't define any packlets\r\n   */\r\n  public readonly nothingToDo: boolean;\r\n\r\n  /**\r\n   * If true, then the \"src/packlets\" folder exists.\r\n   */\r\n  public readonly projectUsesPacklets: boolean;\r\n\r\n  /**\r\n   * The absolute path of the \"src/packlets\" folder.\r\n   */\r\n  public readonly packletsFolderPath: string | undefined;\r\n\r\n  /**\r\n   * The packlet that the inputFilePath is under, if any.\r\n   */\r\n  public readonly inputFilePackletName: string | undefined;\r\n\r\n  /**\r\n   * Returns true if inputFilePath belongs to a packlet and is the entry point index.ts.\r\n   */\r\n  public readonly isEntryPoint: boolean;\r\n\r\n  private constructor(inputFilePath: string, tsconfigFilePath: string | undefined) {\r\n    this.inputFilePath = inputFilePath;\r\n    this.error = undefined;\r\n    this.nothingToDo = false;\r\n    this.projectUsesPacklets = false;\r\n    this.packletsFolderPath = undefined;\r\n    this.inputFilePackletName = undefined;\r\n    this.isEntryPoint = false;\r\n\r\n    // Example: /path/to/my-project/src\r\n    let srcFolderPath: string | undefined;\r\n\r\n    if (!tsconfigFilePath) {\r\n      this.error = { messageId: 'missing-tsconfig' };\r\n      return;\r\n    }\r\n\r\n    srcFolderPath = Path.join(Path.dirname(tsconfigFilePath), 'src');\r\n\r\n    if (!fs.existsSync(srcFolderPath)) {\r\n      this.error = { messageId: 'missing-src-folder', data: { srcFolderPath } };\r\n      return;\r\n    }\r\n\r\n    if (!Path.isUnder(inputFilePath, srcFolderPath)) {\r\n      // Ignore files outside the \"src\" folder\r\n      this.nothingToDo = true;\r\n      return;\r\n    }\r\n\r\n    // Example: packlets/my-packlet/index.ts\r\n    const inputFilePathRelativeToSrc: string = Path.relative(srcFolderPath, inputFilePath);\r\n\r\n    // Example: [ 'packlets', 'my-packlet', 'index.ts' ]\r\n    const pathParts: string[] = inputFilePathRelativeToSrc.split(/[\\/\\\\]+/);\r\n\r\n    let underPackletsFolder: boolean = false;\r\n\r\n    const expectedPackletsFolder: string = Path.join(srcFolderPath, 'packlets');\r\n\r\n    for (let i = 0; i < pathParts.length; ++i) {\r\n      const pathPart: string = pathParts[i];\r\n      if (pathPart.toUpperCase() === 'PACKLETS') {\r\n        if (pathPart !== 'packlets') {\r\n          // Example: /path/to/my-project/src/PACKLETS\r\n          const packletsFolderPath: string = Path.join(srcFolderPath, ...pathParts.slice(0, i + 1));\r\n          this.error = { messageId: 'packlet-folder-case', data: { packletsFolderPath } };\r\n          return;\r\n        }\r\n\r\n        if (i !== 0) {\r\n          this.error = { messageId: 'misplaced-packlets-folder', data: { expectedPackletsFolder } };\r\n          return;\r\n        }\r\n\r\n        underPackletsFolder = true;\r\n      }\r\n    }\r\n\r\n    if (underPackletsFolder || fs.existsSync(expectedPackletsFolder)) {\r\n      // packletsAbsolutePath\r\n      this.projectUsesPacklets = true;\r\n      this.packletsFolderPath = expectedPackletsFolder;\r\n    }\r\n\r\n    if (underPackletsFolder) {\r\n      if (pathParts.length === 2) {\r\n        // Example: src/packlets/SomeFile.ts\r\n        this.error = { messageId: 'file-in-packets-folder' };\r\n        return;\r\n      }\r\n      if (pathParts.length >= 2) {\r\n        // Example: 'my-packlet'\r\n        const packletName: string = pathParts[1];\r\n        this.inputFilePackletName = packletName;\r\n\r\n        if (pathParts.length === 3) {\r\n          // Example: 'index.ts' or 'index.tsx'\r\n          const thirdPart: string = pathParts[2];\r\n\r\n          // Example: 'index'\r\n          const thirdPartWithoutExtension: string = Path.parse(thirdPart).name;\r\n\r\n          if (thirdPartWithoutExtension.toUpperCase() === 'INDEX') {\r\n            if (!PackletAnalyzer._validPackletName.test(packletName)) {\r\n              this.error = { messageId: 'invalid-packlet-name', data: { packletName } };\r\n              return;\r\n            }\r\n\r\n            this.isEntryPoint = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.error === undefined && !this.projectUsesPacklets) {\r\n      this.nothingToDo = true;\r\n    }\r\n  }\r\n\r\n  public static analyzeInputFile(inputFilePath: string, tsconfigFilePath: string | undefined) {\r\n    return new PackletAnalyzer(inputFilePath, tsconfigFilePath);\r\n  }\r\n\r\n  public analyzeImport(modulePath: string): IAnalyzerError | undefined {\r\n    if (!this.packletsFolderPath) {\r\n      // The caller should ensure this can never happen\r\n      throw new Error('Internal error: packletsFolderPath is not defined');\r\n    }\r\n\r\n    // Example: /path/to/my-project/src/packlets/my-packlet\r\n    const inputFileFolder: string = Path.dirname(this.inputFilePath);\r\n\r\n    // Example: /path/to/my-project/src/other-packlet/index\r\n    const importedPath: string = Path.resolve(inputFileFolder, modulePath);\r\n\r\n    // Is the imported path referring to a file under the src/packlets folder?\r\n    if (Path.isUnder(importedPath, this.packletsFolderPath)) {\r\n      // Example: other-packlet/index\r\n      const importedPathRelativeToPackletsFolder: string = Path.relative(\r\n        this.packletsFolderPath,\r\n        importedPath\r\n      );\r\n      // Example: [ 'other-packlet', 'index' ]\r\n      const importedPathParts: string[] = importedPathRelativeToPackletsFolder.split(/[\\/\\\\]+/);\r\n      if (importedPathParts.length > 0) {\r\n        // Example: 'other-packlet'\r\n        const importedPackletName: string = importedPathParts[0];\r\n\r\n        // We are importing from a packlet. Is the input file part of the same packlet?\r\n        if (this.inputFilePackletName && importedPackletName === this.inputFilePackletName) {\r\n          // Yes.  Then our import must NOT use the packlet entry point.\r\n\r\n          // Example: 'index'\r\n          //\r\n          // We discard the file extension to handle a degenerate case like:\r\n          //   import { X } from \"../index.js\";\r\n          const lastPart: string = Path.parse(importedPathParts[importedPathParts.length - 1]).name;\r\n          let pathToCompare: string;\r\n          if (lastPart.toUpperCase() === 'INDEX') {\r\n            // Example:\r\n            //   importedPath = /path/to/my-project/src/other-packlet/index\r\n            //   pathToCompare = /path/to/my-project/src/other-packlet\r\n            pathToCompare = Path.dirname(importedPath);\r\n          } else {\r\n            pathToCompare = importedPath;\r\n          }\r\n\r\n          // Example: /path/to/my-project/src/other-packlet\r\n          const entryPointPath: string = Path.join(this.packletsFolderPath, importedPackletName);\r\n\r\n          if (Path.isEqual(pathToCompare, entryPointPath)) {\r\n            return {\r\n              messageId: 'circular-entry-point'\r\n            };\r\n          }\r\n        } else {\r\n          // No.  If we are not part of the same packlet, then the module path must refer\r\n          // to the index.ts entry point.\r\n\r\n          // Example: /path/to/my-project/src/other-packlet\r\n          const entryPointPath: string = Path.join(this.packletsFolderPath, importedPackletName);\r\n\r\n          if (!Path.isEqual(importedPath, entryPointPath)) {\r\n            // Example: \"../packlets/other-packlet\"\r\n            const entryPointModulePath: string = Path.convertToSlashes(\r\n              Path.relative(inputFileFolder, entryPointPath)\r\n            );\r\n\r\n            return {\r\n              messageId: 'bypassed-entry-point',\r\n              data: { entryPointModulePath }\r\n            };\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      // The imported path does NOT refer to a file under the src/packlets folder\r\n      if (this.inputFilePackletName) {\r\n        return {\r\n          messageId: 'packlet-importing-project-file'\r\n        };\r\n      }\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n}\r\n"]}