import { ActionType, CardElement, Container, SerializationContext } from "./card-elements";
import * as Enums from "./enums";
import { BoolProperty, NumProperty, EnumProperty, PropertyBag, SerializableObjectSchema, PixelSizeProperty } from "./serialization";
export declare class CarouselPage extends Container {
    protected populateSchema(schema: SerializableObjectSchema): void;
    protected internalRender(): HTMLElement | undefined;
    getForbiddenActionTypes(): ActionType[];
    getForbiddenChildElements(): string[];
    protected forbiddenChildElements(): string[];
    protected internalParse(source: any, context: SerializationContext): void;
    protected shouldSerialize(_context: SerializationContext): boolean;
    getJsonTypeName(): string;
    get isStandalone(): boolean;
    get hasVisibleSeparator(): boolean;
}
export declare class Carousel extends Container {
    protected populateSchema(schema: SerializableObjectSchema): void;
    static readonly timerProperty: NumProperty;
    get timer(): number | undefined;
    set timer(value: number | undefined);
    static readonly initialPageProperty: NumProperty;
    get initialPageIndex(): number;
    set initialPageIndex(value: number);
    static readonly loopProperty: BoolProperty;
    carouselLoop: boolean;
    static readonly orientationProperty: EnumProperty<typeof Enums.Orientation>;
    carouselOrientation: Enums.Orientation;
    static readonly carouselHeightProperty: PixelSizeProperty;
    carouselHeight?: number;
    private isValidParsedPageIndex;
    private isValidRenderedPageIndex;
    private isValidPageIndex;
    get previousEventType(): Enums.CarouselInteractionEvent;
    set previousEventType(eventType: Enums.CarouselInteractionEvent);
    private _pages;
    private _renderedPages;
    private _carouselPageContainer;
    private _containerForAdorners;
    private _currentIndex;
    private _previousEventType;
    private _observer;
    private _carousel;
    protected forbiddenChildElements(): string[];
    protected adjustRenderedElementSize(renderedElement: HTMLElement): void;
    getJsonTypeName(): string;
    getItemCount(): number;
    getItemAt(index: number): CardElement;
    addPage(page: CarouselPage): void;
    removeItem(item: CardElement): boolean;
    getFirstVisibleRenderedItem(): CardElement | undefined;
    getLastVisibleRenderedItem(): CardElement | undefined;
    get currentPageId(): string | undefined;
    get currentPageIndex(): number | undefined;
    protected internalParse(source: any, context: SerializationContext): void;
    private validateParsing;
    protected internalToJSON(target: PropertyBag, context: SerializationContext): void;
    protected internalRender(): HTMLElement | undefined;
    applyRTL(pagination: HTMLElement): void;
    validateOrientationProperties(): void;
    updateCssForHorizontalCarousel(prevElementDiv: HTMLElement, nextElementDiv: HTMLElement): void;
    updateCssForVerticalCarousel(navigationContainer: HTMLElement, prevElementDiv: HTMLElement, nextElementDiv: HTMLElement): void;
    private initializeCarouselControl;
    private createCarouselPageInstance;
    slideTo(index: number): void;
    get carouselPageContainer(): HTMLElement;
    get currentIndex(): number;
    set currentIndex(currentIndex: number);
    private createCarouselEvent;
    private raiseCarouselEvent;
    private createResizeObserver;
    private destroyResizeObserver;
    private checkIfCarouselInValidStateForResizeEvent;
}
export declare class CarouselEvent {
    type: Enums.CarouselInteractionEvent;
    carouselId: string | undefined;
    activeCarouselPageId: string | undefined;
    activeCarouselPageIndex: number | undefined;
    constructor(type: Enums.CarouselInteractionEvent, carouselId: string | undefined, activeCarouselPageId: string | undefined, activeCarouselPageIndex: number | undefined);
}
