"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RushAzureStorageBuildCachePlugin = void 0;
const PLUGIN_NAME = 'AzureStorageBuildCachePlugin';
/**
 * @public
 */
class RushAzureStorageBuildCachePlugin {
    constructor() {
        this.pluginName = PLUGIN_NAME;
    }
    apply(rushSession, rushConfig) {
        rushSession.hooks.initialize.tap(PLUGIN_NAME, () => {
            rushSession.registerCloudBuildCacheProviderFactory('azure-blob-storage', async (buildCacheConfig) => {
                const { azureBlobStorageConfiguration } = buildCacheConfig;
                const { AzureStorageBuildCacheProvider } = await Promise.resolve().then(() => __importStar(require('./AzureStorageBuildCacheProvider')));
                return new AzureStorageBuildCacheProvider({
                    storageAccountName: azureBlobStorageConfiguration.storageAccountName,
                    storageContainerName: azureBlobStorageConfiguration.storageContainerName,
                    azureEnvironment: azureBlobStorageConfiguration.azureEnvironment,
                    blobPrefix: azureBlobStorageConfiguration.blobPrefix,
                    isCacheWriteAllowed: !!azureBlobStorageConfiguration.isCacheWriteAllowed
                });
            });
        });
    }
}
exports.RushAzureStorageBuildCachePlugin = RushAzureStorageBuildCachePlugin;
//# sourceMappingURL=RushAzureStorageBuildCachePlugin.js.map