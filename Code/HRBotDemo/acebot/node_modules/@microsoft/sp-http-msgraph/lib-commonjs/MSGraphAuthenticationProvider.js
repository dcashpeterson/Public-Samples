"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MSGraphAuthenticationProvider = void 0;
var sp_diagnostics_1 = require("@microsoft/sp-diagnostics");
var sp_http_base_1 = require("@microsoft/sp-http-base");
var MSGraphAuthenticationProvider = /** @class */ (function () {
    function MSGraphAuthenticationProvider(tokenProvider, graphBaseUrl, isInternal) {
        this._tokenProvider = tokenProvider;
        this._graphBaseUrl = graphBaseUrl;
        this._isInternal = isInternal;
    }
    MSGraphAuthenticationProvider.prototype.getAccessToken = function () {
        //
        // theoretically, we could check if ('_getTokenInternal' in this._tokenProvider).
        // But it could potentially lead to issues if someone adds this method to IAadTokenProvider interface.
        //
        if (this._isInternal) {
            return this._getInternalToken(this._tokenProvider);
        }
        else {
            return this._getOAuthToken(this._tokenProvider);
        }
    };
    MSGraphAuthenticationProvider.prototype._getOAuthToken = function (tokenProvider) {
        var qosMonitor = new sp_diagnostics_1._QosMonitor('MSGraphClient.FetchGraphToken');
        return tokenProvider
            .getToken(this._graphBaseUrl)
            .then(function (response) {
            qosMonitor.writeSuccess();
            return response;
        })
            .catch(function (error) {
            qosMonitor.writeUnexpectedFailure(error.message, error);
            throw error;
        });
    };
    MSGraphAuthenticationProvider.prototype._getInternalToken = function (tokenProvider) {
        var qosMonitor = new sp_diagnostics_1._QosMonitor('MSGraphClient.FetchInternalGraphToken');
        return tokenProvider
            ._getTokenInternal(this._graphBaseUrl, sp_http_base_1._AadTokenProviders.preAuthorizedConfiguration)
            .then(function (response) {
            qosMonitor.writeSuccess();
            return response;
        })
            .catch(function (error) {
            qosMonitor.writeUnexpectedFailure(error.message, error);
            throw error;
        });
    };
    return MSGraphAuthenticationProvider;
}());
exports.MSGraphAuthenticationProvider = MSGraphAuthenticationProvider;
//# sourceMappingURL=MSGraphAuthenticationProvider.js.map