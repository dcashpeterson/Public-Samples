'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var adaptivecardsTemplating = require('adaptivecards-templating');
var adaptivecards = require('adaptivecards');
var Markdown = require('markdown-it');
var React = require('react');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var Markdown__default = /*#__PURE__*/_interopDefaultLegacy(Markdown);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

/* eslint-disable @typescript-eslint/no-namespace */
var md = new Markdown__default["default"]();
adaptivecards.AdaptiveCard.onProcessMarkdown = function (text, result) {
    result.outputHtml = md.render(text);
    result.didProcess = true;
};
exports.AdaptiveCards = void 0;
(function (AdaptiveCards) {
    function isAdaptiveCardSchema(object) {
        return object.type == "AdaptiveCard";
    }
    AdaptiveCards.isAdaptiveCardSchema = isAdaptiveCardSchema;
    function renderWithData(template, data) {
        var payload = new adaptivecardsTemplating.Template(template).expand({ $root: data });
        return payload;
    }
    AdaptiveCards.renderWithData = renderWithData;
    function renderToHtmlElement(template, data) {
        return declare(template).renderToHtmlElement(data);
    }
    AdaptiveCards.renderToHtmlElement = renderToHtmlElement;
    function declare(template, defaults) {
        return {
            template: template,
            render: function (data) {
                return typeof defaults == "function"
                    ? renderWithData(template, defaults(data))
                    : data
                        ? renderWithData(template, data)
                        : template;
            },
            refresh: function (verb, userIds, data) {
                template.refresh = {
                    action: {
                        type: "Action.Execute",
                        title: verb,
                        verb: verb,
                        data: data,
                    },
                    userIds: userIds,
                };
                return this;
            },
            renderToHtmlElement: function (data) {
                var ac = new adaptivecards.AdaptiveCard();
                ac.parse(this.render(typeof defaults == "function" ? defaults(data) : data));
                return ac.render();
            },
        };
    }
    AdaptiveCards.declare = declare;
    function declareWithoutData(template) {
        var withoutData = declare(template);
        return {
            template: template,
            render: function () {
                return withoutData.render();
            },
            renderToHtmlElement: function () {
                return withoutData.renderToHtmlElement();
            },
        };
    }
    AdaptiveCards.declareWithoutData = declareWithoutData;
})(exports.AdaptiveCards || (exports.AdaptiveCards = {}));

// Copyright (c) Microsoft Corporation.
// TODO: Error handling
// TODO: plain payload without templating
// TODO: better rendering to JSX instead of DOM manipulation directly
// TODO: support themes and simulating renderers (Teams, Outlook, themes)
function AdaptiveCard(props) {
    var template = props.template, data = props.data;
    try {
        var payload_1 = data ? exports.AdaptiveCards.renderWithData(template, data) : template;
        return (React__default["default"].createElement("div", { className: "ac-container", ref: function (v) {
                (v === null || v === void 0 ? void 0 : v.firstChild) && (v === null || v === void 0 ? void 0 : v.removeChild(v.firstChild));
                var ac = exports.AdaptiveCards.renderToHtmlElement(payload_1);
                ac && (v === null || v === void 0 ? void 0 : v.appendChild(ac));
            } }));
    }
    catch (err) {
        return (React__default["default"].createElement("div", { className: "ac-container error" },
            React__default["default"].createElement("div", null, err.toString())));
    }
}

// Copyright (c) Microsoft Corporation.
function TextBlock(p) {
    return React__default["default"].createElement("div", null);
}
function Bold(p) {
    return React__default["default"].createElement("div", null);
}

exports.AdaptiveCard = AdaptiveCard;
exports.Bold = Bold;
exports.TextBlock = TextBlock;
//# sourceMappingURL=index.js.map
