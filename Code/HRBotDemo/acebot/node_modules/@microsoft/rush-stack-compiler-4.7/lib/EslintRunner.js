"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
exports.EslintRunner = void 0;
const path = require("path");
const CmdRunner_1 = require("./CmdRunner");
const ToolPaths_1 = require("./ToolPaths");
const RushStackCompilerBase_1 = require("./RushStackCompilerBase");
var EslintSeverity;
(function (EslintSeverity) {
    EslintSeverity[EslintSeverity["Off"] = 0] = "Off";
    EslintSeverity[EslintSeverity["Warn"] = 1] = "Warn";
    EslintSeverity[EslintSeverity["Error"] = 2] = "Error";
})(EslintSeverity || (EslintSeverity = {}));
class EslintRunner extends RushStackCompilerBase_1.RushStackCompilerBase {
    constructor(taskOptions, rootPath, terminalProvider) {
        super(taskOptions, rootPath, terminalProvider);
        this._cmdRunner = new CmdRunner_1.CmdRunner(this._standardBuildFolders, this._terminal, {
            packagePath: ToolPaths_1.ToolPaths.eslintPackagePath,
            packageJson: ToolPaths_1.ToolPaths.eslintPackageJson,
            packageBinPath: path.join('bin', 'eslint.js')
        });
    }
    invoke() {
        const args = ['--format', 'json', 'src/**/*.{ts,tsx}'];
        const stdoutBuffer = [];
        return this._cmdRunner.runCmdAsync({
            args: args,
            // ESLint errors are logged to stdout
            onError: (data) => {
                this._terminal.writeErrorLine(`Unexpected STDERR output from ESLint: ${data.toString()}`);
            },
            onData: (data) => {
                stdoutBuffer.push(data.toString());
            },
            onClose: (code, hasErrors, resolve, reject) => {
                const dataStr = stdoutBuffer.join('');
                try {
                    const eslintFileResults = JSON.parse(dataStr);
                    const eslintErrorLogFn = this._taskOptions.displayAsError
                        ? this._taskOptions.fileError
                        : this._taskOptions.fileWarning;
                    for (const eslintFileResult of eslintFileResults) {
                        const pathFromRoot = path.relative(this._standardBuildFolders.projectFolderPath, eslintFileResult.filePath);
                        for (const message of eslintFileResult.messages) {
                            eslintErrorLogFn(pathFromRoot, message.line, message.column, message.ruleId, message.message);
                        }
                    }
                }
                catch (e) {
                    // If we fail to parse the JSON, it's likely ESLint encountered an error parsing the config file,
                    // or it experienced an inner error. In this case, log the output as an error regardless of the
                    // displayAsError value
                    this._terminal.writeErrorLine(dataStr);
                }
                if (this._taskOptions.displayAsError && (code !== 0 || hasErrors)) {
                    reject(new Error(`exited with code ${code}`));
                }
                else {
                    resolve(code);
                }
            }
        });
    }
}
exports.EslintRunner = EslintRunner;
//# sourceMappingURL=EslintRunner.js.map