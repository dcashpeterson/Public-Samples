{"version":3,"file":"SassTask.js","sourceRoot":"","sources":["../src/SassTask.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport * as Gulp from 'gulp';\r\nimport { EOL } from 'os';\r\n\r\nimport { GulpTask } from '@microsoft/gulp-core-build';\r\nimport { splitStyles } from '@microsoft/load-themed-styles';\r\nimport { FileSystem, JsonFile, LegacyAdapters, JsonObject } from '@rushstack/node-core-library';\r\nimport * as glob from 'glob';\r\nimport * as sass from 'sass';\r\nimport * as postcss from 'postcss';\r\nimport * as CleanCss from 'clean-css';\r\nimport * as autoprefixer from 'autoprefixer';\r\nimport CSSModules, { ICSSModules, IClassMap } from './CSSModules';\r\n\r\nexport interface ISassTaskConfig {\r\n  /**\r\n   * An optional parameter for text to include in the generated TypeScript file.\r\n   */\r\n  preamble?: string;\r\n\r\n  /**\r\n   * An optional parameter for text to include at the end of the generated\r\n   * TypeScript file.\r\n   */\r\n  postamble?: string;\r\n\r\n  /**\r\n   * An array of glob patterns for locating files.\r\n   */\r\n  sassMatch?: string[];\r\n\r\n  /**\r\n   * If this option is specified, ALL files will be treated as module.sass or\r\n   * module.scss and will automatically generate a corresponding TypeScript\r\n   * file. All classes will be appended with a hash to help ensure uniqueness\r\n   * on a page. This file can be imported directly, and will contain an object\r\n   * describing the mangled class names.\r\n   */\r\n  useCSSModules?: boolean;\r\n\r\n  /**\r\n   * If false, we will set the CSS property naming warning to verbose message\r\n   * while the module generates to prevent task exit with exitcode: 1.\r\n   * Default value is true.\r\n   */\r\n  warnOnCssInvalidPropertyName?: boolean;\r\n\r\n  /**\r\n   * If true, we will generate CSS in the lib folder. If false, the CSS is\r\n   * directly embedded into the TypeScript file.\r\n   */\r\n  dropCssFiles?: boolean;\r\n\r\n  /**\r\n   * If files are matched by sassMatch which do not end in .module.sass or\r\n   * .module.scss, log a warning.\r\n   */\r\n  warnOnNonCSSModules?: boolean;\r\n\r\n  /**\r\n   * If this option is specified, module CSS will be exported using the name\r\n   * provided. If an empty value is specified, the styles will be exported\r\n   * using 'export =', rather than a named export. By default, we use the\r\n   * 'default' export name.\r\n   */\r\n  moduleExportName?: string;\r\n\r\n  /**\r\n   * Allows the override of the options passed to clean-css. Options such a\r\n   * returnPromise and sourceMap will be ignored.\r\n   */\r\n  cleanCssOptions?: CleanCss.Options;\r\n\r\n  /**\r\n   * Allows the override of the options passed to autoprefixer.\r\n   */\r\n  autoprefixerOptions?: autoprefixer.Options;\r\n\r\n  /**\r\n   * Allows the override of generateScopedName function in CSSModule.\r\n   */\r\n  generateScopedName?: (name: string, fileName: string, css: string) => string;\r\n\r\n  /**\r\n   * Silence compiler warnings from dependencies\r\n   */\r\n  quietDeps?: boolean;\r\n}\r\n\r\nexport class SassTask extends GulpTask<ISassTaskConfig> {\r\n  public cleanMatch: string[] = ['src/**/*.sass.ts', 'src/**/*.scss.ts'];\r\n\r\n  private get _postCSSPlugins(): postcss.AcceptedPlugin[] {\r\n    return [autoprefixer(this.taskConfig.autoprefixerOptions) as postcss.Transformer];\r\n  }\r\n\r\n  public constructor() {\r\n    super('sass', {\r\n      preamble: '/* tslint:disable */',\r\n      postamble: '/* tslint:enable */',\r\n      sassMatch: ['src/**/*.scss', 'src/**/*.sass'],\r\n      useCSSModules: false,\r\n      warnOnCssInvalidPropertyName: true,\r\n      dropCssFiles: false,\r\n      warnOnNonCSSModules: false,\r\n      autoprefixerOptions: { overrideBrowserslist: ['> 1%', 'last 2 versions', 'ie >= 10'] },\r\n      quietDeps: false\r\n    });\r\n  }\r\n\r\n  public loadSchema(): JsonObject {\r\n    return JsonFile.load(path.join(__dirname, 'sass.schema.json'));\r\n  }\r\n\r\n  public executeTask(gulp: typeof Gulp): Promise<void> | undefined {\r\n    if (!this.taskConfig.sassMatch) {\r\n      return Promise.reject(new Error('taskConfig.sassMatch must be defined'));\r\n    }\r\n\r\n    return this._globAll(...this.taskConfig.sassMatch)\r\n      .then((matches: string[]) => {\r\n        return Promise.all(matches.map((match) => this._processFile(match)));\r\n      })\r\n      .then(() => {\r\n        /* collapse void[] to void */\r\n      });\r\n  }\r\n\r\n  private _processFile(filePath: string): Promise<void> {\r\n    // Ignore files that start with underscores\r\n    if (path.basename(filePath).match(/^\\_/)) {\r\n      return Promise.resolve();\r\n    }\r\n\r\n    const isFileModuleCss: boolean = !!filePath.match(/\\.module\\.s(a|c)ss/);\r\n    const processAsModuleCss: boolean = isFileModuleCss || !!this.taskConfig.useCSSModules;\r\n    const cssModules: ICSSModules = new CSSModules(\r\n      this.buildConfig.rootPath,\r\n      this.taskConfig.generateScopedName\r\n    );\r\n\r\n    if (!processAsModuleCss && this.taskConfig.warnOnNonCSSModules) {\r\n      const relativeFilePath: string = path.relative(this.buildConfig.rootPath, filePath);\r\n      this.logWarning(`${relativeFilePath}: filename should end with module.sass or module.scss`);\r\n    }\r\n\r\n    let cssOutputPath: string | undefined = undefined;\r\n    let cssOutputPathAbsolute: string | undefined = undefined;\r\n    if (this.taskConfig.dropCssFiles) {\r\n      const srcRelativePath: string = path.relative(\r\n        path.join(this.buildConfig.rootPath, this.buildConfig.srcFolder),\r\n        filePath\r\n      );\r\n      cssOutputPath = path.join(this.buildConfig.libFolder, srcRelativePath);\r\n      cssOutputPath = cssOutputPath.replace(/\\.s(c|a)ss$/, '.css');\r\n      cssOutputPathAbsolute = path.join(this.buildConfig.rootPath, cssOutputPath);\r\n    }\r\n\r\n    return LegacyAdapters.convertCallbackToPromise(sass.render, {\r\n      file: filePath,\r\n      importer: (url: string) => ({ file: this._patchSassUrl(url) }),\r\n      sourceMap: this.taskConfig.dropCssFiles,\r\n      sourceMapContents: true,\r\n      omitSourceMapUrl: true,\r\n      outFile: cssOutputPath,\r\n      quietDeps: !!this.taskConfig.quietDeps\r\n    })\r\n      .catch((error: sass.SassException) => {\r\n        this.fileError(filePath, error.line, error.column, error.name, error.message);\r\n        throw new Error(error.message);\r\n      })\r\n      .then((result: sass.Result) => {\r\n        const options: postcss.ProcessOptions = {\r\n          from: filePath\r\n        };\r\n        if (result.map && !this.buildConfig.production) {\r\n          options.map = {\r\n            prev: result.map.toString() // Pass the source map through to postcss\r\n          };\r\n        }\r\n\r\n        const plugins: postcss.AcceptedPlugin[] = [...this._postCSSPlugins];\r\n        if (processAsModuleCss) {\r\n          plugins.push(cssModules.getPlugin());\r\n        }\r\n        return postcss(plugins).process(result.css.toString(), options) as PromiseLike<postcss.Result>;\r\n      })\r\n      .then((result: postcss.Result) => {\r\n        let cleanCssOptions: CleanCss.Options = { level: 1, returnPromise: true };\r\n        if (this.taskConfig.cleanCssOptions) {\r\n          cleanCssOptions = { ...this.taskConfig.cleanCssOptions, returnPromise: true };\r\n        }\r\n        cleanCssOptions.sourceMap = !!result.map;\r\n\r\n        const cleanCss: CleanCss.MinifierPromise = new CleanCss(cleanCssOptions);\r\n        return cleanCss.minify(result.css.toString(), result.map ? result.map.toString() : undefined);\r\n      })\r\n      .then((result: CleanCss.Output) => {\r\n        if (cssOutputPathAbsolute) {\r\n          const generatedFileLines: string[] = [result.styles.toString()];\r\n          if (result.sourceMap && !this.buildConfig.production) {\r\n            const encodedSourceMap: string = Buffer.from(result.sourceMap.toString()).toString('base64');\r\n            generatedFileLines.push(\r\n              `/*# sourceMappingURL=data:application/json;base64,${encodedSourceMap} */`\r\n            );\r\n          }\r\n\r\n          FileSystem.writeFile(cssOutputPathAbsolute, generatedFileLines.join(EOL), {\r\n            ensureFolderExists: true\r\n          });\r\n        }\r\n\r\n        const scssTsOutputPath: string = `${filePath}.ts`;\r\n        const classMap: IClassMap = cssModules.getClassMap();\r\n        const stylesExportString: string = this._getStylesExportString(classMap);\r\n        const content: string | undefined = result.styles;\r\n\r\n        let lines: string[] = [];\r\n        lines.push(this.taskConfig.preamble || '');\r\n\r\n        if (cssOutputPathAbsolute) {\r\n          lines = lines.concat([\r\n            `require(${JSON.stringify(`./${path.basename(cssOutputPathAbsolute)}`)});`,\r\n            stylesExportString\r\n          ]);\r\n        } else if (content) {\r\n          lines = lines.concat([\r\n            \"import { loadStyles } from '@microsoft/load-themed-styles';\",\r\n            '',\r\n            stylesExportString,\r\n            '',\r\n            `loadStyles(${JSON.stringify(splitStyles(content))});`\r\n          ]);\r\n        }\r\n\r\n        lines.push(this.taskConfig.postamble || '');\r\n\r\n        const generatedTsFile: string = lines\r\n          .join(EOL)\r\n          .replace(new RegExp(`(${EOL}){3,}`, 'g'), `${EOL}${EOL}`)\r\n          .replace(new RegExp(`(${EOL})+$`, 'm'), EOL);\r\n\r\n        FileSystem.writeFile(scssTsOutputPath, generatedTsFile);\r\n      });\r\n  }\r\n\r\n  private _globAll(...patterns: string[]): Promise<string[]> {\r\n    return Promise.all(\r\n      patterns.map((pattern) =>\r\n        LegacyAdapters.convertCallbackToPromise(\r\n          glob,\r\n          path.isAbsolute(pattern) ? pattern : path.join(this.buildConfig.rootPath, pattern)\r\n        )\r\n      )\r\n    ).then((matchSets: string[][]) => {\r\n      const result: { [path: string]: boolean } = {};\r\n      for (const matchSet of matchSets) {\r\n        for (const match of matchSet) {\r\n          const normalizedMatch: string = path.resolve(match);\r\n          result[normalizedMatch] = true;\r\n        }\r\n      }\r\n\r\n      return Object.keys(result);\r\n    });\r\n  }\r\n\r\n  private _patchSassUrl(url: string): string {\r\n    if (url[0] === '~') {\r\n      url = 'node_modules/' + url.substr(1);\r\n    } else if (url === 'stdin') {\r\n      url = '';\r\n    }\r\n\r\n    return url;\r\n  }\r\n\r\n  private _getStylesExportString(classMap: IClassMap): string {\r\n    const classKeys: string[] = Object.keys(classMap);\r\n    const styleLines: string[] = [];\r\n    classKeys.forEach((key: string) => {\r\n      const value: string = classMap[key];\r\n      if (key.indexOf('-') !== -1) {\r\n        const message: string = `The local CSS class '${key}' is not camelCase and will not be type-safe.`;\r\n        if (this.taskConfig.warnOnCssInvalidPropertyName) {\r\n          this.logWarning(message);\r\n        } else {\r\n          this.logVerbose(message);\r\n        }\r\n        key = `'${key}'`;\r\n      }\r\n      styleLines.push(`  ${key}: '${value}'`);\r\n    });\r\n\r\n    let exportString: string = 'export default styles;';\r\n\r\n    if (this.taskConfig.moduleExportName === '') {\r\n      exportString = 'export = styles;';\r\n    } else if (this.taskConfig.moduleExportName) {\r\n      // exportString = `export const ${this.taskConfig.moduleExportName} = styles;`;\r\n    }\r\n\r\n    return ['const styles = {', styleLines.join(`,${EOL}`), '};', '', exportString].join(EOL);\r\n  }\r\n}\r\n"]}