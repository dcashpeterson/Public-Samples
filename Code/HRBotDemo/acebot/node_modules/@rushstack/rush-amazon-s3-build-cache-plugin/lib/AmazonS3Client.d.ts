/// <reference types="node" />
import { type ITerminal } from '@rushstack/node-core-library';
import type { IAmazonS3BuildCacheProviderOptionsAdvanced } from './AmazonS3BuildCacheProvider';
import type { WebClient } from './WebClient';
import { type IAmazonS3Credentials } from './AmazonS3Credentials';
/**
 * A helper for reading and updating objects on Amazon S3
 *
 * @public
 */
export declare class AmazonS3Client {
    private readonly _credentials;
    private readonly _s3Endpoint;
    private readonly _s3Region;
    private readonly _webClient;
    private readonly _terminal;
    constructor(credentials: IAmazonS3Credentials | undefined, options: IAmazonS3BuildCacheProviderOptionsAdvanced, webClient: WebClient, terminal: ITerminal);
    static UriEncode(input: string): string;
    static tryDeserializeCredentials(credentialString: string | undefined): IAmazonS3Credentials | undefined;
    getObjectAsync(objectName: string): Promise<Buffer | undefined>;
    uploadObjectAsync(objectName: string, objectBuffer: Buffer): Promise<void>;
    private _writeDebugLine;
    private _writeWarningLine;
    private _makeRequestAsync;
    _getSha256Hmac(key: string | Buffer, data: string): Buffer;
    _getSha256Hmac(key: string | Buffer, data: string, encoding: 'hex'): string;
    private _getSha256;
    private _getIsoDateString;
    private _safeReadResponseText;
    private _getS3ErrorAsync;
    /**
     * Validates a S3 endpoint which is http(s):// + hostname + port. Hostname validated according to RFC 1123
     * {@link https://docs.aws.amazon.com/general/latest/gr/s3.html}
     */
    private _validateEndpoint;
    private _sendCacheRequestWithRetries;
}
//# sourceMappingURL=AmazonS3Client.d.ts.map