/**
 * SharePoint Framwork Adaptive Card Extensions
 *
 * @remarks This package defines the APIs for creating SPFx Adaptive Card Extensions.
 * Adaptive Card Extensions are lightweight data focused components, which utilize
 * Adaptive Cards to deliver rich, native experiences.
 *
 * @packagedocumentation
 */

/// <reference types="react" />

import type { Action } from 'adaptivecards';
import type { ActionStyle } from 'adaptivecards/lib/schema';
import { BaseComponent } from '@microsoft/sp-component-base';
import { BaseComponentContext } from '@microsoft/sp-component-base';
import { DisplayMode } from '@microsoft/sp-core-library';
import type { IAction } from 'adaptivecards/lib/schema';
import type { IAdaptiveCard } from 'adaptivecards/lib/schema';
import type { IColumnSet } from 'adaptivecards/lib/schema';
import type { IComponentPropertyMetadata } from '@microsoft/sp-component-base';
import type { IContainer } from 'adaptivecards/lib/schema';
import type { IFactSet } from 'adaptivecards/lib/schema';
import type { IImage } from 'adaptivecards/lib/schema';
import type { IImageSet } from 'adaptivecards/lib/schema';
import type { IOpenUrlAction } from 'adaptivecards/lib/schema';
import type { IPropertyPaneAccessor } from '@microsoft/sp-webpart-base';
import type { IPropertyPaneConfiguration } from '@microsoft/sp-property-pane';
import type { IPropertyPaneGroup } from '@microsoft/sp-property-pane';
import type { ISerializedServerProcessedData } from '@microsoft/sp-component-base';
import type { IShowCardAction } from 'adaptivecards/lib/schema';
import type { ISubmitAction } from 'adaptivecards/lib/schema';
import type { ITextBlock } from 'adaptivecards/lib/schema';
import type * as microsoftTeams from '@microsoft/teams-js-v2';
import { PageContext } from '@microsoft/sp-page-context';
import { ServiceKey } from '@microsoft/sp-core-library';
import { ServiceScope } from '@microsoft/sp-core-library';
import { Version } from '@microsoft/sp-core-library';

/* Excluded from this release type: _ACEMySiteCacheManager */

/* Excluded from this release type: _AdaptiveCardExtensionActionShim */

/**
 * Adaptive Card Extension context object.
 *
 * @public
 */
export declare class AdaptiveCardExtensionContext extends BaseComponentContext {
    /**
     * See {@link @microsoft/sp-component-base#BaseComponentContext.manifest}
     */
    readonly manifest: IAdaptiveCardExtensionManifest<unknown>;
    /* Excluded from this release type: _getPositionOnPage */
    private _aceHost;
    private _deviceContext;
    private _location;
    private _logACEEditCustomerPromiseFailure;
    private _hostContext?;
    private _sdks;
    /* Excluded from this release type: __constructor */
    /* Excluded from this release type: _host */
    /**
     * See {@link @microsoft/sp-webpart-base#IPropertyPaneAccessor }
     */
    get propertyPane(): IPropertyPaneAccessor | undefined;
    get deviceContext(): DeviceContext;
    /* Excluded from this release type: hostContext */
    /**
     * @public
     *
     * Provides a sdk that gets current context of device. See {@link IPartialSDKs}
     */
    get sdks(): IPartialSDKs | undefined;
    /* Excluded from this release type: location */
    /* Excluded from this release type: _logEditCustomerPromiseFailure */
}

/* Excluded from this release type: _AdaptiveCardExtensionHost */

/* Excluded from this release type: _AdaptiveCardExtensionLoader */

/**
 * Base class for Adaptive Card Extensions.
 *
 * @remarks Adaptive Card Extensions must inherit from this class.
 *
 * @public
 */
export declare class BaseAdaptiveCardExtension<TProperties extends {} = {}, TState extends {} = Readonly<{}>> extends BaseComponent {
    /**
     * See {@link @microsoft/sp-component-base#BaseComponent.context}.
     */
    protected context: AdaptiveCardExtensionContext;
    private _state;
    private _cardNavigator;
    private _quickViewNavigator;
    private _cacheManager;
    private _ACRenderArgs;
    private _properties;
    private _perfTagName;
    private _isLoggedRenderPerf;
    private _appHostType;
    /**
     * @readonly
     */
    protected _title: string;
    /**
     * @readonly
     */
    protected _iconProperty: string;
    private _description;
    private _cardSize;
    private _displayMode;
    private _renderedOnce;
    private _isInitialized;
    private _renderedFromPersistedData;
    private _renderType;
    private _isVisible;
    private _urlParams;
    private _renderCompletedGuardTimer;
    private _renderCompletedPromise;
    private _renderCompletedPromiseResolver;
    private _renderCompletedPromiseRejector;
    private _lkgRenderTime;
    private _isInitializedWithLKG;
    private _cacheKey;
    private _instanceIdForLogs;
    private _dashboardUniqueId;
    private _previousQuickViewId;
    /**
     * Not over-engineering now, but we can change the type to number in future if we want to support nested beginUpdate...endUpdate.
     */
    private _isUpdating;
    constructor();
    /**
     * The {@link ViewNavigator} for the Card view.
     *
     * @readonly
     */
    get cardNavigator(): IViewNavigator<BaseCardView<TProperties, TState>>;
    /**
     * The current {@link CardSize}.
     *
     * @readonly
     */
    protected get cardSize(): CardSize;
    /**
     * The value of this property is stored in the serialized data of the Adaptive Card Extension. It can be used to
     * manage versioning of the Adaptive Card Extension.
     *
     * @remarks The default version is 1.0.
     *
     * @readonly
     */
    protected get dataVersion(): Version;
    /**
     * The description of the Adaptive Card Extension defined in the manifest.
     *
     * @readonly
     */
    protected get description(): string;
    /**
     * The current {@link @microsoft/sp-core-library#DisplayMode}.
     *
     * @readonly
     */
    get displayMode(): DisplayMode;
    /**
     * The custom, persisted properties of the Adaptive Card Extension.
     *
     * @readonly
     */
    protected get properties(): TProperties;
    /* Excluded from this release type: siteId */
    /* Excluded from this release type: itemId */
    /* Excluded from this release type: mySiteCacheEnabled */
    /**
     * {@link QuickViewNavigator} is a {@link ViewNavigator} for the Quick view.
     *
     * @readonly
     */
    get quickViewNavigator(): IQuickViewNavigator<BaseQuickView<TProperties, TState>>;
    /**
     * Indicates whether the Adaptive Card Extension was rendered from persisted data or
     * initialized from a default state.
     *
     * @readonly
     */
    protected get renderedFromPersistedData(): boolean;
    /**
     * Indicates whether the Adaptive Card Extension has initially rendered.
     *
     * @readonly
     */
    get renderedOnce(): boolean;
    /**
     * The current {@link RenderType}.
     *
     * @readonly
     */
    get renderType(): RenderType;
    /**
     * This property defines metadata for the Adaptive Card Extension property bag. The metadata can help SharePoint understand
     * the content of the properties better and perform relevant services on the data.
     *
     * @remarks See {@link IAdaptiveCardExtensionPropertiesMetadata} for more information about how to define metadata.
     *
     * @virtual
     */
    protected get propertiesMetadata(): IAdaptiveCardExtensionPropertiesMetadata | undefined;
    /* Excluded from this release type: isRenderAsync */
    /**
     * Gets the custom state of the Adaptive Card Extension.
     *
     * @remarks This property is automatically shared across registered Views.
     *
     * @remarks This property can only be initialized once, and should be done in the constructor or {@link onInit}.
     *
     * @remarks If this property is not initialized, {@link BaseAdaptiveCardExtension.setState} cannot be called.
     *
     * @remarks This property should not be directly updated. Please use {@link BaseAdaptiveCardExtension.setState} to update the state after initialization.
     *
     * @readonly
     */
    protected get state(): Readonly<TState>;
    protected set state(initialState: Readonly<TState>);
    /**
     * This value is displayed in Card and Quick view unless it is explicitly overridden by the Views.
     * It is also displayed as the Property Pane title.
     *
     * @remarks By default, this will return the title defined in the manifest.
     *
     * @virtual
     */
    get title(): string;
    /* Excluded from this release type: _aceLoadExtraData */
    /* Excluded from this release type: _cardActionEngagementExtraData */
    /**
     * The icon url used to render an icon on the Card view.
     *
     * @remarks By default, this will return the iconImageUrl defined in the manifest.
     *
     * @virtual
     */
    get iconProperty(): string;
    /**
     * Get the Property Pane configuration for this Adaptive Card Extension. If an Adaptive Card Extension
     * wants to use the Property Pane, then this method must be overriden.
     *
     * @remarks Property Pane resources can be defer loaded to reduce bundle size. See {@link BaseAdaptiveCardExtension.loadPropertyPaneResources}.
     *
     * @virtual
     */
    protected getPropertyPaneConfiguration(): IPropertyPaneConfiguration;
    /**
     * API to enable asynchronous loading of Property Pane related resources of the Adaptive Card Extension.
     *
     * @remarks No Property Pane APIs will be called before this method resolves.
     *
     * @remarks No Property Pane events will be raised until this method resolves except for `PropertyPaneConfigurationComplete`,
     * which can be used to clean up any pending resources.
     *
     * @virtual
     */
    protected loadPropertyPaneResources(): Promise<void>;
    /* Excluded from this release type: getCacheSettings */
    /* Excluded from this release type: getCachedState */
    /* Excluded from this release type: onNotificationReceived */
    /**
     * Lifecycle method called before Action is passed to {@link IAdaptiveCardExtensionActionView.onAction}.
     *
     * @param action - {@link IOnBeforeActionArguments} for the current action.
     *
     * @remarks This method is not intended to be used to cancel the action or to change the flow.
     *
     * @virtual
     * @public
     */
    onBeforeAction(action: IOnBeforeActionArguments): void;
    /* Excluded from this release type: _onBeforeAction */
    /* Excluded from this release type: _internalOnAction */
    /* Excluded from this release type: _internalOnActionError */
    /**
     * Lifecycle method called before serialization.
     *
     * @virtual
     */
    onBeforeSerialize(): void;
    /**
     * Lifecycle method called after the Adaptive Card Extension's properties have been
     * updated by a source other than the property pane (except for isolated Adaptive Card Extensions).
     *
     * @remarks For isolated Adaptive Card Extensions, this lifecycle is invoked instead
     * of `onPropertyPaneFieldChanged`.
     *
     * @param prevProperties - The Adaptive Card Extension properties before the update.
     *
     * @virtual
     */
    onAfterPropertiesUpdatedExternally(prevProperties: TProperties): void;
    /**
     * Lifecycle method called before the property bag is populated with the deserialized property object.
     *
     * @remarks
     * The default implementation is a no-op. An Adaptive Card Extension developer can override this API if the deserialized object
     * does not fully reflect the initial state of the property bag. This gives the Adaptive Card Extension developer a chance to
     * populate the property bag right after the data is deserialized to an object.
     *
     * An important scenario to use deserialize is upgrading. An upgraded Adaptive Card Extension may load the data
     * that was serialized by an older version of the Adaptive Card Extension that supported a different schema of the property bag,
     * resulting the deserialized object to be incosistent with the current schema of the property bag. The developer
     * can use `onAfterDeserialize` to check the dataVersion and fix the property bag.
     *
     * @param deserializedProperties - The object deserialized from the stored data. Note that the schema of this object
     * is not necessarily consistent with the current property bag, because the serialization could have been done by
     * an older version of the Adaptive Card Extension
     * @param dataVersion - The data version of the stored data being deserialized. You can use this value to determine
     * if the data was serialized by an older Adaptive Card Extension. Adaptive Card Extensions can define their data version
     * by overriding the dataVersion property.
     *
     * @returns The property bag of the Adaptive Card Extension
     *
     * @virtual
     */
    protected onAfterDeserialize(deserializedProperties: any, dataVersion: Version): TProperties;
    /**
     * Lifecycle method called after the {@link @microsoft/sp-core-library#DisplayMode} changed.
     *
     * @virtual
     *
     * @param oldDisplayMode - The old display mode.
     */
    protected onDisplayModeChanged(oldDisplayMode: DisplayMode): void;
    /**
     * Lifecycle method called before disposing the Adaptive Card Extension.
     *
     * @virtual
     */
    onDispose(): void;
    /**
     * Lifecycle method called during initialization.
     *
     * @remarks Asynchronous data fetches should be started during this lifecycle. Rendering can either be dependent on the result
     * or, if resolved immediately, a fetching data state can be rendered.
     *
     * @virtual
     */
    onInit(): Promise<void>;
    /* Excluded from this release type: onInit */
    /* Excluded from this release type: _initializeCardNavigator */
    /* Excluded from this release type: _initializeQuickViewNavigator */
    /**
     * Lifecycle method called when a Property Pane field is changed.
     *
     * @remarks This is invoked for reactive Property Panes.
     *
     * @param propertyPath - JSON path of the property in the property bag.
     *  In the case of custom field, if no target property is provided then a custom value is assigned,
     *  which will be in the form of `__CustomField_<key provided when the custom field is created>`.
     * @param oldValue - Old value of the property.
     *  This value could be undefined/empty in the case of custom field.
     * @param newValue - New value of the property.
     *  This value could be undefined/empty in the case of custom field.
     *
     * @virtual
     */
    protected onPropertyPaneFieldChanged(propertyPath: string, oldValue: any, newValue: any): void;
    /**
     * Lifecycle method called when the {@link RenderType} changes.
     *
     * @param oldRenderType - The previous {@link RenderType}.
     *
     * @virtual
     */
    protected onRenderTypeChanged(oldRenderType: RenderType): void;
    /**
     * The id of the initial Card view.
     *
     * @remarks A Card view with this id must be registered with {@link cardNavigator} before rendering.
     *
     * @remarks By default, this returns undefined and will render a default Card view.
     *
     * @virtual
     */
    protected renderCard(): string | undefined;
    /* Excluded from this release type: _getPreFrameworkPropertyPaneConfiguration */
    /* Excluded from this release type: _isFrameworkPropertyPaneEnabled */
    /**
     * Sets the visibility of the Adaptive Card Extension and re-render
     *
     * @remarks This method should be called after a card view has been registered.
     *          Otherwise visibility change will not be applied to the Adaptive Card.
     *
     * @readonly
     */
    get isVisible(): boolean;
    set isVisible(value: boolean);
    /* Excluded from this release type: renderCompleted */
    private _endMarkForRenderComplete;
    private _resolveRenderCompleted;
    /**
     * Update the state of the Adaptive Card Extension and re-render.
     *
     * @remarks Calling {@link BaseAdaptiveCardExtension.setState} without a new state will trigger the code path to re-render with current state.
     * However, this does not guarantee a re-render. Re-render will only occur if either state or content of view template has changed.
     *
     * @remarks {@link BaseAdaptiveCardExtension.state} must have been initialized before calling {@link BaseAdaptiveCardExtension.setState}.
     *
     * @param newState - The new state to set.
     */
    setState(newState?: Partial<TState>): void;
    /* Excluded from this release type: _internalSetState */
    /* Excluded from this release type: update */
    /* Excluded from this release type: _getRenderArguments */
    /* Excluded from this release type: _propertiesMetadata */
    /* Excluded from this release type: _getPropertyPaneConfiguration */
    /**
     * The current {@link ViewNavigator}.
     *
     * @remarks If the current {@link BaseAdaptiveCardExtension.renderType} is `Card`
     * then returns {@link BaseAdaptiveCardExtension.cardNavigator}.
     *
     * @remarks If the current {@link BaseAdaptiveCardExtension.renderType} is `QuickView`
     * then returns {@link BaseAdaptiveCardExtension.quickViewNavigator}.
     */
    get navigator(): IViewNavigator<BaseView<TProperties, TState>>;
    /* Excluded from this release type: _internalDeserialize */
    /* Excluded from this release type: _internalInitialize */
    /* Excluded from this release type: _internalSetDisplayMode */
    /* Excluded from this release type: _loadPropertyPaneResources */
    /* Excluded from this release type: _onPropertyPaneFieldChanged */
    /* Excluded from this release type: _renderCompleted */
    /* Excluded from this release type: _internalOnAfterInit */
    /* Excluded from this release type: _internalSerialize */
    /* Excluded from this release type: _setRenderType */
    /* Excluded from this release type: _updateConfigurableFields */
    /* Excluded from this release type: _logCardActionEngagement */
    /* Excluded from this release type: _logCardComponentEventEngagement */
    /* Excluded from this release type: _initializeCardView */
    /* Excluded from this release type: _initializeBaseView */
    /* Excluded from this release type: _disableReactivePropertyChanges */
    /* Excluded from this release type: _onPropertyPaneChangesApplied */
    /* Excluded from this release type: _onAfterPropertyPaneChangesApplied */
    private _getCard;
    /**
     * Returns the AdaptiveCard payload (template and data), as well as the top PageBar's configuration properties
     *
     * @param updateOnlyData - boolean
     */
    private _getQuickView;
    private _assignAndRenderHTMLQuickView;
    /**
     * Quick view navigator will modify the stack when navigating between different quick views.
     * Bind currentView argument to the function when using this method.
     */
    private _disposeHTMLQuickView;
    private _onViewInitialized;
    private _onQuickViewInitialized;
    private _navigatorCallback;
    private _closeQuickViewCallback;
    /**
     * Updates this._cardObject fields according to type given
     * If RenderType is
     * 'L1' then call getL1 will be invoked. This will be used internally to support first time render
     * 'L2' and updateOnlyData == false, then getL2Template and getL2Data will be invoked
     * 'L2' and updateOnlyData == true, then getL2Data will be invoked and the last known template will be reused
     * @param renderTypeToUpdate - RenderType
     * @param updateOnlyData - boolean
     */
    private _updateRenderArgs;
    private _updateProperty;
    /**
     * Start renderComplete guard timer.
     * If renderComplete API is not called within DEFAULT_ASYNC_RENDER_COMPLETED_TIMEOUT_TIME seconds,
     * it will automatically invoke renderComplete as a time out.
     *
     * Note: Timer guard exist because BaseClientSideWebpart have a 30 second timer guard.
     * This accounts for isolated ace scenario where it has to create the isolated domain and load the ace in it.
     *
     */
    private _startRenderCompletedGuardTimer;
    private _clearRenderCompletedGuardTimer;
    private _generateCacheKey;
    private _logInternalOnActionError;
    private _beginUpdate;
    private _endUpdate;
    private _getBaseEngagementData;
    private _logEngagement;
}

/* Excluded from this release type: _BaseAdaptiveCardExtensionCache */

/**
 * Base class for an Adaptive Card quick view.
 *
 * @remarks Views used to render the Quick view must inherit from this class.
 *
 * @public
 */
export declare abstract class BaseAdaptiveCardQuickView<TProperties = {}, TState = {}, TData = {}> extends BaseQuickView<TProperties, TState> implements IAdaptiveCardExtensionDataView<TData>, IAdaptiveCardExtensionActionView {
    /* Excluded from this release type: _viewType */
    /**
     * The data used to render the Adaptive Card.
     *
     * @virtual
     */
    get data(): TData;
    /**
     * The Adaptive Card template rendered by the view.
     *
     * @remarks The format of the template must be valid Adaptive Card JSON.
     *
     * @virtual
     */
    abstract get template(): ISPFxAdaptiveCard;
    /**
     * An optional focus element to set focus when the view is rendered for accessibility purposes.
     * @remarks If not overriden, the focus element defaulted to the first actionable element of the quick view.
     *
     * @virtual
     */
    get focusParameters(): IFocusParameters | undefined;
    /**
     * Action handler for Adaptive Card Actions.
     *
     * @param action - The {@link IActionArguments} for the current event.
     *
     * @virtual
     */
    onAction(action: IActionArguments): void;
    /* Excluded from this release type: onActionError */
}

/**
 * Base class for an Adaptive Card quick view.
 *
 * @remarks Views used to render the Quick view must inherit from this class.
 * @privateRemarks The class exists for backwards compat only
 *
 * @public
 * @deprecated use {@link BaseAdaptiveCardQuickView} instead
 */
export declare abstract class BaseAdaptiveCardView<TProperties = {}, TState = {}, TData = {}> extends BaseAdaptiveCardQuickView<TProperties, TState, TData> {
}

/**
 * Base class for a Basic Card view.
 *
 * @remarks The basic Card view displays the following:
 *  - Card title
 *  - Card icon
 *  - One primary text field
 *  - One button in the `Medium` Card size, two buttons in the `Large` Card size
 *
 * @public
 */
export declare abstract class BaseBasicCardView<TProperties = {}, TState = {}> extends BaseTemplateCardView<TProperties, TState, IBasicCardParameters> {
    /* Excluded from this release type: _templateType */
    /* Excluded from this release type: _getCardViewParameters */
    /**
     * Returns the Adaptive Card template for the {@link BaseBasicCardView}.
     *
     * @public
     * @sealed
     * @deprecated template property is deprecated for card views.
     */
    get template(): ISPFxAdaptiveCard;
}

/**
 * Primitive base class for Card views.
 *
 * @remarks No third-party Card views should inherit from this class.
 *
 * @public
 * @sealed
 */
export declare abstract class BaseCardView<TProperties = {}, TState = {}> extends BaseView<TProperties, TState> implements IAdaptiveCardExtensionActionView {
    /* Excluded from this release type: _templateType */
    /* Excluded from this release type: _getCardSize */
    /* Excluded from this release type: _getCardViewParameters */
    /**
     * See {@link BaseAdaptiveCardExtension.cardSize}.
     */
    get cardSize(): CardSize;
    /**
     * Sets visibility to false and rerenders the card.
     * See {@link BaseAdaptiveCardExtension.isVisible}.
     */
    setVisibility(isVisible: boolean): void;
    /**
     * Action to invoke when the card is selected.
     *
     * @virtual
     */
    get onCardSelection(): IQuickViewCardAction | IExternalLinkCardAction | ISelectMediaCardAction | IGetLocationCardAction | IShowLocationCardAction | IExecuteCardAction | undefined;
    /**
     * If true, this Card view will be cached and rendered at next load.
     *
     * @virtual
     */
    get isCacheEnabled(): boolean;
    /**
     * Action handler for Adaptive Card Actions.
     *
     * @param action - The {@link IActionArguments} for the current event.
     *
     * @virtual
     */
    onAction(action: IActionArguments): void;
    /* Excluded from this release type: onActionError */
}

/**
 * Base class for an component-based Card views.
 *
 * @public
 */
export declare abstract class BaseComponentsCardView<TProperties = {}, TState = {}, TParameters extends ComponentsCardViewParameters = ITextCardViewParameters> extends BaseCardView<TProperties, TState> {
    /* Excluded from this release type: _getCardViewParameters */
    /**
     * The Card view configuration.
     *
     * @remarks The property must return the full configuration of the card view, including title and actions.
     */
    abstract get cardViewParameters(): TParameters;
    private _ensureCardBarParameters;
}

/* Excluded from this release type: BaseHTMLQuickView */

/**
 * Base class for an Image Card view.
 *
 * @remarks The Image Card view displays the following:
 *  - Card title
 *  - Card icon
 *  - One image
 *  - One primary text field
 *  - Zero buttons in the `Medium` Card size, up to two buttons in `Large` Card size
 *
 * @public
 */
export declare abstract class BaseImageCardView<TProperties = {}, TState = {}> extends BaseTemplateCardView<TProperties, TState, IImageCardParameters> {
    /* Excluded from this release type: _templateType */
    /* Excluded from this release type: _getCardViewParameters */
    /**
     * Returns the Adaptive Card template for the {@link BaseImageCardView}.
     *
     * @public
     * @sealed
     *
     * @deprecated template property is deprecated for card views.
     */
    get template(): ISPFxAdaptiveCard;
}

/**
 * Base class for a Primary Text Card view.
 *
 * @remarks The Primary Text Card view displays the following:
 *  - Card Title
 *  - Card Icon
 *  - One primary text field
 *  - One description text field
 *  - One buttons in the `Medium` Card size, up to two buttons in `Large` Card size
 *
 *
 * @public
 */
export declare abstract class BasePrimaryTextCardView<TProperties = {}, TState = {}> extends BaseTemplateCardView<TProperties, TState, IPrimaryTextCardParameters> {
    /* Excluded from this release type: _templateType */
    /* Excluded from this release type: _getCardViewParameters */
    /**
     * Returns the Adaptive Card template for the {@link BasePrimaryTextCardView}.
     *
     * @public
     * @sealed
     * @deprecated template property is deprecated for card views.
     */
    get template(): ISPFxAdaptiveCard;
}

/**
 * Base class for an Adaptive Card view.
 *
 * @public
 */
export declare abstract class BaseQuickView<TProperties = {}, TState = {}> extends BaseView<TProperties, TState> {
    /* Excluded from this release type: _viewType */
    /**
     * An optional external link to be displayed in the navigation bar above the Adaptive Card.
     *
     * @remarks If this method is not overriden or returns undefined, no link will be displayed.
     *
     * @virtual
     */
    get externalLink(): IExternalLinkParameters | undefined;
    /**
     * An optional title to be displayed in the navigation bar above the Adaptive Card.
     * @remarks If not overriden, the title displayed will be {@link BaseAdaptiveCardExtension.title}
     *
     * @virtual
     */
    get title(): string;
}

/**
 * Primitive base class for template-based Card views.
 *
 * @remarks No third-party Card views should inherit from this class.
 *
 * @public
 * @sealed
 */
export declare abstract class BaseTemplateCardView<TProperties = {}, TState = {}, TData extends IBaseCardParameters = IBaseCardParameters> extends BaseCardView<TProperties, TState> implements IAdaptiveCardExtensionDataView<TData> {
    /**
     * The buttons displayed on the Card.
     *
     * @remarks Some Card view templates will restrict how many buttons can be displayed depending on
     * various factors. See the documentation for the respective base Card View class for specific details.
     *
     * @virtual
     */
    get cardButtons(): [ICardButton] | [ICardButton, ICardButton] | undefined;
    /**
     * The data used to render the Card view.
     *
     * @remarks The available data to display is dependent on the Card view template and its respective
     * base Card view class. See the documentation for the Card View class for specific details.
     */
    abstract get data(): TData;
    /**
     * The Adaptive Card template used to render the view.
     *
     * @deprecated template property is deprecated for card views.
     */
    abstract get template(): ISPFxAdaptiveCard;
    /* Excluded from this release type: _getTemplate */
    /* Excluded from this release type: _getGenericCardViewFooterConfiguration */
    /* Excluded from this release type: _getCardBarConfiguration */
}

/**
 * Base class for all views.
 *
 * @remarks No third-party views should inherit from this class.
 *
 * @public
 * @sealed
 */
export declare abstract class BaseView<TProperties = {}, TState = {}> {
    /* Excluded from this release type: _ace */
    /* Excluded from this release type: _properties */
    /* Excluded from this release type: _state */
    /* Excluded from this release type: _context */
    /**
     * See {@link BaseAdaptiveCardExtension.cardNavigator}.
     *
     * @readonly
     */
    get cardNavigator(): IViewNavigator<BaseCardView<TProperties, TState>>;
    /**
     * See {@link BaseAdaptiveCardExtension.quickViewNavigator}.
     *
     * @readonly
     */
    get quickViewNavigator(): IQuickViewNavigator<BaseQuickView<TProperties, TState>>;
    /**
     * See {@link BaseAdaptiveCardExtension.properties}.
     */
    get properties(): TProperties;
    /**
     * See {@link BaseAdaptiveCardExtension.state}.
     */
    get state(): Readonly<TState>;
    /**
     * See {@link BaseAdaptiveCardExtension.context}.
     */
    get context(): AdaptiveCardExtensionContext;
    /**
     * See {@link BaseAdaptiveCardExtension.setState}.
     */
    setState(newState?: Partial<TState>): void;
}

/**
 * Helper method to create a Basic Card View.
 * @param configuration - basic card view configuration.
 *
 * @public
 */
export declare function BasicCardView(configuration: IBasicTextCardViewConfiguration): ITextCardViewParameters;

/* Excluded from this release type: _CardActionType */

/**
 * Base component configuration.
 *
 * @remarks component configuration is the subset of component parameters that are available to a developer for customizations.
 *
 * @public
 */
export declare type CardComponentConfiguration<T extends ICardComponentParameters = ICardComponentParameters, K extends keyof T | '' = ''> = Omit<T, K>;

/**
 * List of all events supported by components.
 * @remarks For the events supported by a specific component, see type definition for that component. This type describes a union of all events supported by all components.
 *
 * @public
 */
export declare type CardComponentEventNames = 'onChange';

/**
 * Names of the components allowed in a card view.
 *
 * @public
 */
export declare type CardComponentName = 'text' | 'cardButton' | 'cardBar' | 'textInput' | 'searchBox' | 'searchFooter';

/**
 * Event names supported by the search box component.
 *
 * @public
 */
export declare type CardSearchBoxEventNames = 'onChange';

/**
 * Size of the Card view.
 *
 * @public
 */
export declare type CardSize = 'Medium' | 'Large';

/**
 * Event names supported by the text input component.
 *
 * @public
 */
export declare type CardTextInputEventNames = 'onChange';

/**
 * The actions-only footer configuration for the card view.
 *
 * @public
 */
export declare type CardViewActionsFooterConfiguration = ICardButtonConfiguration | [ICardButtonConfiguration, ICardButtonConfiguration] | undefined;

/**
 * The actions-only footer parameters for the card view.
 *
 * @public
 */
export declare type CardViewActionsFooterParameters = [ICardButtonParameters] | [ICardButtonParameters, ICardButtonParameters] | undefined;

/* Excluded from this release type: _cardViewBarConfigurationToParameters */

/* Excluded from this release type: _CardViewParts */

/**
 * Card view configuration type.
 *
 * @public
 */
export declare type ComponentsCardViewParameters = ITextCardViewParameters | ITextInputCardViewParameters | ISearchCardViewParameters;

/* Excluded from this release type: _createAction */

/**
 * `WebView` indicates the Adaptive Card Extension is rendering through a web browser equivalent.
 * `Mobile` indicates the Adaptive Card Extension is rendering natively on a mobile platform.
 *
 * @public
 */
export declare type DeviceContext = 'WebView' | 'Mobile' | 'TeamsDesktop';

/* Excluded from this release type: _footerConfigurationToFooterParameters */

/* Excluded from this release type: _generateComponentId */

/**
 * The footer configuration for the Generic card view templates.
 *
 * @remarks The Generic card view templates are Basic Card View, Primary Text Card View, and Image Card View.
 *
 * @public
 */
export declare type GenericCardViewFooterConfiguration = CardViewActionsFooterConfiguration | ICardTextInputConfiguration;

/**
 * The footer parameters for the Generic card view templates. Can contain either 0 to 2 buttons or a single text input.
 *
 * @remarks The Generic card view templates are Basic Card View, Primary Text Card View, and Image Card View.
 *
 * @public
 */
export declare type GenericCardViewFooterParameters = CardViewActionsFooterParameters | [ICardTextInputParameters];

/* Excluded from this release type: _getOnBeforeActionArguments */

/* Excluded from this release type: _getRenderArgumentsForMessaging */

/* Excluded from this release type: HostTheme */

/**
 * The object passed to {@link IAdaptiveCardExtensionActionView.onAction} when an Adaptive Card Action is executed.
 *
 * @remarks Only `Submit`, `ShowCard`, `Execute`, 'Viva.SelectMedia', and 'Viva.GetLocation'; actions are routed to the {@link IAdaptiveCardExtensionActionView.onAction} handler.
 *
 * @public
 */
export declare type IActionArguments = ISubmitActionArguments | IShowCardActionArguments | ISelectMediaActionArguments | IGetLocationActionArguments | IExecuteActionArguments;

/* Excluded from this release type: IActionError */

/**
 * The object passed to {@link IAdaptiveCardExtensionActionView.onActionError} when an error occured while executing Adaptive Card Action.
 *
 * @remarks Only `Submit`, `ShowCard`, `Execute`, 'Viva.SelectMedia', 'Viva.GetLocation' and 'Viva.ShowLocation; actions are routed to the {@link IAdaptiveCardExtensionActionView.onActionError} handler.
 *
 * @public
 */
export declare type IActionErrorArguments = IBaseActionErrorArguments | ISelectMediaActionErrorArguments | ILocationErrorArguments;

/* Excluded from this release type: _IActionShimProvider */

/* Excluded from this release type: _IAdaptiveCardExtension */

/**
 * The interface describes members for views that can handle AC actions.
 *
 * @public
 */
export declare interface IAdaptiveCardExtensionActionView extends BaseView {
    /**
     * Action handler for Adaptive Card Extension Actions.
     *
     * @param action - The {@link IActionArguments} for the current event.
     */
    onAction: (action: IActionArguments) => void;
    /* Excluded from this release type: onActionError */
}

/* Excluded from this release type: _IAdaptiveCardExtensionCache */

/* Excluded from this release type: _IAdaptiveCardExtensionCacheObject */

/* Excluded from this release type: _IAdaptiveCardExtensionContextParameters */

/* Excluded from this release type: _IAdaptiveCardExtensionData */

/**
 * The interface defines properties for view that specify configuration as data property.
 *
 * @public
 */
export declare interface IAdaptiveCardExtensionDataView<TData = {}> extends BaseView {
    /**
     * The data used to render the View.
     */
    get data(): TData | undefined;
}

/* Excluded from this release type: _IAdaptiveCardExtensionHostParameters */

/**
 * Card view icon.
 *
 * @remarks The icon can be displayed as part of the card bar as well as in buttons.
 *
 * @public
 */
export declare type IAdaptiveCardExtensionIcon = IAdaptiveCardExtensionImage;

/**
 * Properties for the image rendered in a card view.
 *
 * @remarks The image can be displayed as part of the card view itself as well as in buttons.
 *
 * @public
 */
export declare interface IAdaptiveCardExtensionImage {
    /**
     * The URL to display as image or icon.
     */
    url: string;
    /**
     * The alt text.
     */
    altText?: string;
    /* Excluded from this release type: _urlFallback */
}

/* Excluded from this release type: _IAdaptiveCardExtensionLoadContext */

/* Excluded from this release type: IAdaptiveCardExtensionManifest */

/**
 * This structure is used to define metadata for Adaptive Card Extension properties as a map of string to `IAdaptiveCardExtensionPropertiesMetadata`
 *
 * @public
 */
export declare interface IAdaptiveCardExtensionPropertiesMetadata {
    [key: string]: IAdaptiveCardExtensionPropertyMetadata;
}

/**
 * This is the structure used for map values in `IAdaptiveCardExtensionPropertiesMetadata`.
 *
 * @public
 */
export declare interface IAdaptiveCardExtensionPropertyMetadata extends IComponentPropertyMetadata {
}

/* Excluded from this release type: _IAdaptiveCardMessagingRenderArguments */

/* Excluded from this release type: _IAdaptiveCardQuickViewRenderParameters */

/* Excluded from this release type: _IAdaptiveCardRenderParameters */

/**
 * This object represents error associated with a single attachment

 * @public
 */
export declare interface IAttachmentError {
    /**
     * Error code associated with a particular attachment
     * @public
     */
    errorCode: 'FileTooLarge' | 'IncorrectFileFormat';
}

/**
 * Base object passed to {@link IAdaptiveCardExtensionActionView.onAction} when an Adaptive Card Action is executed.
 *
 * @remarks Only `Submit` and `ShowCard` actions are routed to the {@link IAdaptiveCardExtensionActionView.onAction} handler.
 *
 * @public
 */
export declare interface IBaseActionArguments {
    /**
     * The type of Adaptive Card Action.
     */
    type: 'Submit' | 'ShowCard' | 'Execute';
    /**
     * The id specified in the Adaptive Card template
     */
    id?: string;
}

/**
 * Base object passed to {@link IAdaptiveCardExtensionActionView.onActionError} when an Adaptive Card OnActionError is executed.
 *
 *  @public
 */
export declare interface IBaseActionErrorArguments {
    /* Excluded from this release type: type */
    /* Excluded from this release type: id */
    /* Excluded from this release type: error */
}

/**
 * The primitive data parameters for every Card view.
 *
 * @public
 */
export declare interface IBaseCardParameters {
    /**
     * The icon to display.
     *
     * @remarks The value is a URL to an icon.
     *
     */
    iconProperty?: string;
    /**
     * The icon alt text.
     */
    iconAltText?: string;
    /* Excluded from this release type: _iconPropertyFallback */
    /**
     * The title to display.
     *
     */
    title?: string;
}

/* Excluded from this release type: _IBaseIsolatedApplicationMessage */

/* Excluded from this release type: _IBaseIsolatedMessage */

/* Excluded from this release type: _IBaseIsolatedServiceCallbackParameters */

/* Excluded from this release type: _IBaseIsolatedServiceMessage */

/* Excluded from this release type: _IBaseQuickViewRenderParameters */

/**
 * The data parameters for {@link BaseBasicCardView}.
 *
 * @public
 */
export declare interface IBasicCardParameters extends IBaseCardParameters {
    /**
     * The primary text to display.
     */
    primaryText: string;
}

/**
 * Configuration for a Basic Card view.
 *
 * @remarks The basic Card view displays the following:
 *  - Card title
 *  - Card icon
 *  - One primary text field
 *  - One button in the `Medium` Card size, two buttons in the `Large` Card size, or text input in the footer
 *
 * @public
 */
export declare interface IBasicTextCardViewConfiguration extends Omit<ICardViewConfiguration, 'image' | 'body'> {
    /**
     * Header area components.
     */
    header: ICardTextConfiguration;
    /**
     * Footer area components.
     */
    footer: GenericCardViewFooterConfiguration;
}

/* Excluded from this release type: _IBot */

/* Excluded from this release type: ICachedLoadParameters */

/* Excluded from this release type: ICacheSettings */

/**
 * Type of handler for when a button is pressed.
 *
 * @public
 */
export declare type ICardAction = IQuickViewCardAction | IExternalLinkCardAction | ISubmitCardAction | ISelectMediaCardAction | IGetLocationCardAction | IShowLocationCardAction | IExecuteCardAction;

/**
 * Card view title area (card bar) component configuration.
 *
 * @remarks component configuration is the subset of component parameters that are available to a developer for customizations.
 *
 * @public
 */
export declare interface ICardBarConfiguration extends CardComponentConfiguration<ICardBarParameters> {
}

/**
 * Card view title area (card bar) component parameters
 *
 * @public
 */
export declare interface ICardBarParameters extends ICardComponentParameters {
    /**
     * Unique component name.
     */
    componentName: 'cardBar';
    /**
     * The icon to display.
     */
    icon?: IAdaptiveCardExtensionIcon;
    /**
     * The title to display.
     */
    title?: string;
}

/**
 * A button to display on a Card View.
 *
 * @public
 */
export declare interface ICardButton {
    /**
     * Text displayed on the button.
     */
    title: string;
    /**
     * The type of the button.
     */
    action: ICardAction;
    /**
     * Controls the style of the button.
     *
     * @remarks The destructive Action style is not supported in Card views
     */
    style?: ActionStyle;
    /**
     * Unique Id of the button.
     */
    id?: string;
}

/**
 * Base properties for the buttons used in different ACE card view components, such as Text Input and Search Box and Card Button.
 *
 * @public
 */
export declare interface ICardButtonBase {
    /**
     * The type of the button.
     */
    action: ICardAction;
    /**
     * Unique Id of the button.
     *
     */
    id?: string;
}

/**
 * Card button component configuration.
 *
 * @remarks component configuration is the subset of component parameters that are available to a developer for customizations.
 *
 * @public
 */
export declare interface ICardButtonConfiguration extends CardComponentConfiguration<ICardButtonParameters> {
}

/**
 * Card button component parameters.
 *
 * @remarks Card buttons are used in the card view footer and used to invoke such actions as Submit, QuickView, etc.
 *
 * @public
 */
export declare interface ICardButtonParameters extends ICardComponentParameters, ICardButtonBase {
    /**
     * Unique component name.
     */
    componentName: 'cardButton';
    /**
     * Text displayed on the button.
     */
    title: string;
    /**
     * Controls the style of the button.
     */
    style?: 'default' | 'positive';
}

/**
 * Base card view component parameters.
 *
 * @public
 */
export declare interface ICardComponentParameters<T extends CardComponentEventNames = CardComponentEventNames> {
    /**
     * Unique component name.
     * For example, "textInput"
     */
    componentName: CardComponentName;
    /**
     * Unique Id of the component.
     *
     * @public
     *
     * @privateRemarks although it is optional, we will set the value when prepping the component for isolated scenarios.
     */
    id?: string;
    /* Excluded from this release type: _events */
}

/* Excluded from this release type: _ICardDataParameters */

/* Excluded from this release type: _ICardProperties */

/* Excluded from this release type: _ICardRenderParameters */

/**
 * Search box button properties.
 *
 * @public
 */
export declare interface ICardSearchBoxButton extends ICardButtonBase {
}

/**
 * Search box component configuration.
 *
 * @remarks component configuration is the subset of component parameters that are available to a developer for customizations.
 *
 * @public
 */
export declare interface ICardSearchBoxConfiguration extends CardComponentConfiguration<ICardSearchBoxParameters> {
}

/**
 * Search box component parameters. Represents a search box rendered in the card view.
 *
 * @public
 */
export declare interface ICardSearchBoxParameters extends ICardComponentParameters<CardSearchBoxEventNames> {
    /**
     * Unique component name.
     */
    componentName: 'searchBox';
    /**
     * Placeholder text to display.
     */
    placeholder?: string;
    /**
     * Default value to display.
     *
     * @remarks Provide this if the searchbox should be an uncontrolled component which tracks its current state internally; otherwise, use value.
     */
    defaultValue?: string;
    /**
     * Current value of the search box.
     *
     * @remarks Provide this if the search box is a controlled component where you are maintaining its current state. Use empty string as initial value if needed.
     */
    value?: string;
    /**
     * Button displayed on the search box.
     */
    button: ICardSearchBoxButton;
    /**
     * Callback function for when the search query text has changed.
     */
    onChange?: (newValue?: string) => void;
}

/**
 * Search box footer component configuration.
 *
 * @remarks component configuration is the subset of component parameters that are available to a developer for customizations.
 *
 * @public
 */
export declare interface ICardSearchFooterConfiguration extends CardComponentConfiguration<ICardSearchFooterParameters> {
}

/**
 * Search footer component parameters. Represents a container with an image (in the shape of a circle) and text.
 *
 * @public
 */
export declare interface ICardSearchFooterParameters extends ICardComponentParameters {
    /**
     * Unique component name.
     */
    componentName: 'searchFooter';
    /**
     * Title text to display.
     */
    title: string;
    /**
     * Url to the image to use, should be a square aspect ratio and big enough to fit in the image area.
     */
    imageUrl?: string;
    /**
     * The initials to display in the image area when there is no image.
     */
    imageInitials?: string;
    /**
     * Primary text to display. For example, name of the person for people search.
     */
    text: string;
    /**
     * Action to invoke when the footer is selected.
     */
    onSelection?: ICardAction;
}

/**
 * Text component configuration.
 *
 * @remarks component configuration is the subset of component parameters that are available to a developer for customizations.
 *
 * @public
 */
export declare interface ICardTextConfiguration extends CardComponentConfiguration<ICardTextParameters> {
}

/**
 * Text input component configuration.
 *
 * @remarks component configuration is the subset of component parameters that are available to a developer for customizations.
 *
 * @public
 */
export declare interface ICardTextInputConfiguration extends CardComponentConfiguration<ICardTextInputParameters> {
}

/**
 * Text input icon button.
 *
 * @public
 */
export declare interface ICardTextInputIconButton extends ICardButtonBase {
    /**
     * Properties for the icon displayed on the button.
     */
    icon: IAdaptiveCardExtensionIcon;
}

/**
 * Text input component parameters.
 *
 * @public
 */
export declare interface ICardTextInputParameters extends ICardComponentParameters<CardTextInputEventNames> {
    /**
     * Unique component name.
     */
    componentName: 'textInput';
    /**
     * Placeholder text to display.
     */
    placeholder?: string;
    /**
     * Default value to display.
     *
     * @remarks Provide this if the input should be an uncontrolled component which tracks its current state internally; otherwise, use value.
     */
    defaultValue?: string;
    /**
     * Current value of the text input.
     *
     * @remarks Provide this if the input is a controlled component where you are maintaining its current state. Use empty string as initial value if needed.
     */
    value?: string;
    /**
     * Properties for an optional icon, displayed in the left end of the text input.
     */
    iconBefore?: IAdaptiveCardExtensionIcon;
    /**
     * Properties for an optional icon, displayed in the right end of the text input.
     */
    iconAfter?: IAdaptiveCardExtensionIcon;
    /**
     * Optional button to display.
     */
    button?: ICardTextInputIconButton | ICardTextInputTitleButton;
    /**
     * Aria label for the text field.
     */
    ariaLabel?: string;
    /**
     * Text change event handler.
     */
    onChange?: (newValue?: string) => void;
}

/**
 * Text input title button.
 *
 * @public
 */
export declare interface ICardTextInputTitleButton extends ICardButtonBase {
    /**
     * Text displayed on the button.
     */
    title: string;
}

/**
 * Text component parameters. Represents a text block rendered in the card view.
 *
 * @public
 */
export declare interface ICardTextParameters extends ICardComponentParameters {
    /**
     * Unique component name.
     */
    componentName: 'text';
    /**
     * Text to display.
     */
    text: string;
}

/**
 * Card view configuration
 *
 * @remarks card view configuration is the "simplified" subset of card view parameters that are available to a developer for customizations.
 *
 * @public
 */
export declare interface ICardViewConfiguration {
    /**
     * Image displayed on the card.
     */
    image: IAdaptiveCardExtensionImage | undefined;
    /**
     * Card view title area (card bar) components.
     */
    cardBar: ICardBarConfiguration;
    /**
     * Header area components.
     */
    header: CardComponentConfiguration | CardComponentConfiguration[] | undefined;
    /**
     * Body area components.
     */
    body: CardComponentConfiguration | CardComponentConfiguration[] | undefined;
    /**
     * Footer area components.
     */
    footer: CardComponentConfiguration | CardComponentConfiguration[] | undefined;
}

/**
 * Card view configuration parameters.
 * The configuration specifies how the card view is rendered.
 *
 * @public
 */
export declare interface ICardViewParameters {
    /**
     * Card View type
     */
    cardViewType: string;
    /**
     * Image displayed on the card.
     */
    image: IAdaptiveCardExtensionImage | undefined;
    /**
     * Card view title area (card bar) components.
     */
    cardBar: [ICardBarParameters];
    /**
     * Header area components.
     */
    header: ICardComponentParameters[] | undefined;
    /**
     * Body area components.
     */
    body: ICardComponentParameters[] | undefined;
    /**
     * Footer area components.
     */
    footer: ICardComponentParameters[] | undefined;
}

/* Excluded from this release type: _IComponentContextParameters */

/* Excluded from this release type: _IComponentPosition */

/**
 * Confirmation Dialog option that is passed through `Submit` Action is executed.
 * @public
 */
export declare interface IConfirmationDialog {
    title: string;
    message: string;
}

/* Excluded from this release type: _IExecuteAction */

/**
 * The object passed to {@link IAdaptiveCardExtensionActionView.onAction} when a `Execute` Action is executed.
 * {@link https://adaptivecards.io/explorer/Action.Execute.html}
 *
 * @public
 */
export declare interface IExecuteActionArguments extends IBaseActionArguments {
    /**
     * The type of Adaptive Card Action.
     */
    type: 'Execute';
    /**
     * Verb associated with this action
     */
    verb?: string;
    /**
     * Initial data that input fields will be combined with.
     */
    data: any;
}

/**
 * Invoke an `Action.Execute` event.
 *
 * @public
 */
export declare interface IExecuteCardAction {
    /**
     * Indicates this is an Execute button.
     */
    type: 'Execute';
    /**
     * Verb associated with this action
     */
    verb?: string;
    /**
     * Parameters passed to the Execute event handler
     */
    parameters: IExecuteCardParameters;
}

/**
 * Parameters for Execute card action.
 *
 * @public
 */
export declare interface IExecuteCardParameters {
    /**
     * Key value pair property that can be defined for execute card action parameters.
     */
    [key: string]: unknown;
}

/**
 * The object passed to {@link BaseAdaptiveCardExtension.onBeforeAction} when a `ExternalLink` Action is triggered.
 *
 * @public
 */
export declare interface IExternalLinkActionArguments {
    /**
     * The type of Adaptive Card Extension Action.
     */
    type: 'ExternalLink';
    /**
     * URL to navigate to.
     */
    url: string;
}

/**
 * Open an external link.
 *
 * @public
 */
export declare interface IExternalLinkCardAction {
    /**
     * Indicates this is an external link button.
     */
    type: 'ExternalLink';
    /**
     * Parameters for the external link.
     */
    parameters: IExternalLinkParameters;
}

/**
 * Parameters for opening an external link.
 *
 * @public
 */
export declare interface IExternalLinkParameters {
    /**
     * Indicates whether this is a Teams Deep Link.
     */
    isTeamsDeepLink?: boolean;
    /**
     * The URL of the link.
     */
    target: string;
}

/**
 * Interface to give third party developers the capability to determine which element should recieve focus, when, and how often content should be read.
 *
 * @remarks `focusTarget` is ignored for the initial opening of the quick view. Any subsequent quick view changes will utilize `focusTarget`.
 *
 * @public
 */
export declare interface IFocusParameters {
    /**
     * Sets the default focus on the DOM. Developers pass in the id of a unique element that is to attain focus within a quick view.
     * If the `focusTarget` is not defined then the root element is selected.
     */
    focusTarget: string | undefined;
    /**
     * Sets the accessibility reading of the contents within the focus target.
     * Polite - Content in the target's subtree is read when the user is idle.
     * Assertive - Disrupts any announcement in favor of the changed contents within the target's subtree.
     * Off - The screen reader will not read contents within the target's subtree.
     */
    ariaLive?: 'polite' | 'assertive' | 'off';
}

/**
 * Interface for Viva Get Location action

 * @public
 */
export declare interface IGetLocationAction extends IAction {
    /**
     * Indicates this is a Viva Select Location button.
     */
    type: 'VivaAction.GetLocation';
    /**
     * Parameters that can be supplied with the Viva Get Location Action.
     */
    parameters?: IGetLocationActionParameters;
}

/**
 * The object passed to {@link IAdaptiveCardExtensionActionView.onAction} when a Get location Action is executed.

 * @public
 */
export declare interface IGetLocationActionArguments extends Omit<IBaseActionArguments, 'type'> {
    /**
     * The type of Adaptive Card Action.
     */
    type: 'VivaAction.GetLocation';
    /**
     * Coordinates of the location.
     * In case of erroneous situation, location object will be undefined.
     */
    location?: ILocation;
}

/**
 * Parameters that can be supplied with the Viva Get Location Action.

 * @public
 */
export declare interface IGetLocationActionParameters {
    /**
     * If true, allow the user to choose a location by opening a map.
     * Otherwise, get the current location.
     */
    chooseLocationOnMap?: boolean;
}

/* Excluded from this release type: IGetLocationActionProvider */

/**
 * Invoke an `VivaAction.GetLocation` event.

 * @public
 */
export declare interface IGetLocationCardAction {
    /**
     * Indicates this is a Viva Select Location button.
     */
    type: 'VivaAction.GetLocation';
    /**
     * Parameters that can be supplied with the Viva Get Location Action.
     */
    parameters?: IGetLocationActionParameters;
}

/* Excluded from this release type: IHostContext */

/* Excluded from this release type: _IHTMLQuickViewRenderParameters */

/**
 * The data parameters for {@link BaseImageCardView}.
 *
 * @public
 */
export declare interface IImageCardParameters extends IBaseCardParameters {
    /**
     * The image URL to display.
     */
    imageUrl: string;
    /* Excluded from this release type: _imageUrlFallback */
    /**
     * The primary text to display.
     */
    primaryText: string;
    /**
     * The image alt text.
     */
    imageAltText?: string;
}

/**
 * Configuration for an Image Card view.
 *
 * @remarks The Image Card view displays the following:
 *  - Card title
 *  - Card icon
 *  - One image
 *  - One primary text field
 *  - Zero buttons in the `Medium` Card size, up to two buttons in `Large` Card size
 *
 * @public
 */
export declare interface IImageCardViewConfiguration extends Omit<ICardViewConfiguration, 'body'> {
    /**
     * Image displayed on the card.
     */
    image: IAdaptiveCardExtensionImage;
    /**
     * Header area components.
     */
    header: ICardTextConfiguration;
    /**
     * Footer area components.
     */
    footer: GenericCardViewFooterConfiguration;
}

/* Excluded from this release type: _IIsoaltedLocationRequestCallbackParameters */

/* Excluded from this release type: _IIsolatedACEDataServiceMessage */

/* Excluded from this release type: _IIsolatedACELocationServiceMessage */

/* Excluded from this release type: _IIsolatedAction */

/* Excluded from this release type: _IIsolatedActionServiceMessage */

/* Excluded from this release type: _IIsolatedBotIdServiceMessage */

/* Excluded from this release type: _IIsolatedCloseQuickViewMessage */

/* Excluded from this release type: _IIsolatedErrorCallbackParameters */

/* Excluded from this release type: _IIsolatedErrorMessage */

declare interface IIsolatedFrame {
    iframe: HTMLIFrameElement;
    isReady: boolean;
    messageQueue: [string, _IBaseIsolatedServiceMessage][];
    retryCount: 0 | 1;
    frameMonitor?: _QosMonitor;
    retryMonitor?: _QosMonitor;
    tokenMonitor?: _QosMonitor;
    timeoutId?: number;
    childInstanceIds: Set<string>;
}

/* Excluded from this release type: _IIsolatedInitializeServiceMessage */

/* Excluded from this release type: _IIsolatedListener */

/* Excluded from this release type: _IIsolatedListenerEntry */

/* Excluded from this release type: _IIsolatedOboTokenRequestMessage */

/* Excluded from this release type: _IIsolatedOBOTokenServiceMessage */

/* Excluded from this release type: _IIsolatedOnBeforeAction */

/* Excluded from this release type: IIsolatedOnBeforeActionServiceMessage */

/* Excluded from this release type: _IIsolatedOpenQuickViewMessage */

/* Excluded from this release type: _IIsolatedOpenUrlActionArguments */

/* Excluded from this release type: _IIsolatedOpenUrlCallbackParameters */

/* Excluded from this release type: _IIsolatedOpenUrlMessage */

/* Excluded from this release type: _IIsolatedPropertyPaneConfigurationCallbackParameters */

/* Excluded from this release type: _IIsolatedPropertyPaneResourcesServiceMessage */

/* Excluded from this release type: _IIsolatedQuickViewActionArguments */

/* Excluded from this release type: _IIsolatedReadyMessage */

/* Excluded from this release type: _IIsolatedRenderCallbackParameters */

/* Excluded from this release type: _IIsolatedRenderCompletedCallbackParameters */

/* Excluded from this release type: _IIsolatedRenderMessage */

/* Excluded from this release type: _IIsolatedTokenRequestMessage */

/* Excluded from this release type: _IIsolatedVisibilityChangeCallbackParameters */

/* Excluded from this release type: _ILoadIsolatedAdaptiveCardExtensionParameters */

/**
 * Interface for location coordinates
 * @public
 */
export declare interface ILocation {
    /**
     * Latitude of the location.
     */
    latitude: number;
    /**
     * Longitude of the location.
     */
    longitude: number;
    /**
     * Timestamp
     */
    timestamp?: number;
    /**
     * Accuracy of the location.
     */
    accuracy?: number;
}

declare interface ILocationActionProvider {
    isBingMapOpen?: boolean;
}

/**
 * This object represents the error data that the Location action can throw.

 * @public
 */
export declare interface ILocationErrorArguments extends Omit<IBaseActionErrorArguments, 'type'> {
    /**
     * Indicates this is a Viva GetLocation or ShowLocation action.
     */
    type: 'VivaAction.GetLocation' | 'VivaAction.ShowLocation';
    /**
     * Error codes specific to the Get Location Error
     */
    error: {
        code: 'InternalError' | 'PermissionDenied';
    };
}

/* Excluded from this release type: _ILocationRequestMessage */

/**
 * Helper method to create an Image Card View.
 * @param configuration - image card view configuration.
 *
 * @public
 */
export declare function ImageCardView(configuration: IImageCardViewConfiguration): ITextCardViewParameters;

/* Excluded from this release type: _INavigationBarProperties */

/* Excluded from this release type: INotificationArguments */

/* Excluded from this release type: INotificationResponse */

/**
 * The object passed to {@link BaseAdaptiveCardExtension.onBeforeAction} when an Adaptive Card Action is executed.
 *
 * @remarks All action will be routed to {@link BaseAdaptiveCardExtension.onBeforeAction} handler after collecting data associated with the action.
 * @remarks {@link IActionArguments} will be passed to {@link IAdaptiveCardExtensionActionView.onAction} after {@link BaseAdaptiveCardExtension.onBeforeAction} is called.
 *
 * @public
 */
export declare type IOnBeforeActionArguments = IActionArguments | IQuickViewActionArguments | IExternalLinkActionArguments | IShowLocationCardAction;

/**
 * Provides access to the Teams SDK and Teams context. Only provided when the web part is loaded in Teams.
 *
 * Currently We are providing only Partial Contextual Information.
 *
 * @public
 */
export declare interface IPartialMicrosoftTeams {
    /**
     * Partial Microsoft Teams SDK.
     */
    teamsJs: IPartialTeamsJs;
}

/**
 * Conditional set of SDKs provided by SPFx dependent on the environment.
 *
 * Currently we are providing only Partial SDKs.
 * @public
 */
export declare interface IPartialSDKs {
    /**
     * Contextual information about the current Microsoft Teams tab. This object will only be defined if
     * a component is being hosted in Microsoft Teams.
     *
     * @remarks
     * For more information, please see:
     * {@link https://docs.microsoft.com/en-us/javascript/api/@microsoft/teams-js/?view=msteams-client-js-latest}
     *
     * Currently We are providing only Partial Contextual Information.
     */
    microsoftTeams?: IPartialMicrosoftTeams;
}

/**
 * Partial teams context
 *
 * @public
 */
export declare interface IPartialTeamsContext {
    /**
     * Properties about the current session for your app
     */
    app: {
        /**
         * Represents application information.
         * We will provide only theme information.
         *
         * @remarks "default" | "dark" are only supported values.
         */
        appInfo: Pick<microsoftTeams.app.AppInfo, 'theme'>;
    };
}

/**
 * Provides access to the Teams SDK and Teams context. Only provided when the web part is loaded in Teams.
 *
 * @public
 */
export declare interface IPartialTeamsJs {
    /**
     * Namespace to interact with Teams app initialization and lifecycle.
     *
     * @remarks
     * Currently we are providing only partial contextual information of Teams app.
     */
    app: {
        /**
         * Retrieves the current context the frame is running in.
         *
         * @returns Promise that will resolve with the {@link IPartialTeamsContext} object.
         */
        getContext: () => Promise<IPartialTeamsContext>;
    };
}

/**
 * The data parameters for {@link BasePrimaryTextCardView}.
 *
 * @public
 */
export declare interface IPrimaryTextCardParameters extends IBaseCardParameters {
    /**
     * The description to display.
     */
    description: string;
    /**
     * The primary text to display.
     *
     * @remarks This is a single line of bolded text. Using new line in string will not create new lines.
     */
    primaryText: string;
}

/**
 * Configuration for a Primary Text Card view.
 *
 * @remarks The Primary Text Card view displays the following:
 *  - Card Title
 *  - Card Icon
 *  - One primary text field
 *  - One description text field
 *  - One buttons in the `Medium` Card size, up to two buttons in `Large` Card size
 *
 * @public
 */
export declare interface IPrimaryTextCardViewConfiguration extends Omit<ICardViewConfiguration, 'image'> {
    /**
     * Header area components.
     */
    header: ICardTextConfiguration;
    /**
     * Body area components.
     */
    body: ICardTextConfiguration;
    /**
     * Footer area components.
     */
    footer: GenericCardViewFooterConfiguration;
}

/* Excluded from this release type: _IPropertyPaneConfigurationMessage */

/**
 * The object passed to {@link BaseAdaptiveCardExtension.onBeforeAction} when a `QuickView` Action is triggered.
 *
 * @public
 */
export declare interface IQuickViewActionArguments {
    /**
     * The type of Adaptive Card Extension Action.
     */
    type: 'QuickView';
    /**
     * Id of the Quick View to open.
     */
    viewId: string;
    /**
     * The data object containing values to be passed to the Quick View.
     *
     * @public
     */
    data?: any;
}

/**
 * Open the quick view.
 *
 * @public
 */
export declare interface IQuickViewCardAction {
    /**
     * Indicates this action opens the quick view.
     */
    type: 'QuickView';
    /**
     * Parameters for the quick view opened by this action
     */
    parameters: IQuickViewParameters;
}

/**
 * Properties describing a QuickViewNavigator
 * @public
 */
export declare interface IQuickViewNavigator<TView extends BaseQuickView> extends IViewNavigator<TView> {
    /* Excluded from this release type: close */
}

/**
 * Parameters for opening a Quick view.
 *
 * @public
 */
export declare interface IQuickViewParameters {
    /**
     * The view of the Quick view to open.
     */
    view: string;
}

/* Excluded from this release type: _IQuickViewRenderParameters */

/* Excluded from this release type: _IQuickViewSubmitData */

/* Excluded from this release type: _IRenderCompletedMessage */

/* Excluded from this release type: _IRenderIsolatedQuickViewParameters */

/**
 * Configuration for a Search Card view.
 *
 * @remarks The Search Text Card view displays the following:
 *  - Card Title
 *  - Card Icon
 *  - One primary text field
 *  - One search box
 *  - Search box footer
 *
 * @public
 */
export declare interface ISearchCardViewConfiguration extends Omit<ICardViewConfiguration, 'image'> {
    /**
     * Header area components.
     */
    header: ICardTextConfiguration;
    /**
     * Body area components.
     */
    body: ICardSearchBoxConfiguration;
    /**
     * Footer area components.
     */
    footer: ICardSearchFooterConfiguration;
}

/**
 * The parameters for the search card view.
 *
 * @remarks The Search Text Card view displays the following:
 *  - Card Title
 *  - Card Icon
 *  - One primary text field
 *  - One search box
 *  - Search box footer
 *
 * @public
 */
export declare interface ISearchCardViewParameters extends ICardViewParameters {
    /**
     * Card View type
     */
    cardViewType: 'search';
    /**
     * Header area components. Contains a single text field.
     */
    header: [ICardTextParameters];
    /**
     * Body area components. Contains a single search box.
     */
    body: [ICardSearchBoxParameters];
    /**
     * Footer area components. Contains a single search footer.
     */
    footer: [ICardSearchFooterParameters] | undefined;
}

/* Excluded from this release type: _ISelectActionTemplateAdaptiveCard */

/* Excluded from this release type: _ISelectActionTemplateContainer */

/**
 * Interface for new Viva Select Media action

 * @public
 */
export declare interface ISelectMediaAction extends IAction {
    /**
     * Indicates this is a Viva Select Location button.
     * @public
     */
    type: 'VivaAction.SelectMedia';
    /**
     * Parameters that can be provided to the ISelectMedia Action
     * @public
     */
    parameters: ISelectMediaActionParameters;
}

/**
 * The object passed to {@link IAdaptiveCardExtensionActionView.onAction} when a `SelectMedia` Action is executed.

 * @public
 */
export declare interface ISelectMediaActionArguments extends Omit<IBaseActionArguments, 'type'> {
    /**
     * The type of Adaptive Card Action.
     */
    type: 'VivaAction.SelectMedia';
    /**
     * media object returned media picker API
     * @public
     */
    media: ISelectMediaAttachment[];
    /**
     * Submit Action data that is passed to internal action handler to ensure forms do not clear.
     * @public
     */
    data: any;
}

/**
 * This object represents the data returned by the native media picker API.

 * @public
 */
export declare interface ISelectMediaActionErrorArguments extends Omit<IBaseActionErrorArguments, 'type'> {
    /**
     * The type of Adaptive Card Action.
     * @public
     */
    type: 'VivaAction.SelectMedia';
    /**
     * media object returned media picker API
     * @public
     */
    media: ISelectMediaAttachment[] | undefined;
    /**
     * Error codes specific to the Select Media Action.
     * @public
     */
    error: {
        code: 'FileSelectionFailed' | 'FilesSelectedAreIncompatible';
    };
    /**
     * Submit Action data that is passed to internal action handler to ensure forms do not clear.
     * @public
     */
    data: any;
}

/**
 * Parameters that can be supplied with the Viva Select Media Action.

 * @public
 */
export declare interface ISelectMediaActionParameters {
    /**
     * Specify the specific media type that should be selected
     */
    mediaType: MediaType;
    /**
     * Allow multiple images to be selected.
     */
    allowMultipleCapture?: boolean;
    /**
     * Max file size that can be uploaded.
     */
    maxSizePerFile?: number;
    /**
     * File formats supported for upload.
     */
    supportedFileFormats?: string[];
}

/**
 * This object represents the data returned by the native media picker API.

 * @public
 */
export declare interface ISelectMediaAttachment {
    /**
     * The names of the selected files.
     */
    fileName: string;
    /**
     * Content of the file represented as base64Strings
     */
    content: string;
    /**
     * Error associated with attachment
     */
    error?: IAttachmentError;
}

/**
 * Invoke an `VivaAction.SelectMedia` event.

 * @public
 */
export declare interface ISelectMediaCardAction {
    /**
     * Indicates this is a Viva Select Media button.
     */
    type: 'VivaAction.SelectMedia';
    /**
     * Parameters for the Select Media Action
     * @public
     */
    parameters: ISelectMediaActionParameters;
}

/* Excluded from this release type: _ISelectMediaHandleProvider */

/* Excluded from this release type: _isEnableHTMLQuickViewKSActivated */

/**
 * The object passed to {@link IAdaptiveCardExtensionActionView.onAction} when a `ShowCard` Action is executed.
 *
 * @public
 */
export declare interface IShowCardActionArguments extends IBaseActionArguments {
    /**
     * The type of Adaptive Card Action.
     */
    type: 'ShowCard';
}

/**
 * Error interface for 'VivaAction.ShowLocation' is {@link IGetLocationAction.ILocationErrorArguments}
 */
/**
 * Interface for Viva Show Location action

 * @public
 */
export declare interface IShowLocationAction extends IAction {
    /**
     * Indicates this is a Viva show Location button.
     */
    type: 'VivaAction.ShowLocation';
    /**
     * Parameters that can be supplied with the Viva Show Location Action.
     */
    parameters?: IShowLocationActionParameters;
}

/**
 * Parameters that can be supplied with the Viva Show Location Action.

 * @public
 */
export declare interface IShowLocationActionParameters {
    /**
     * If set, show the coordinates that were passed.
     * Otherwise, show the current location.
     */
    locationCoordinates?: ILocation;
}

/* Excluded from this release type: IShowLocationActionProvider */

/**
 * Invoke an `VivaAction.ShowLocation` event.

 * @public
 */
export declare interface IShowLocationCardAction {
    /**
     * Indicates this is a Viva show Location button.
     */
    type: 'VivaAction.ShowLocation';
    /**
     * Parameters that can be supplied with the Viva Show Location Action.
     */
    parameters?: IShowLocationActionParameters;
}

/* Excluded from this release type: _ISignInCardParameters */

/* Excluded from this release type: _IsolatedAdaptiveCardExtensionApplicationMessageEvent */

/* Excluded from this release type: _IsolatedAdaptiveCardExtensionService */

/* Excluded from this release type: _IsolatedAdaptiveCardExtensionServiceCallback */

/* Excluded from this release type: _IsolatedServiceCallbackParameters */

/* Excluded from this release type: _IsolatedServiceMessageEvent */

/**
 * SPFx Adaptive Card Extension schema for Adaptive Cards.
 *
 * @public
 */
export declare interface ISPFxAdaptiveCard extends Omit<IAdaptiveCard, 'actions'> {
    /**
     * Types of actions being exposed
     */
    actions?: (ISubmitAction | IOpenUrlAction | IShowCardAction | ISelectMediaAction | IGetLocationAction | IShowLocationAction)[];
}

/* Excluded from this release type: _isSupportActionExecuteKSActivated */

/* Excluded from this release type: _isSurfaceOnBeforeActionKSActivated */

/**
 * The object passed to {@link IAdaptiveCardExtensionActionView.onAction} when a `Submit` Action is executed.
 *
 * @public
 */
export declare interface ISubmitActionArguments extends IBaseActionArguments {
    /**
     * The type of Adaptive Card Action.
     */
    type: 'Submit';
    /**
     * The data object defined in the Adaptive Card template
     */
    data: any;
}

/**
 * Invoke an `Action.Submit` event.
 *
 * @public
 */
export declare interface ISubmitCardAction {
    /**
     * Indicates this is a Submit button.
     */
    type: 'Submit';
    /**
     * Parameters passed to the Submit event handler.
     */
    parameters: ISubmitCardParameters;
    /**
     * Confirmation dialog option passed to the submit handler.
     */
    confirmationDialog?: IConfirmationDialog;
}

/**
 * Parameters for submit card action.
 *
 * @public
 */
export declare interface ISubmitCardParameters {
    /* Excluded from this release type: __MSConfirmationDialog__ */
    /**
     * Key value pair property that can be defined for submit card action parameters.
     */
    [key: string]: unknown;
}

/**
 * The parameters for the card view with text or empty body.
 *
 * @public
 */
export declare interface ITextCardViewParameters extends ICardViewParameters {
    /**
     * Card View type
     */
    cardViewType: 'text';
    /**
     * Header area components.
     */
    header: [ICardTextParameters];
    /**
     * Body area components.
     */
    body: [ICardTextParameters] | undefined;
    /**
     * Footer area components.
     */
    footer: GenericCardViewFooterParameters;
}

/**
 * Configuration for an Text Input Card View
 *
 *  * @remarks The Text Input Card view displays the following:
 *  - Card title
 *  - Card icon
 *  - One primary text field
 *  - One text input
 *  - One buttons in the `Medium` Card size, up to two buttons in `Large` Card size
 *
 * @public
 */
export declare interface ITextInputCardViewConfiguration extends Omit<ICardViewConfiguration, 'image'> {
    /**
     * Header area components.
     */
    header: ICardTextConfiguration;
    /**
     * Body area components.
     */
    body: ICardTextInputConfiguration;
    /**
     * Footer area components.
     */
    footer: CardViewActionsFooterConfiguration;
}

/**
 * The parameters for the card view with text input in the body.
 *
 * @public
 */
export declare interface ITextInputCardViewParameters extends ICardViewParameters {
    /**
     * Card View type
     */
    cardViewType: 'textInput';
    /**
     * Header area components.
     */
    header: [ICardTextParameters];
    /**
     * Body area components.
     */
    body: [ICardTextInputParameters];
    /**
     * Footer area components.
     */
    footer: CardViewActionsFooterParameters;
}

/**
 * Configuration for an Text Input Card View
 *
 *  * @remarks The Text Input Card view displays the following:
 *  - Card title
 *  - Card icon
 *  - One image
 *  - One primary text field
 *  - Zero text inputs in `Medium` Card size, one text input in `Large` Card size
 *  - Zero buttons in the `Medium` Card size, up to two buttons in `Large` Card size
 *
 * @public
 */
export declare interface ITextInputImageCardViewConfiguration extends ICardViewConfiguration {
    /**
     * Image displayed on the card.
     */
    image: IAdaptiveCardExtensionImage;
    /**
     * Header area components.
     */
    header: ICardTextConfiguration;
    /**
     * Body area components.
     */
    body: ICardTextInputConfiguration;
    /**
     * Footer area components.
     */
    footer: CardViewActionsFooterConfiguration;
}

/**
 * Properties describing a ViewNavigator
 * @public
 */
export declare interface IViewNavigator<TView extends BaseView> {
    /**
     * Current size of the View stack.
     */
    size: number;
    /* Excluded from this release type: _currentView */
    /**
     * Get the id of the currently rendered View from the top of the View stack
     * @remarks If the stack is empty, this will return undefined
     */
    currentId: string | undefined;
    /* Excluded from this release type: viewStack */
    register(id: string, initializer: () => TView | Promise<TView>): void;
    push(id: string, skipUpdate?: boolean): void;
    replace(id: string, skipUpdate?: boolean): void;
    pop(skipUpdate?: boolean): void;
    /* Excluded from this release type: _clear */
    /* Excluded from this release type: _forEach */
    /* Excluded from this release type: _getRegistrySize */
}

/* Excluded from this release type: _LocalStorageACECache */

/* Excluded from this release type: _LogEditCustomerPromiseFailure */

/**
 * Enum value to specify the type of media.

 * @public
 */
export declare enum MediaType {
    Image = 1,
    Audio = 4,
    Document = 8
}

/* Excluded from this release type: _NavigationButtonType */

/* Excluded from this release type: _prepareRenderArgumentsForMessaging */

/**
 * Helper method to create a Primary Text Card View.
 * @param configuration - primary text card view configuration.
 *
 * @public
 */
export declare function PrimaryTextCardView(configuration: IPrimaryTextCardViewConfiguration): ITextCardViewParameters;

/* Excluded from this release type: _QosMonitor */

/**
 * Manages a stack of Adaptive Card views for the Quick view.
 *
 * @remarks The top of the stack is the currently rendered view.
 *
 * @public
 */
export declare class QuickViewNavigator<TView extends BaseQuickView> extends ViewNavigator<TView> implements IQuickViewNavigator<TView> {
    private readonly _closeQuickViewCallback;
    /* Excluded from this release type: __constructor */
    /**
     * Closes the View.
     */
    close(): void;
}

/* Excluded from this release type: _QuickViewTarget */

/* Excluded from this release type: _QuickViewType */

/**
 * `Card` is the default render View. `QuickView` is a more detailed view of the Adaptive Card Extension.
 * @public
 */
export declare type RenderType = 'Card' | 'QuickView';

/**
 * Helper method to create a Search Card View.
 * @param configuration - search card view configuration.
 *
 * @public
 */
export declare function SearchCardView(configuration: ISearchCardViewConfiguration): ISearchCardViewParameters;

/* Excluded from this release type: _SelectActionType */

/* Excluded from this release type: _TemplateType */

/* Excluded from this release type: _TextBlockSubType */

/**
 * Helper method to create an Text Input Card View.
 * @param configuration - text input card view configuration.
 *
 * @public
 */
export declare function TextInputCardView(configuration: ITextInputCardViewConfiguration): ITextInputCardViewParameters;

/**
 * Helper method to create an Text Input with Image Card View.
 * @param configuration - text input with image card view configuration.
 *
 * @public
 */
export declare function TextInputImageCardView(configuration: ITextInputImageCardViewConfiguration): ITextInputCardViewParameters;

/**
 * Manages a stack of views.
 *
 * @remarks The top of the stack represents the currently rendered view.
 *
 * @public
 */
export declare class ViewNavigator<TView extends BaseView> implements IViewNavigator<TView> {
    private _viewStack;
    private _viewCache;
    private _viewRegistry;
    private readonly _handleStackChangedCallback;
    private readonly _handleInitializeCallback;
    constructor(handleStackChangedCallback: (skipUpdate: boolean) => void, handleInitializeCallback: (view: TView) => void);
    /**
     * Registers a new view.
     *
     * @remarks `initializer` must return an instance of a {@link BaseView} or a Promise of a {@link BaseView}.
     *          The promise allows developers with large quickviews to defer / chunk in the quickview code on
     *          demand
     *
     * @remarks `initializer` is not called until `id` is pushed onto the view stack.
     *
     * @remarks A View with a given `id` is only initialized once, and the instance is reused if it is pushed more than once
     *
     * @param id - Unique identifier for the view.
     * @param initializer - Function that returns a new view - or a promise to a new view - which is only called if no view with the `id` already exists.
     */
    register(id: string, initializer: () => TView | Promise<TView>): void;
    /**
     * Pushes a new view to the top of the view stack.
     *
     * {@link BaseAdaptiveCardExtension.setState}, which will also trigger a render.
     *
     * @param id - Unique identifier for the view.
     * @param skipUpdate - Whether to skip the update (and re-render) after pushing the new view.
     */
    push(id: string, skipUpdate?: boolean): void;
    /**
     * Replaces the top view with a new view.
     *
     * {@link BaseAdaptiveCardExtension.setState}, which will also trigger a render.
     *
     * @param id - Unique identifier for the view.
     * @param skipUpdate - Whether to skip the update (and re-render) after replacing the current view.
     */
    replace(id: string, skipUpdate?: boolean): void;
    /**
     * If there is more than one View, pops the top View from the View stack.
     *
     * {@link BaseAdaptiveCardExtension.setState}, which will also trigger a render.
     *
     * @param skipUpdate - Whether to skip the update (and re-render) after popping the current View.
     */
    pop(skipUpdate?: boolean): void;
    /**
     * Current size of the View stack.
     */
    get size(): number;
    /**
     * Get the id of the currently rendered View from the top of the View stack
     * @remarks If the stack is empty, this will return undefined
     */
    get currentId(): string | undefined;
    /* Excluded from this release type: _currentView */
    /* Excluded from this release type: viewStack */
    /* Excluded from this release type: _clear */
    /* Excluded from this release type: _forEach */
    /* Excluded from this release type: _getRegistrySize */
    private _push;
    private _pop;
}

/* Excluded from this release type: _ViewRegistry */

export { }
