"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OS = exports.Browser = void 0;
var tslib_1 = require("tslib");
var Version_1 = tslib_1.__importDefault(require("./Version"));
/**
 * Enum to identify browser.
 * @internal
 */
// eslint-disable-next-line @typescript-eslint/typedef
exports.Browser = {
    Other: 0,
    Chrome: 1,
    Edge: 2,
    Firefox: 3,
    IE: 4,
    Safari: 5,
    EdgeChromium: 6
};
/**
 * Enum to identify OS.
 * @internal
 */
// eslint-disable-next-line @typescript-eslint/typedef
exports.OS = {
    Other: 0,
    Android: 1,
    IOS: 2,
    Linux: 3,
    Mac: 4,
    Windows: 5,
    WindowsPhone: 6
};
/**
 * Provides with information from the browser.
 * @internal
 */
var BrowserDetection = /** @class */ (function () {
    function BrowserDetection() {
    }
    /**
     * Returns information from the browser, calculated from the user agent.
     *
     * @param userAgent - Optional. If provided, it will calculate the data from the input parameter,
     *                      instead of the user agent from the browser.
     * @returns Browser information, with browser and OS data.
     */
    BrowserDetection.getBrowserInformation = function (userAgent) {
        if (BrowserDetection._browserInformation) {
            return BrowserDetection._browserInformation;
        }
        else {
            var agent = userAgent || BrowserDetection._getUserAgent();
            BrowserDetection._browserInformation = BrowserDetection._buildBrowserInformation(agent);
            return BrowserDetection._browserInformation;
        }
    };
    BrowserDetection._getUserAgent = function () {
        return (window && window.navigator && navigator.userAgent) || '';
    };
    BrowserDetection._buildBrowserInformation = function (userAgent) {
        var agent = userAgent.toLowerCase();
        var browserInfo = {
            browser: exports.Browser.Other,
            browserVersion: undefined,
            isIpad: false,
            isMobile: false,
            os: exports.OS.Other,
            osVersion: undefined,
            userAgent: userAgent
        };
        browserInfo = BrowserDetection._fillBrowser(browserInfo, agent);
        browserInfo = BrowserDetection._fillOS(browserInfo, agent);
        return browserInfo;
    };
    BrowserDetection._fillBrowser = function (browserInfo, userAgent) {
        var browser = exports.Browser.Other;
        var browserVersion = undefined;
        // Fill the values here
        var match;
        if ((match = /msie (\d+)([\d.]*)/.exec(userAgent))) {
            // IE <= 10 has something like "MSIE 9" in the user agent.
            // This is also what newer versions do in compatibility mode.
            browser = exports.Browser.IE;
        }
        else if ((match = /trident.*rv:(\d+)([\d.]*)/.exec(userAgent))) {
            // This is IE 11. Sample user agent contains:
            // Trident/7.0; other stuff... rv:11.0
            browser = exports.Browser.IE;
        }
        else if ((match = /edge\/(\d+)([\d.]*)/.exec(userAgent))) {
            // This is Edge (it pretends to be Chrome and Safari).
            browser = exports.Browser.Edge;
        }
        else if ((match = /edg\/(\d+)([\d.]*)/.exec(userAgent))) {
            // This is Edge Chromium.
            browser = exports.Browser.EdgeChromium;
        }
        else if ((match = /(?:firefox|fxios)\/(\d+)([\d.]*)/.exec(userAgent))) {
            browser = exports.Browser.Firefox;
        }
        else if ((match = /(?:chrome|crios)\/(\d+)([\d.]*)/.exec(userAgent))) {
            // Note: lots of random browsers say they're Chrome and will end up in this bucket
            browser = exports.Browser.Chrome;
        }
        else if ((match = /safari\/(\d+)/.exec(userAgent))) {
            browser = exports.Browser.Safari;
            match = /version\/(\d+)([\d.]*)/.exec(userAgent);
        }
        // Some other browser categories:
        //   IE Mobile: /iemobile\/(\d+)/
        //   IE Mobile in desktop mode: contains WPDesktop; get version from Trident version
        //   Opera (currently goes into Chrome bucket): /opr\/(\d+)/
        // Parse the captured version number for user's browser.
        if (match) {
            var browserMajor = parseInt(match[1], 10) || 0;
            var browserMinor = '0';
            var browserMinorVersion = match[2];
            if (browserMinorVersion) {
                var minorStart = browserMinorVersion.indexOf('.');
                if (minorStart >= 0 && minorStart < browserMinorVersion.length - 1) {
                    browserMinor = browserMinorVersion.substr(minorStart + 1);
                }
            }
            browserVersion = Version_1.default.parse("".concat(browserMajor, ".").concat(browserMinor));
        }
        browserInfo.browser = browser;
        browserInfo.browserVersion = browserVersion;
        return browserInfo;
    };
    BrowserDetection._fillOS = function (browserInfo, userAgent) {
        var os = exports.OS.Other;
        var osVersion = undefined;
        // OS versions comes first as some UserAgents override the version for mismatching Windows versions (7, 8.1)
        var osVersionMatch = /[\s\(](os|os x|windows phone|windows nt|android) ([\d._]+)/.exec(userAgent);
        osVersion = osVersionMatch ? osVersionMatch[2] : undefined;
        // Parse device which gives hints about os / mobile state.
        // Windows Phone IE sometimes pretends to be Android, so explicitly check for Windows Phone first.
        // (wpdesktop is used by Windows Phone in desktop mode.)
        var deviceMatch = userAgent.match(/windows phone|wpdesktop/) || userAgent.match(/ipad|iphone|ipod|android/);
        if (deviceMatch) {
            var device = deviceMatch[0];
            browserInfo.isIpad = device === 'ipad';
            browserInfo.isMobile = true;
            if (device === 'windows phone' || device === 'wpdesktop') {
                os = exports.OS.WindowsPhone;
            }
            if (device === 'android') {
                os = exports.OS.Android;
            }
            if (device === 'ipad' || device === 'ipod' || device === 'iphone') {
                os = exports.OS.IOS;
            }
        }
        else {
            if (userAgent.indexOf('macintosh') !== -1) {
                os = exports.OS.Mac;
            }
            if (userAgent.indexOf('windows nt') !== -1) {
                os = exports.OS.Windows;
            }
            if (/(windows 8\.1|windows nt 6\.3)/.test(userAgent)) {
                os = exports.OS.Windows;
                osVersion = '8.1';
            }
            if (userAgent.indexOf('windows nt 10') !== -1) {
                os = exports.OS.Windows;
                osVersion = '10';
            }
            if (userAgent.indexOf('windows nt 6.1') !== -1) {
                os = exports.OS.Windows;
                osVersion = '7';
            }
        }
        browserInfo.os = os;
        browserInfo.osVersion = osVersion;
        return browserInfo;
    };
    /**
     * @internal
     */
    BrowserDetection._browserInformation = undefined;
    return BrowserDetection;
}());
exports.default = BrowserDetection;
//# sourceMappingURL=BrowserDetection.js.map