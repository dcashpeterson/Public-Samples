"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SPWebBuildRig = exports.serveWatchFilter = void 0;
const gulp_core_build_sass_1 = __importDefault(require("@microsoft/gulp-core-build-sass"));
const gulp_core_build_serve_1 = require("@microsoft/gulp-core-build-serve");
const gulp_core_build_1 = require("@microsoft/gulp-core-build");
const gulp_core_build_webpack_1 = require("@microsoft/gulp-core-build-webpack");
const spBuildCoreTasks = __importStar(require("@microsoft/sp-build-core-tasks"));
const ConfigureWebpackTask_1 = require("@microsoft/sp-build-core-tasks/lib/webpack/ConfigureWebpackTask");
const gulp_core_build_typescript_1 = require("@microsoft/gulp-core-build-typescript");
const WebBuildRigConstants_1 = require("./WebBuildRigConstants");
const SPBuildRig_1 = require("./SPBuildRig");
const BuildRigConstants_1 = require("./BuildRigConstants");
exports.serveWatchFilter = [
    'src/**/*.{ts,tsx,scss,resx,js,json,html}',
    '!src/**/*.{scss.ts,resx.ts}',
    'node_modules/*/*/dist/*.manifest.json'
];
class SPWebBuildRig extends SPBuildRig_1.SPBuildRig {
    constructor() {
        super(...arguments);
        this._postBundleTasks = [];
    }
    addPostBundleTask(tasks) {
        this.addTaskOrListOfTasks(tasks, this._postBundleTasks);
    }
    getYargs() {
        return super
            .getYargs()
            .option('debug', {
            describe: 'runs tests in unit mode'
        })
            .option('upgrade', {
            describe: 'upgrades outdated files in the project'
        })
            .command(WebBuildRigConstants_1.WebBuildRigConstants.tasks.bundle, 'build, localize, and bundle the project')
            .command(WebBuildRigConstants_1.WebBuildRigConstants.tasks.deployAzureStorage, 'upload the assets to a development CDN')
            .command(WebBuildRigConstants_1.WebBuildRigConstants.tasks.packageSolution, 'package the project into a SPPKG')
            .command(WebBuildRigConstants_1.WebBuildRigConstants.tasks.test, 'build, localize, and bundle the project and run tests, and verify the coverage')
            .command(WebBuildRigConstants_1.WebBuildRigConstants.tasks.testOnly, 'run the tests without running the build')
            .command(WebBuildRigConstants_1.WebBuildRigConstants.tasks.serve, 'build and bundle the project and run the development server')
            .command(WebBuildRigConstants_1.WebBuildRigConstants.tasks.trustDevCert, "generates and trusts a development certificate if one isn't already present")
            .command(WebBuildRigConstants_1.WebBuildRigConstants.tasks.untrustDevCert, 'untrusts and deletes the development certificate if it exists')
            .command('default', 'equivalent to bundle and test')
            .option('entry', {
            describe: 'Select which entries should be bundled. This can match the GUID or the alias of the entry.',
            string: true
        });
    }
    setupSharedConfig() {
        super.setupSharedConfig();
        gulp_core_build_webpack_1.webpack.taskConfig.webpack = require('webpack');
        gulp_core_build_sass_1.default.mergeConfig({
            preamble: '/* tslint:disable */',
            postamble: '/* tslint:enable */',
            sassMatch: ['src/**/*.scss', 'src/**/*.sass'],
            useCSSModules: false,
            warnOnCssInvalidPropertyName: true,
            dropCssFiles: true,
            warnOnNonCSSModules: true,
            // Cast is needed due to autoprefixer types mismatch due to workspace install in odsp-web
            autoprefixerOptions: {
                overrideBrowserslist: ['> 1%', 'ie >= 11']
            }
        });
        spBuildCoreTasks.configureWebpack.mergeConfig({
            webpack: gulp_core_build_webpack_1.webpack,
            singleLocale: this.args.locale,
            useLegacyExternals: true
        });
        gulp_core_build_1.copyStaticAssets.setConfig({
            includeExtensions: [...ConfigureWebpackTask_1.FILE_LOADER_EXTENSIONS, 'resx']
        });
        gulp_core_build_typescript_1.tscCmd.mergeConfig({
            allowBuiltinCompiler: true
        });
        gulp_core_build_typescript_1.lintCmd.mergeConfig({
            allowBuiltinCompiler: true
        });
        gulp_core_build_typescript_1.apiExtractor.mergeConfig({
            allowBuiltinCompiler: true
        });
        gulp_core_build_1.jest.mergeConfig({
            writeNUnitResults: this.args.writeNUnitResults
        });
    }
    finalizeSharedConfig() {
        super.finalizeSharedConfig();
        if (this.args.lite || this.args.notest) {
            this._disableTasks(gulp_core_build_1.jest);
        }
    }
    getTasks() {
        const result = super.getTasks();
        result.set(BuildRigConstants_1.BuildRigConstants.tasks.build, {
            executable: this.getBuildTask()
        });
        result.set(WebBuildRigConstants_1.WebBuildRigConstants.tasks.bundle, {
            executable: this.getBundleTask()
        });
        result.set(WebBuildRigConstants_1.WebBuildRigConstants.tasks.deployAzureStorage, {
            executable: spBuildCoreTasks.deployAzureStorage
        });
        result.set(WebBuildRigConstants_1.WebBuildRigConstants.tasks.packageSolution, {
            executable: spBuildCoreTasks.packageSolution
        });
        // @todo VSO #167343
        result.set(WebBuildRigConstants_1.WebBuildRigConstants.tasks.test, {
            executable: this.getTestTask(),
            arguments: (yargs) => {
                return yargs
                    .option('debug', {
                    describe: 'run tests in debug mode'
                })
                    .option('match', {
                    describe: 'regular expression. Only run tests that match',
                    string: true
                })
                    .option('notest', {
                    describe: 'run the build without running the test'
                });
            }
        });
        result.set(WebBuildRigConstants_1.WebBuildRigConstants.tasks.serve, {
            executable: (0, gulp_core_build_1.serial)(spBuildCoreTasks.serve, (0, gulp_core_build_1.watch)(exports.serveWatchFilter, (0, gulp_core_build_1.serial)(this._preTelemetryTask, result.get(WebBuildRigConstants_1.WebBuildRigConstants.tasks.bundle).executable, gulp_core_build_serve_1.reload, this._postTelemetryTask))),
            arguments: (yargs) => {
                return yargs
                    .option('port', {
                    description: 'the port to serve on should be the next argument (e.g. "--port 80")'
                })
                    .option('nobrowser', {
                    description: "don't open a browser after initial bundle"
                })
                    .option('config', {
                    description: 'use this option to specify which configuration to use in the serve.json file'
                });
            }
        });
        result.set(WebBuildRigConstants_1.WebBuildRigConstants.tasks.trustDevCert, {
            executable: gulp_core_build_serve_1.trustDevCert
        });
        result.set(WebBuildRigConstants_1.WebBuildRigConstants.tasks.untrustDevCert, {
            executable: gulp_core_build_serve_1.untrustDevCert
        });
        result.set(WebBuildRigConstants_1.WebBuildRigConstants.tasks.testOnly, {
            executable: this.getTestOnlyTask(),
            arguments: (yargs) => {
                return yargs.option('writeNUnitResults', {
                    description: 'write the jest results to an nunit test results file',
                    boolean: true
                });
            }
        });
        result.forEach((taskDefinition, name) => {
            result.set(name, {
                executable: (0, gulp_core_build_1.serial)((0, gulp_core_build_1.serial)(this._preTelemetryTask), taskDefinition.executable, (0, gulp_core_build_1.serial)(this._postTelemetryTask)),
                arguments: taskDefinition.arguments
            });
        });
        result.set(BuildRigConstants_1.BuildRigConstants.tasks.default, result.get(WebBuildRigConstants_1.WebBuildRigConstants.tasks.bundle));
        return result;
    }
    getTestTask() {
        return (0, gulp_core_build_1.serial)(this.getBundleTask(), gulp_core_build_1.jest);
    }
    getTestOnlyTask() {
        return (0, gulp_core_build_1.serial)(gulp_core_build_1.jest);
    }
    getCoreBuildTask() {
        return (0, gulp_core_build_1.parallel)((0, gulp_core_build_1.serial)(gulp_core_build_sass_1.default, super.getCoreBuildTask()), gulp_core_build_1.copyStaticAssets);
    }
    getBundleTask() {
        return (0, gulp_core_build_1.serial)(this.getBuildTask(), this.getPreWebpackTasks(), spBuildCoreTasks.configureWebpack, gulp_core_build_webpack_1.webpack, this.getPreCopyAssetsTasks(), (0, gulp_core_build_1.parallel)(this._postBundleTasks));
    }
    getPreWebpackTasks() {
        return (0, gulp_core_build_1.serial)();
    }
    getPreCopyAssetsTasks() {
        return (0, gulp_core_build_1.serial)();
    }
}
exports.SPWebBuildRig = SPWebBuildRig;
//# sourceMappingURL=SPWebBuildRig.js.map