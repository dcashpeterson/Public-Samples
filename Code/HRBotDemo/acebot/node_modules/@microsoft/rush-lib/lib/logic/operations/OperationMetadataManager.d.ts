import { type ITerminal } from '@rushstack/node-core-library';
import { OperationStateFile } from './OperationStateFile';
import type { IPhase } from '../../api/CommandLineConfiguration';
import type { RushConfigurationProject } from '../../api/RushConfigurationProject';
/**
 * @internal
 */
export interface IOperationMetadataManagerOptions {
    rushProject: RushConfigurationProject;
    phase: IPhase;
}
/**
 * @internal
 */
export interface IOperationMetaData {
    durationInSeconds: number;
    logPath: string;
    errorLogPath: string;
    cobuildContextId: string | undefined;
    cobuildRunnerId: string | undefined;
}
/**
 * A helper class for managing the meta files of a operation.
 *
 * @internal
 */
export declare class OperationMetadataManager {
    readonly stateFile: OperationStateFile;
    private _metadataFolder;
    private _logPath;
    private _errorLogPath;
    private _relativeLogPath;
    private _relativeErrorLogPath;
    constructor(options: IOperationMetadataManagerOptions);
    /**
     * Returns the relative paths of the metadata files to project folder.
     *
     * Example: `.rush/temp/operation/_phase_build/state.json`
     * Example: `.rush/temp/operation/_phase_build/all.log`
     * Example: `.rush/temp/operation/_phase_build/error.log`
     */
    get relativeFilepaths(): string[];
    saveAsync({ durationInSeconds, cobuildContextId, cobuildRunnerId, logPath, errorLogPath }: IOperationMetaData): Promise<void>;
    tryRestoreAsync({ terminal, logPath, errorLogPath }: {
        terminal: ITerminal;
        logPath: string;
        errorLogPath: string;
    }): Promise<void>;
}
//# sourceMappingURL=OperationMetadataManager.d.ts.map