"use strict";
/**
 * Creates an package's Feature.Xml
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = __importStar(require("path"));
const uuid = __importStar(require("uuid"));
const xml_1 = __importDefault(require("xml"));
const lodash_1 = require("lodash");
const node_core_library_1 = require("@rushstack/node-core-library");
const createRelationshipsXml_1 = __importDefault(require("./createRelationshipsXml"));
const createComponentXml_1 = __importDefault(require("./createComponentXml"));
const readSharepointAssets_1 = require("../utils/readSharepointAssets");
function createFeatureXml(terminal, xmlSerializationOptions, feature, resources, clientSideAssets, featureXmlFile = `feature_${feature.id}.xml`) {
    feature = (0, lodash_1.merge)({
        version: '1.0.0.0'
    }, feature);
    const featureXml = {
        filename: featureXmlFile,
        // eslint-disable-next-line @odsp-web-tools/no-null
        relationships: null,
        contents: Buffer.from((0, xml_1.default)({
            Feature: [
                {
                    _attr: {
                        xmlns: 'http://schemas.microsoft.com/sharepoint/',
                        Title: feature.title,
                        Description: feature.description,
                        Id: feature.id,
                        Version: feature.version,
                        Scope: 'Web',
                        Hidden: 'FALSE'
                    }
                }
            ]
        }, xmlSerializationOptions))
    };
    const configXml = {
        filename: `${featureXmlFile}.config.xml`,
        contents: Buffer.from((0, xml_1.default)({
            AppPartConfig: [
                {
                    _attr: {
                        xmlns: 'http://schemas.microsoft.com/sharepoint/2012/app/partconfiguration'
                    }
                },
                {
                    Id: uuid.v4()
                }
            ]
        }, xmlSerializationOptions))
    };
    const componentsXml = feature.components.map((component) => {
        return (0, createComponentXml_1.default)(xmlSerializationOptions, component, feature.id);
    });
    const clientSideResources = [];
    if (clientSideAssets && clientSideAssets.length) {
        // read each hosted asset
        // iterate through every file that was found and add a relationship
        clientSideAssets.forEach(({ originalFilename, packageFilename }) => {
            // read the file into memory
            const contents = node_core_library_1.FileSystem.readFileToBuffer(originalFilename);
            const relativeFilename = path.posix.join('ClientSideAssets', packageFilename);
            const file = {
                contents,
                filename: relativeFilename
            };
            clientSideResources.push(file);
        });
    }
    const assets = (0, readSharepointAssets_1.readSharepointAssets)(terminal, feature.assets, feature.id);
    const relationshipsXml = (0, createRelationshipsXml_1.default)(xmlSerializationOptions, featureXmlFile, [
        {
            type: 'partconfiguration',
            target: configXml.filename
        }
    ]
        .concat(componentsXml.map((component) => {
        return {
            type: 'feature-elementmanifest',
            target: component.filename
        };
    }))
        .concat(resources.localizedResourcePaths.length > 0
        ? resources.localizedResourcePaths.map((filename) => {
            return {
                type: 'content-resource',
                target: filename
            };
        })
        : [])
        .concat(resources.defaultResourcePath
        ? {
            type: 'content-defaultresource',
            target: resources.defaultResourcePath
        }
        : [])
        .concat(createAssetRelationships(assets))
        .concat(clientSideResources.map((clientSideResource) => {
        return {
            target: clientSideResource.filename,
            type: 'clientsideasset'
        };
    })));
    return {
        filename: featureXml.filename,
        contents: featureXml.contents,
        relationships: relationshipsXml,
        config: configXml,
        components: componentsXml,
        assets,
        clientSideResources
    };
}
exports.default = createFeatureXml;
function createAssetRelationships(assets) {
    let relationships = [];
    if (assets) {
        relationships = relationships.concat(createAssetRelationship('feature-elementfile', assets.elementFiles), createAssetRelationship('feature-elementmanifest', assets.elementManifests), createAssetRelationship('feature-upgradeactions', assets.upgradeActions));
    }
    return relationships;
}
function createAssetRelationship(type, files) {
    return files.map((file) => {
        return {
            type,
            target: file.filename
        };
    });
}
//# sourceMappingURL=createFeatureXml.js.map