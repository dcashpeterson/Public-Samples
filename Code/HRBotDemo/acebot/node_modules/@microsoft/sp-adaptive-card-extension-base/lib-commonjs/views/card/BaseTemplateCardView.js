"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseTemplateCardView = void 0;
var tslib_1 = require("tslib");
var sp_lodash_subset_1 = require("@microsoft/sp-lodash-subset");
var BaseCardView_1 = require("./BaseCardView");
var CardButtonComponent_1 = require("../../components/CardButtonComponent");
/**
 * Primitive base class for template-based Card views.
 *
 * @remarks No third-party Card views should inherit from this class.
 *
 * @public
 * @sealed
 */
var BaseTemplateCardView = /** @class */ (function (_super) {
    tslib_1.__extends(BaseTemplateCardView, _super);
    function BaseTemplateCardView() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(BaseTemplateCardView.prototype, "cardButtons", {
        /**
         * The buttons displayed on the Card.
         *
         * @remarks Some Card view templates will restrict how many buttons can be displayed depending on
         * various factors. See the documentation for the respective base Card View class for specific details.
         *
         * @virtual
         */
        get: function () {
            return undefined;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * @internal
     */
    BaseTemplateCardView.prototype._getTemplate = function (template, cardSelectionTemplate) {
        return (0, sp_lodash_subset_1.cloneDeep)(this.onCardSelection ? cardSelectionTemplate : template);
    };
    /**
     * Transforms cardButtons to GenericCardViewFooterConfiguration
     *
     * @internal
     */
    BaseTemplateCardView.prototype._getGenericCardViewFooterConfiguration = function () {
        var cardButtons = this.cardButtons;
        if (!cardButtons) {
            return undefined;
        }
        if (cardButtons.length === 1) {
            return (0, CardButtonComponent_1._cardButtonToConfiguration)(cardButtons[0]);
        }
        if (cardButtons.length > 2) {
            return cardButtons
                .splice(0, 2)
                .map(function (button) { return (0, CardButtonComponent_1._cardButtonToConfiguration)(button); });
        }
        else {
            return cardButtons.map(function (button) {
                return (0, CardButtonComponent_1._cardButtonToConfiguration)(button);
            });
        }
    };
    /**
     * Gets the card bar configuration based on card parameters (data)
     *
     * @internal
     */
    BaseTemplateCardView.prototype._getCardBarConfiguration = function () {
        var _a = this.data, title = _a.title, iconProperty = _a.iconProperty, iconAltText = _a.iconAltText, _iconPropertyFallback = _a._iconPropertyFallback;
        return {
            componentName: 'cardBar',
            title: title || this._ace.title,
            icon: {
                url: iconProperty || this._ace.iconProperty,
                altText: iconAltText,
                _urlFallback: _iconPropertyFallback
            }
        };
    };
    return BaseTemplateCardView;
}(BaseCardView_1.BaseCardView));
exports.BaseTemplateCardView = BaseTemplateCardView;
//# sourceMappingURL=BaseTemplateCardView.js.map