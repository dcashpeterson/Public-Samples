"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsalUtilities = void 0;
/**
 * Some static methods to be shared between MSAL.js v1 and MSAL.js v2 (msal-browser)
 *
 * @internal
 */
var MsalUtilities = /** @class */ (function () {
    function MsalUtilities() {
    }
    /**
     * This method is used by MsalTokenProvider and MsalBrowserTokenProvider to print
     * msal logs for debugging purposes. This callback is attached to the msal configuration
     * so that the logs are printed to console.
     *
     * @param logLevel - Verbosity of the logs.
     * @param message - The log message.
     * @param containsPii - True if the current log contains PII.
     */
    MsalUtilities.msalLoggerCallback = function (logLevel, message, containsPii) {
        // eslint-disable-next-line no-console
        console.log('[sp-http][msal.js]: ' + message);
    };
    /**
     * Used by MsalTokenProvider and MsalBrowserTokenProvider to determine whether or not
     * to print msal logs to the console. This method looks at the query parameter strings
     * and returns true if it finds 'msalLogging=true'
     *
     * This method will continue to return true until it is explicitly set to false
     * ('msalLogging=false') or until the session storage key is removed.
     *
     * @returns True if msal should print logs to the console. False by default.
     */
    MsalUtilities.shouldPrintMsalLogsToConsole = function () {
        var _a;
        var SESSION_STORAGE_KEY = 'spfx.msal.shouldPrintLogs';
        var QUERY_STR = 'msalLogging';
        var queryParams = new URLSearchParams(window.location.search);
        var msalLoggingQueryFlag = ((_a = queryParams.get(QUERY_STR)) === null || _a === void 0 ? void 0 : _a.toLowerCase()) || '';
        if (msalLoggingQueryFlag === 'true') {
            window.sessionStorage.setItem(SESSION_STORAGE_KEY, 'true');
        }
        else if (msalLoggingQueryFlag === 'false') {
            window.sessionStorage.removeItem(SESSION_STORAGE_KEY);
        }
        var msalLoggingStorageFlag = window.sessionStorage.getItem(SESSION_STORAGE_KEY) || '';
        var shouldPrintMsalLogs = msalLoggingQueryFlag === 'true' || msalLoggingStorageFlag === 'true';
        return shouldPrintMsalLogs;
    };
    return MsalUtilities;
}());
exports.MsalUtilities = MsalUtilities;
//# sourceMappingURL=MsalUtilities.js.map