"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.predefinedConfigurations = void 0;
var tslib_1 = require("tslib");
/**
 * Configuration for HttpClient.
 *
 * @remarks
 * The HttpClientConfiguration object provides a set of switches for enabling/disabling
 * various features of the HttpClient class.  Normally these switches are set
 * (e.g. when calling HttpClient.fetch()) by providing one of the predefined defaults
 * from HttpClientConfigurations, however switches can also be changed via the
 * HttpClientConfiguration.overrideWith() method.
 *
 * @public
 */
var HttpClientConfiguration = /** @class */ (function () {
    /**
     * Constructs a new instance of HttpClientConfiguration with the specified flags.
     * The default values will be used for any flags that are missing or undefined.
     * If overrideFlags is specified, it takes precedence over flags.
     */
    function HttpClientConfiguration(flags, overrideFlags) {
        this.flags = {};
        this.initializeFlags();
        this.flags = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, this.flags), flags), (overrideFlags || {}));
    }
    /**
     * Child classes should override this method to construct the child class type,
     * rather than the base class type.
     * @virtual
     */
    HttpClientConfiguration.prototype.overrideWith = function (sourceFlags) {
        return new HttpClientConfiguration(this.flags, sourceFlags);
    };
    /**
     * Child classes should override this method to initialize the flags object.
     * @virtual
     */
    HttpClientConfiguration.prototype.initializeFlags = function () {
        // Empty Block
    };
    return HttpClientConfiguration;
}());
exports.default = HttpClientConfiguration;
exports.predefinedConfigurations = {
    v1: new HttpClientConfiguration({})
};
//# sourceMappingURL=HttpClientConfiguration.js.map