/**
 * This package is used to manage debug certificates for development servers.
 * It is used by
 * [\@microsoft/gulp-core-build-serve](https://www.npmjs.com/package/\@microsoft/gulp-core-build-serve)
 * to generate and trust a certificate when HTTPS is turned on.
 *
 * This package provides the following utilities:
 * - `CertificateStore` to handle retrieving and saving a debug certificate.
 * - `CertificateManager` is a utility class containing the following public methods:
 * | - `ensureCertificate` will find or optionally create a debug certificate and trust it.
 * | - `untrustCertificate` will untrust a debug certificate.
 *
 * @packageDocumentation
 */

import { ITerminal } from '@rushstack/node-core-library';

/**
 * A utility class to handle generating, trusting, and untrustring a debug certificate.
 * Contains two public methods to `ensureCertificate` and `untrustCertificate`.
 * @public
 */
export declare class CertificateManager {
    private _certificateStore;
    constructor();
    /**
     * Get a development certificate from the store, or optionally, generate a new one
     * and trust it if one doesn't exist in the store.
     *
     * @public
     */
    ensureCertificateAsync(canGenerateNewCertificate: boolean, terminal: ITerminal): Promise<ICertificate>;
    /**
     * Attempt to locate a previously generated debug certificate and untrust it.
     *
     * @public
     */
    untrustCertificateAsync(terminal: ITerminal): Promise<boolean>;
    private _createDevelopmentCertificate;
    private _tryTrustCertificateAsync;
    private _detectIfCertificateIsTrustedAsync;
    private _trySetFriendlyNameAsync;
    private _ensureCertificateInternalAsync;
    private _certificateHasSubjectAltName;
    private _parseMacOsMatchingCertificateHash;
}

/**
 * Store to retrieve and save debug certificate data.
 * @public
 */
export declare class CertificateStore {
    private _userProfilePath;
    private _serveDataPath;
    private _certificatePath;
    private _keyPath;
    private _certificateData;
    private _keyData;
    constructor();
    /**
     * Path to the saved debug certificate
     */
    get certificatePath(): string;
    /**
     * Debug certificate pem file contents.
     */
    get certificateData(): string | undefined;
    set certificateData(certificate: string | undefined);
    /**
     * Key used to sign the debug pem certificate.
     */
    get keyData(): string | undefined;
    set keyData(key: string | undefined);
}

/**
 * The interface for a debug certificate instance
 *
 * @public
 */
export declare interface ICertificate {
    /**
     * Generated pem certificate contents
     */
    pemCertificate: string | undefined;
    /**
     * Private key used to sign the pem certificate
     */
    pemKey: string | undefined;
}

export { }
