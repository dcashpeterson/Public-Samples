{"version":3,"file":"no-unsafe-regexp.js","sourceRoot":"","sources":["../src/no-unsafe-regexp.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAG3D,8EAAuE;AAEvE,0DAAsD;AAEtD,mCAAmC;AACnC,yBAAyB;AACzB,EAAE;AACF,QAAQ;AACR,MAAM;AACN,+BAA+B;AAC/B,kBAAkB;AAClB,8BAA8B;AAC9B,yBAAyB;AACzB,SAAS;AACT,qBAAqB;AACrB,UAAU;AACV,6BAA6B;AAC7B,gCAAgC;AAChC,+BAA+B;AAC/B,UAAU;AACV,QAAQ;AACR,MAAM;AACN,MAAM,gBAAgB,GAAgB,IAAI,0BAAW,CAAC;IACpD,IAAI,EAAE,eAAe;IACrB,MAAM,EAAE;QACN,IAAI,EAAE,YAAY;QAClB,IAAI,EAAE,QAAQ;KACf;IACD,SAAS,EAAE,0BAAW,CAAC,GAAG,CAAC,iBAAiB,CAAC;CAC9C,CAAC,CAAC;AASH,MAAM,cAAc,GAA6C;IAC/D,IAAI,EAAE;QACJ,IAAI,EAAE,SAAS;QACf,QAAQ,EAAE;YACR,qBAAqB,EACnB,+FAA+F;gBAC/F,8FAA8F;gBAC9F,4CAA4C;SAC/C;QACD,MAAM,EAAE;YACN;gBACE,IAAI,EAAE,QAAQ;gBACd,oBAAoB,EAAE,KAAK;aAC5B;SACF;QACD,IAAI,EAAE;YACJ,WAAW,EACT,8FAA8F;gBAC9F,+BAA+B;YACjC,4DAA4D;YAC5D,QAAQ,EAAE,gBAAgB;YAC1B,WAAW,EAAE,MAAM;YACnB,GAAG,EAAE,iEAAiE;SAC1C;KAC/B;IAED,MAAM,EAAE,CAAC,OAAkD,EAAE,EAAE;QAC7D,OAAO;YACL,aAAa,EAAE,CAAC,IAA4B,EAAQ,EAAE;gBACpD,MAAM,QAAQ,GAA8B,EAAE,CAAC;gBAC/C,IAAI,gBAAgB,CAAC,KAAK,CAAC,IAAI,EAAE,QAAQ,CAAC,IAAI,QAAQ,CAAC,eAAe,EAAE;oBACtE,IACE,QAAQ,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC;wBACnC,QAAQ,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,mCAAc,CAAC,OAAO,EAC3D;wBACA,OAAO,CAAC,MAAM,CAAC;4BACb,IAAI;4BACJ,SAAS,EAAE,qBAAqB;yBACjC,CAAC,CAAC;qBACJ;iBACF;YACH,CAAC;SACF,CAAC;IACJ,CAAC;CACF,CAAC;AAEO,wCAAc","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport type { TSESLint, TSESTree } from '@typescript-eslint/experimental-utils';\r\nimport { AST_NODE_TYPES } from '@typescript-eslint/experimental-utils';\r\n\r\nimport { TreePattern } from '@rushstack/tree-pattern';\r\n\r\n// Matches an expression like this:\r\n//   new RegExp('hello');\r\n//\r\n// Tree:\r\n//   {\r\n//     \"type\": \"NewExpression\",\r\n//     \"callee\": {\r\n//       \"type\": \"Identifier\",\r\n//       \"name\": \"RegExp\"\r\n//     },\r\n//     \"arguments\": [\r\n//       {\r\n//         \"type\": \"Literal\",\r\n//         \"raw\": \"'\\\"hello\\\"'\",\r\n//         \"value\": \"\\\"hello\\\"\"\r\n//       }\r\n//     ]\r\n//   }\r\nconst newRegExpPattern: TreePattern = new TreePattern({\r\n  type: 'NewExpression',\r\n  callee: {\r\n    type: 'Identifier',\r\n    name: 'RegExp'\r\n  },\r\n  arguments: TreePattern.tag('constructorArgs')\r\n});\r\n\r\ninterface INewRegExpPatternCaptures {\r\n  constructorArgs?: TSESTree.Expression[];\r\n}\r\n\r\ntype MessageIds = 'error-unsafe-regexp';\r\ntype Options = [];\r\n\r\nconst noUnsafeRegExp: TSESLint.RuleModule<MessageIds, Options> = {\r\n  meta: {\r\n    type: 'problem',\r\n    messages: {\r\n      'error-unsafe-regexp':\r\n        'Regular expressions should be constructed from string constants. Dynamically building strings' +\r\n        ' at runtime may introduce security vulnerabilities, performance concerns, and bugs involving' +\r\n        ' incorrect escaping of special characters.'\r\n    },\r\n    schema: [\r\n      {\r\n        type: 'object',\r\n        additionalProperties: false\r\n      }\r\n    ],\r\n    docs: {\r\n      description:\r\n        'Requires regular expressions to be constructed from string constants rather than dynamically' +\r\n        ' building strings at runtime.',\r\n      // Deprecated in ESLint v8; Keep for backwards compatibility\r\n      category: 'Best Practices',\r\n      recommended: 'warn',\r\n      url: 'https://www.npmjs.com/package/@rushstack/eslint-plugin-security'\r\n    } as TSESLint.RuleMetaDataDocs\r\n  },\r\n\r\n  create: (context: TSESLint.RuleContext<MessageIds, Options>) => {\r\n    return {\r\n      NewExpression: (node: TSESTree.NewExpression): void => {\r\n        const captures: INewRegExpPatternCaptures = {};\r\n        if (newRegExpPattern.match(node, captures) && captures.constructorArgs) {\r\n          if (\r\n            captures.constructorArgs.length > 0 &&\r\n            captures.constructorArgs[0].type !== AST_NODE_TYPES.Literal\r\n          ) {\r\n            context.report({\r\n              node,\r\n              messageId: 'error-unsafe-regexp'\r\n            });\r\n          }\r\n        }\r\n      }\r\n    };\r\n  }\r\n};\r\n\r\nexport { noUnsafeRegExp };\r\n"]}