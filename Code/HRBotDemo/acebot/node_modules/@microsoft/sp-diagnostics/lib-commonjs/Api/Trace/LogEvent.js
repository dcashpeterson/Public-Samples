"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var LogSource_1 = require("../LogSource");
var LogManager_1 = tslib_1.__importDefault(require("../LogManager/LogManager"));
/**
 * An object that represents one log event.
 * @internal
 */
var LogEvent = /** @class */ (function () {
    /**
     * Do not call this constructor directly. Use LogEvent.log instead.
     */
    function LogEvent(source, data, level, serviceScope) {
        this._validate(source, data);
        this._timestamp = new Date().getTime();
        this._scope = this._getScope(serviceScope);
        this._source = source.substr(0, this._maxSourceLength);
        this._setData(data);
        this._level = level;
        this._prefix = this._getPrefix();
    }
    /**
     * Use this method to log an event.
     *
     * @param source - source of the log event, e.g. class name of the source file
     * @param data - data of the log event
     * @param level - level of the log event
     * @param serviceScope - scope of the log event, e.g. component/web part
     */
    LogEvent.log = function (source, data, level, serviceScope) {
        var event = new LogEvent(source, data, level, serviceScope);
        LogEvent.logManager.log(event);
        return event;
    };
    LogEvent.prototype.toString = function () {
        var timedPrefix = "[".concat(this._timestamp, "][").concat(this._prefix, "]");
        if (this._message) {
            return "".concat(timedPrefix, " ").concat(this._message);
        }
        else if (this._error) {
            return "".concat(timedPrefix, " ").concat(this._error.toString());
        }
        else {
            return timedPrefix;
        }
    };
    Object.defineProperty(LogEvent.prototype, "timestamp", {
        get: function () {
            return this._timestamp;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogEvent.prototype, "level", {
        get: function () {
            return this._level;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogEvent.prototype, "prefix", {
        get: function () {
            return this._prefix;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogEvent.prototype, "scope", {
        get: function () {
            return this._scope;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogEvent.prototype, "source", {
        get: function () {
            return this._source;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogEvent.prototype, "message", {
        get: function () {
            return this._message;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogEvent.prototype, "error", {
        get: function () {
            return this._error;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogEvent.prototype, "_maxSourceLength", {
        get: function () {
            return 30;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogEvent.prototype, "_maxMessageLength", {
        get: function () {
            return 150;
        },
        enumerable: false,
        configurable: true
    });
    LogEvent.prototype._validate = function (source, data) {
        if (!source) {
            throw new Error('source cannot be undefined or null for Logger');
        }
        if (!data) {
            throw new Error('data cannot be undefined or null');
        }
    };
    LogEvent.prototype._setData = function (data) {
        if (typeof data === 'string') {
            this._message = data.substr(0, this._maxMessageLength);
        }
        else if (data instanceof Error) {
            this._error = data;
        }
    };
    LogEvent.prototype._getPrefix = function () {
        var prefix = "".concat(this._source);
        if (this._scope && !this._scope.isEmpty()) {
            prefix = "".concat(this._scope.id.substr(0, this._maxSourceLength), ".").concat(prefix);
        }
        return "".concat(prefix);
    };
    LogEvent.prototype._getScope = function (serviceScope) {
        var parentSource;
        if (serviceScope) {
            serviceScope.whenFinished(function () {
                parentSource = serviceScope.consume(LogSource_1.logSourceServiceKey);
            });
        }
        return parentSource;
    };
    /**
     * Allows process log events.
     */
    LogEvent.logManager = new LogManager_1.default();
    return LogEvent;
}());
exports.default = LogEvent;
//# sourceMappingURL=LogEvent.js.map