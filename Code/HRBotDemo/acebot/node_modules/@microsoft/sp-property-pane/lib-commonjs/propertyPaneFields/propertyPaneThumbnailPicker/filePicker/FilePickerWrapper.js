"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
Object.defineProperty(exports, "__esModule", { value: true });
exports.FilePickerWrapper = void 0;
var tslib_1 = require("tslib");
var Selection_1 = require("@fluentui/react/lib/Selection");
var office_ui_fabric_react_bundle_1 = require("@ms/office-ui-fabric-react-bundle");
var sp_diagnostics_1 = require("@microsoft/sp-diagnostics");
var sp_image_helper_1 = require("@microsoft/sp-image-helper");
var lodash = tslib_1.__importStar(require("@microsoft/sp-lodash-subset"));
var sp_page_context_1 = require("@microsoft/sp-page-context");
var sp_diagnostics_2 = require("@microsoft/sp-diagnostics");
var FilePickerLoader_1 = tslib_1.__importDefault(require("./FilePickerLoader"));
var sp_file_handler_1 = require("@ms/sp-file-handler");
var FilePickerWrapperStrings_resx_1 = tslib_1.__importDefault(require("./FilePickerWrapperStrings.resx"));
var FILE_PICKER_FOLDERS_AND_FILES = 3;
var FilePickerWrapper = /** @class */ (function () {
    function FilePickerWrapper(options) {
        var _this = this;
        this._options = options;
        this._spFileHandlerPromise = Promise.resolve().then(function () { return tslib_1.__importStar(require(
        /* webpackChunkName: 'thumbnail-picker-file-handler' */ '@ms/sp-file-handler')); }).then(function (fileHandlerModule) {
            if (_this._spFileHandler === undefined) {
                _this._spFileHandler = new fileHandlerModule.SPFileHandler({
                    serviceScope: _this._options.serviceScope,
                    qosPrefix: _this._options.callerName
                });
            }
            return _this._spFileHandler;
        });
        this._options.serviceScope.whenFinished(function () {
            var pageContext = _this._options.serviceScope.consume(sp_page_context_1.PageContext.serviceKey);
            _this._webId = pageContext.web.id.toString();
            _this._siteId = pageContext.site.id.toString();
        });
    }
    FilePickerWrapper.prototype.openFilePicker = function (callbacks, sourceItemUrl) {
        lodash.merge(this._options, callbacks);
        this._sourceItemUrl = sourceItemUrl;
        this._ensureFilePickerAsync()
            .then(function (filePicker) {
            filePicker.open();
        })
            .catch(function () {
            // no-op
        });
    };
    FilePickerWrapper.prototype._ensureFilePickerAsync = function () {
        if (!this._filePicker) {
            var filePickerData = {
                selectableType: FILE_PICKER_FOLDERS_AND_FILES,
                onSelect: this._handleSelectFile,
                onCancel: this._options.onClose,
                selectionMode: this._options.isMultiSelectMode ? Selection_1.SelectionMode.multiple : Selection_1.SelectionMode.single,
                itemTypes: this._options.itemTypes,
                allowExternalTenantLinks: this._options.allowExternalTenantLinks,
                disableWebSearch: this._options.disableWebSearch,
                callerName: this._options.callerName,
                enableMailtoSchema: true
            };
            this._filePicker = FilePickerLoader_1.default.load(this._options.serviceScope, filePickerData);
        }
        return this._filePicker;
    };
    FilePickerWrapper.prototype._handleSelectFile = function (successResponse) {
        var _this = this;
        if (successResponse && successResponse.selectedItems && successResponse.selectedItems.length > 0) {
            successResponse.selectedItems.forEach(function (item) {
                if (_this._options.onSelectFile) {
                    var hasId = Boolean(item.ListId || item.UniqueId || item.WebId || item.SiteId);
                    // @todo Handle the error when item does not have the guid set.
                    var guidSet = hasId
                        ? {
                            listId: item.ListId,
                            uniqueId: item.UniqueId,
                            webId: item.WebId,
                            siteId: item.SiteId
                        }
                        : undefined;
                    _this._options.onSelectFile(item.Link, guidSet, successResponse.selectedItems.length);
                }
            });
        }
        else if (successResponse && successResponse.localFilesPickedToUpload) {
            this._itemsCount = successResponse.localFilesPickedToUpload.length;
            successResponse.localFilesPickedToUpload.forEach(function (item) {
                var file = item.file;
                _this._startUpload(file);
            });
        }
        else if (successResponse && successResponse.externalImagesPickedToUpload) {
            this._itemsCount = successResponse.externalImagesPickedToUpload.length;
            successResponse.externalImagesPickedToUpload.forEach(function (item) {
                _this._startUpload(item);
            });
        }
        else {
            sp_diagnostics_1._TraceLogger.logErrorWithLogEntry(sp_diagnostics_1._LogSource.create(this._options.callerName), new sp_diagnostics_1._LogEntry(this._options.callerName, 'HandleSelectFileFromFilePicker', sp_diagnostics_1._LogType.Error, {
                response: JSON.stringify(successResponse)
            }));
        }
    };
    FilePickerWrapper.prototype._startUpload = function (file) {
        var _this = this;
        var _a, _b;
        var itemUploadMonitor;
        var uploadPromise;
        if (file instanceof File) {
            var isEditFilenameSameAsCurrent = false;
            if (this._sourceItemUrl) {
                isEditFilenameSameAsCurrent = this._sourceItemUrl.split('/').pop() === file.name;
            }
            var prefix = Math.floor(Math.random() * 4294967296).toString();
            var fileName_1 = isEditFilenameSameAsCurrent
                ? prefix + sp_file_handler_1.SPFileHandler.replaceSpecialCharacters(file.name)
                : sp_file_handler_1.SPFileHandler.replaceSpecialCharacters(file.name);
            itemUploadMonitor = new sp_diagnostics_2._QosMonitor("".concat(this._options.callerName, ".UploadItem"));
            uploadPromise = this._spFileHandlerPromise.then(function (fileHandler) {
                return fileHandler.uploadLocalFile(file, fileName_1);
            });
        }
        else if (sp_image_helper_1._ThumbnailUrlGenerator.getThumbnailProvider(file.src) === sp_image_helper_1._ThumbnailProviderType.HubbleStock) {
            (_b = (_a = this._options).onSelectFile) === null || _b === void 0 ? void 0 : _b.call(_a, file.src, undefined, this._itemsCount);
            return;
        }
        else {
            itemUploadMonitor = new sp_diagnostics_2._QosMonitor("".concat(this._options.callerName, ".UploadExternalItem"));
            uploadPromise = this._spFileHandlerPromise.then(function (fileHandler) {
                return fileHandler.uploadExternalFile(file.src, file.name);
            });
        }
        window.addEventListener('beforeunload', this._promptUploadingWarning);
        if (this._options.onUploadFileStart) {
            this._options.onUploadFileStart();
        }
        uploadPromise.then(function (response) {
            _this._onUploadComplete(response);
            itemUploadMonitor.writeSuccess();
        }, function (error) {
            if (error instanceof sp_file_handler_1.SPFileHandlerError) {
                if (error.errorCode === -2147024891) {
                    itemUploadMonitor.writeExpectedFailure('PermissionAccessDenied', error);
                }
                else if (error.errorCode === -2130575257) {
                    itemUploadMonitor.writeExpectedFailure('FileNameExisted', error);
                }
                else {
                    itemUploadMonitor.writeUnexpectedFailure('FailedToUpload', error, { errorCode: error.errorCode });
                }
            }
            else {
                itemUploadMonitor.writeUnexpectedFailure('FailedToUploadNoSPFileHandlerError', error);
            }
            _this._onUploadError(error);
        });
    };
    FilePickerWrapper.prototype._promptUploadingWarning = function (e) {
        var confirmationMessage = FilePickerWrapperStrings_resx_1.default.UploadWarningMessage;
        e.returnValue = confirmationMessage; // Gecko, Trident, Chrome 34+
        return confirmationMessage; // Gecko, WebKit, Chrome <34
    };
    FilePickerWrapper.prototype._onUploadComplete = function (response) {
        window.removeEventListener('beforeunload', this._promptUploadingWarning);
        if (this._options.onSelectFile) {
            var guidSet = response.uniqueId
                ? {
                    listId: response.listId,
                    uniqueId: response.uniqueId,
                    webId: this._webId,
                    siteId: this._siteId
                }
                : undefined;
            this._options.onSelectFile(response.serverRelativeUrl, guidSet, this._itemsCount);
        }
    };
    FilePickerWrapper.prototype._onUploadError = function (error) {
        window.removeEventListener('beforeunload', this._promptUploadingWarning);
    };
    tslib_1.__decorate([
        office_ui_fabric_react_bundle_1.autobind
    ], FilePickerWrapper.prototype, "openFilePicker", null);
    tslib_1.__decorate([
        office_ui_fabric_react_bundle_1.autobind
    ], FilePickerWrapper.prototype, "_handleSelectFile", null);
    return FilePickerWrapper;
}());
exports.FilePickerWrapper = FilePickerWrapper;
//# sourceMappingURL=FilePickerWrapper.js.map