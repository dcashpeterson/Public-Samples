import type { IAdaptiveCardExtensionManifest } from '@microsoft/sp-module-interfaces';
import { ServiceScope } from '@microsoft/sp-core-library';
import { AdaptiveCardExtensionContext, type BaseAdaptiveCardExtension, type _IAdaptiveCardExtensionCache, type BaseCardView, type CardSize, type ILocation, type INotificationArguments, type INotificationResponse, type BaseQuickView } from '../index';
export interface IAdaptiveCardExtensionTestData {
    dataVersion?: string;
    id?: string;
    instanceId?: string;
    properties?: any;
    title?: string;
    description?: string;
    iconProperty?: string;
    cardSize?: CardSize;
    manifest?: IAdaptiveCardExtensionManifest<unknown>;
    cache?: _IAdaptiveCardExtensionCache;
    locationPromise?: Promise<ILocation>;
}
/**
 * A wrapper class around ACEs that allows a developer to test the full lifecycle of an AdaptiveCardExtension in unit tests
 *
 * Exposes functionality that is normally handled internally or by a renderer (e.g., opening a QuickView, retrieving the current View objects, etc)
 *
 * Usage:
 *
 * const wrapper: AdaptiveCardExtensionTestWrapper<MyAdaptiveCardExtension> = new AdaptiveCardExtensionTestWrapper<MyAdaptiveCardExtension>(testData, MyAdaptiveCardExtension);
 *
 */
export declare class AdaptiveCardExtensionTestWrapper<T extends BaseAdaptiveCardExtension> {
    private _adaptiveCardExtension;
    private _host;
    private _renderType;
    private _rootScope;
    private _context;
    private _testData;
    private _cls;
    constructor(testData: IAdaptiveCardExtensionTestData, cls: {
        new (): T;
    }, rootScope?: ServiceScope);
    load(): Promise<void>;
    _logCardActionEngagement(actionType: string, location: string | undefined, mobileSessionId?: string, mobileBootType?: string): void;
    get adaptiveCardExtension(): T;
    get context(): AdaptiveCardExtensionContext;
    openQuickView(viewId: string): void;
    get currentCardView(): BaseCardView | undefined;
    get currentQuickView(): BaseQuickView | undefined;
    onNotificationReceived(notificationArguments: Readonly<INotificationArguments<{}>>): INotificationResponse | undefined;
    private _onUpdateCallback;
    private _onVisibilityChanged;
    private _setRenderType;
    private _getContext;
    private _getData;
}
//# sourceMappingURL=AdaptiveCardExtensionTestWrapper.d.ts.map