import { type ITerminal, type JsonObject, JsonSchema } from '@rushstack/node-core-library';
import { CommandLineConfiguration } from '../../api/CommandLineConfiguration';
import type { RushConfiguration } from '../../api/RushConfiguration';
import type { IRushPluginConfigurationBase } from '../../api/RushPluginsConfiguration';
import type { IRushPlugin } from '../IRushPlugin';
export interface IRushPluginManifest {
    pluginName: string;
    description: string;
    entryPoint?: string;
    optionsSchema?: string;
    associatedCommands?: string[];
    commandLineJsonFilePath?: string;
}
export interface IRushPluginManifestJson {
    plugins: IRushPluginManifest[];
}
export interface IPluginLoaderOptions<TPluginConfiguration extends IRushPluginConfigurationBase> {
    pluginConfiguration: TPluginConfiguration;
    rushConfiguration: RushConfiguration;
    terminal: ITerminal;
}
export declare abstract class PluginLoaderBase<TPluginConfiguration extends IRushPluginConfigurationBase = IRushPluginConfigurationBase> {
    protected static _jsonSchema: JsonSchema;
    readonly packageName: Readonly<string>;
    readonly pluginName: Readonly<string>;
    protected readonly _rushConfiguration: RushConfiguration;
    protected readonly _terminal: ITerminal;
    protected _manifestCache: Readonly<IRushPluginManifest> | undefined;
    /**
     * The folder that should be used for resolving the plugin's NPM package.
     */
    abstract readonly packageFolder: string;
    constructor({ pluginConfiguration, rushConfiguration, terminal }: IPluginLoaderOptions<TPluginConfiguration>);
    load(): IRushPlugin | undefined;
    get pluginManifest(): IRushPluginManifest;
    getCommandLineConfiguration(): CommandLineConfiguration | undefined;
    protected _getCommandLineAdditionalPathFolders(): string[];
    protected _getCommandLineJsonFilePath(): string | undefined;
    private _loadAndValidatePluginPackage;
    private _resolvePlugin;
    protected _getPluginOptions(): JsonObject;
    protected _getPluginOptionsJsonFilePath(): string;
    protected _getRushPluginOptionsSchema(): JsonSchema | undefined;
    private _getRushPluginManifest;
    protected _getManifestPath(): string;
}
//# sourceMappingURL=PluginLoaderBase.d.ts.map