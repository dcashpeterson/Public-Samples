{"version":3,"file":"typedef-var.js","sourceRoot":"","sources":["../src/typedef-var.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport type { TSESLint, TSESTree } from '@typescript-eslint/experimental-utils';\r\nimport { AST_NODE_TYPES } from '@typescript-eslint/experimental-utils';\r\n\r\ntype MessageIds = 'expected-typedef' | 'expected-typedef-named';\r\ntype Options = [];\r\n\r\nconst typedefVar: TSESLint.RuleModule<MessageIds, Options> = {\r\n  meta: {\r\n    type: 'problem',\r\n    messages: {\r\n      'expected-typedef-named': 'Expected a type annotation.',\r\n      'expected-typedef': 'Expected {{name}} to have a type annotation.'\r\n    },\r\n    schema: [\r\n      {\r\n        type: 'object',\r\n        additionalProperties: false\r\n      }\r\n    ],\r\n    docs: {\r\n      description:\r\n        'Supplements the \"@typescript-eslint/typedef\" rule by relaxing the requirements for local variables',\r\n      // Deprecated in ESLint v8; Keep for backwards compatibility\r\n      category: 'Stylistic Issues',\r\n      recommended: 'error',\r\n      url: 'https://www.npmjs.com/package/@rushstack/eslint-plugin'\r\n    } as TSESLint.RuleMetaDataDocs\r\n  },\r\n\r\n  create: (context: TSESLint.RuleContext<MessageIds, Options>) => {\r\n    // This rule implements the variableDeclarationIgnoreFunction=true behavior from\r\n    // @typescript-eslint/typedef\r\n    function isVariableDeclarationIgnoreFunction(node: TSESTree.Node): boolean {\r\n      return (\r\n        node.type === AST_NODE_TYPES.FunctionExpression ||\r\n        node.type === AST_NODE_TYPES.ArrowFunctionExpression\r\n      );\r\n    }\r\n\r\n    function getNodeName(node: TSESTree.Parameter | TSESTree.PropertyName): string | undefined {\r\n      return node.type === AST_NODE_TYPES.Identifier ? node.name : undefined;\r\n    }\r\n\r\n    return {\r\n      VariableDeclarator(node): void {\r\n        if (node.id.typeAnnotation) {\r\n          // An explicit type declaration was provided\r\n          return;\r\n        }\r\n\r\n        // These are @typescript-eslint/typedef exemptions\r\n        if (\r\n          node.id.type === AST_NODE_TYPES.ArrayPattern /* ArrayDestructuring */ ||\r\n          node.id.type === AST_NODE_TYPES.ObjectPattern /* ObjectDestructuring */ ||\r\n          (node.init && isVariableDeclarationIgnoreFunction(node.init))\r\n        ) {\r\n          return;\r\n        }\r\n\r\n        // Ignore this case:\r\n        //\r\n        //   for (const NODE of thing) { }\r\n        let current: TSESTree.Node | undefined = node.parent;\r\n        while (current) {\r\n          switch (current.type) {\r\n            case AST_NODE_TYPES.VariableDeclaration:\r\n              // Keep looking upwards\r\n              current = current.parent;\r\n              break;\r\n            case AST_NODE_TYPES.ForOfStatement:\r\n            case AST_NODE_TYPES.ForInStatement:\r\n              // Stop traversing and don't report an error\r\n              return;\r\n            default:\r\n              // Stop traversing\r\n              current = undefined;\r\n              break;\r\n          }\r\n        }\r\n\r\n        // Is it a local variable?\r\n        current = node.parent;\r\n        while (current) {\r\n          switch (current.type) {\r\n            // function f() {\r\n            //   const NODE = 123;\r\n            // }\r\n            case AST_NODE_TYPES.FunctionDeclaration:\r\n\r\n            // class C {\r\n            //   public m(): void {\r\n            //     const NODE = 123;\r\n            //   }\r\n            // }\r\n            case AST_NODE_TYPES.MethodDefinition:\r\n\r\n            // let f = function() {\r\n            //   const NODE = 123;\r\n            // }\r\n            case AST_NODE_TYPES.FunctionExpression:\r\n\r\n            // let f = () => {\r\n            //   const NODE = 123;\r\n            // }\r\n            case AST_NODE_TYPES.ArrowFunctionExpression:\r\n              // Stop traversing and don't report an error\r\n              return;\r\n          }\r\n\r\n          current = current.parent;\r\n        }\r\n\r\n        const nodeName: string | undefined = getNodeName(node.id);\r\n        if (nodeName) {\r\n          context.report({\r\n            node,\r\n            messageId: 'expected-typedef-named',\r\n            data: { name: nodeName }\r\n          });\r\n        } else {\r\n          context.report({\r\n            node,\r\n            messageId: 'expected-typedef'\r\n          });\r\n        }\r\n      }\r\n    };\r\n  }\r\n};\r\n\r\nexport { typedefVar };\r\n"]}