{"version":3,"file":"RushAzureInteractiveAuthPlugin.js","sourceRoot":"","sources":["../src/RushAzureInteractiveAuthPlugin.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;;;;;;;;;;;;;;;;;;;AAK3D,MAAM,WAAW,GAAiC,4BAA4B,CAAC;AAsC/E;;;;;;;;;GASG;AACH,MAAqB,6BAA6B;IAKhD,YAAmB,OAAiD;QAFpD,eAAU,GAAiC,WAAW,CAAC;QAGrE,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IAC1B,CAAC;IAEM,KAAK,CAAC,WAAwB,EAAE,UAA6B;QAClE,MAAM,OAAO,GAA6C,IAAI,CAAC,QAAQ,CAAC;QAExE,IAAI,CAAC,OAAO,EAAE;YACZ,yBAAyB;YACzB,OAAO;SACR;QAED,MAAM,EAAE,cAAc,EAAE,cAAc,EAAE,GAAG,OAAO,CAAC;QAEnD,MAAM,EAAE,KAAK,EAAE,GAAG,WAAW,CAAC;QAE9B,MAAM,OAAO,GAAwB,KAAK,IAAI,EAAE;YAC9C,MAAM,EAAE,0BAA0B,EAAE,GAAG,wDAAa,8BAA8B,GAAC,CAAC;YACpF,MAAM,EACJ,kBAAkB,EAClB,oBAAoB,EACpB,gBAAgB,GAAG,kBAAkB,EACrC,wBAAwB,EACzB,GAAG,OAAO,CAAC;YAEZ,MAAM,MAAM,GAAY,WAAW,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;YAC3D,MAAM,CAAC,QAAQ,CAAC,SAAS,CACvB,sCAAsC,oBAAoB,iBAAiB,kBAAkB,qBAAqB,gBAAgB,IAAI,CACvI,CAAC;YAEF,IAAI,aAA+B,CAAC;YACpC,IAAI,OAAO,wBAAwB,KAAK,QAAQ,EAAE;gBAChD,aAAa,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,wBAAwB,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;aAC7E;YAED,MAAM,IAAI,0BAA0B,CAAC;gBACnC,kBAAkB,EAAE,kBAAkB;gBACtC,oBAAoB,EAAE,oBAAoB;gBAC1C,gBAAgB,EAAE,OAAO,CAAC,gBAAgB;gBAC1C,mBAAmB,EAAE,IAAI;aAC1B,CAAC,CAAC,sCAAsC,CAAC,MAAM,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;QAC5E,CAAC,CAAC;QAEF,IAAI,cAAc,EAAE;YAClB,KAAK,MAAM,WAAW,IAAI,cAAc,EAAE;gBACxC,KAAK,CAAC,sBAAsB,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,UAAU,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;aAChF;SACF;QAED,IAAI,cAAc,EAAE;YAClB,KAAK,MAAM,WAAW,IAAI,cAAc,EAAE;gBACxC,KAAK,CAAC,gBAAgB,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,UAAU,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;aAC1E;SACF;IACH,CAAC;CACF;AA5DD,gDA4DC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport type { IRushPlugin, RushSession, RushConfiguration, ILogger } from '@rushstack/rush-sdk';\nimport type { AzureEnvironmentName } from './AzureAuthenticationBase';\n\nconst PLUGIN_NAME: 'AzureInteractiveAuthPlugin' = 'AzureInteractiveAuthPlugin';\n\n/**\n * @public\n */\nexport interface IAzureInteractiveAuthOptions {\n  /**\n   * The name of the the Azure storage account to authenticate to.\n   */\n  readonly storageAccountName: string;\n\n  /**\n   * The name of the container in the Azure storage account to authenticate to.\n   */\n  readonly storageContainerName: string;\n\n  /**\n   * The Azure environment the storage account exists in. Defaults to AzureCloud.\n   */\n  readonly azureEnvironment?: AzureEnvironmentName;\n\n  /**\n   * If specified and a credential exists that will be valid for at least this many minutes from the time\n   * of execution, no action will be taken.\n   */\n  readonly minimumValidityInMinutes?: number;\n\n  /**\n   * The set of Rush global commands before which credentials should be updated.\n   */\n  readonly globalCommands?: string[];\n\n  /**\n   * The set of Rush phased commands before which credentials should be updated.\n   */\n  readonly phasedCommands?: string[];\n}\n\n/**\n * This plugin is for performing interactive authentication to an arbitrary Azure blob storage account.\n * It is meant to be used for scenarios where custom commands may interact with Azure blob storage beyond\n * the scope of the build cache (for build cache, use the RushAzureStorageBuildCachePlugin).\n *\n * However, since the authentication has the same dependencies, if the repository already uses the build\n * cache plugin, the additional functionality for authentication can be provided at minimal cost.\n *\n * @public\n */\nexport default class RushAzureInteractieAuthPlugin implements IRushPlugin {\n  private readonly _options: IAzureInteractiveAuthOptions | undefined;\n\n  public readonly pluginName: 'AzureInteractiveAuthPlugin' = PLUGIN_NAME;\n\n  public constructor(options: IAzureInteractiveAuthOptions | undefined) {\n    this._options = options;\n  }\n\n  public apply(rushSession: RushSession, rushConfig: RushConfiguration): void {\n    const options: IAzureInteractiveAuthOptions | undefined = this._options;\n\n    if (!options) {\n      // Plugin is not enabled.\n      return;\n    }\n\n    const { globalCommands, phasedCommands } = options;\n\n    const { hooks } = rushSession;\n\n    const handler: () => Promise<void> = async () => {\n      const { AzureStorageAuthentication } = await import('./AzureStorageAuthentication');\n      const {\n        storageAccountName,\n        storageContainerName,\n        azureEnvironment = 'AzurePublicCloud',\n        minimumValidityInMinutes\n      } = options;\n\n      const logger: ILogger = rushSession.getLogger(PLUGIN_NAME);\n      logger.terminal.writeLine(\n        `Authenticating to Azure container \"${storageContainerName}\" on account \"${storageAccountName}\" in environment \"${azureEnvironment}\".`\n      );\n\n      let minimumExpiry: Date | undefined;\n      if (typeof minimumValidityInMinutes === 'number') {\n        minimumExpiry = new Date(Date.now() + minimumValidityInMinutes * 60 * 1000);\n      }\n\n      await new AzureStorageAuthentication({\n        storageAccountName: storageAccountName,\n        storageContainerName: storageContainerName,\n        azureEnvironment: options.azureEnvironment,\n        isCacheWriteAllowed: true\n      }).updateCachedCredentialInteractiveAsync(logger.terminal, minimumExpiry);\n    };\n\n    if (globalCommands) {\n      for (const commandName of globalCommands) {\n        hooks.runGlobalCustomCommand.for(commandName).tapPromise(PLUGIN_NAME, handler);\n      }\n    }\n\n    if (phasedCommands) {\n      for (const commandName of phasedCommands) {\n        hooks.runPhasedCommand.for(commandName).tapPromise(PLUGIN_NAME, handler);\n      }\n    }\n  }\n}\n"]}