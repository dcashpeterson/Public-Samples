"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AdaptiveCardExtensionTestWrapper = void 0;
var tslib_1 = require("tslib");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var index_1 = require("../index");
var MockAdaptiveCardExtensionManifestInstance_1 = tslib_1.__importDefault(require("./MockAdaptiveCardExtensionManifestInstance"));
var TEST_TAG_NAME = 'AdaptiveCardExtensionTestWrapper';
var KEY = '95720abe-cc9f-43e6-8a23-4cb82daaddf2-dd4e95e6-7260-40c5-8e93-aff785ceeb6b';
/**
 * A wrapper class around ACEs that allows a developer to test the full lifecycle of an AdaptiveCardExtension in unit tests
 *
 * Exposes functionality that is normally handled internally or by a renderer (e.g., opening a QuickView, retrieving the current View objects, etc)
 *
 * Usage:
 *
 * const wrapper: AdaptiveCardExtensionTestWrapper<MyAdaptiveCardExtension> = new AdaptiveCardExtensionTestWrapper<MyAdaptiveCardExtension>(testData, MyAdaptiveCardExtension);
 *
 */
var AdaptiveCardExtensionTestWrapper = /** @class */ (function () {
    function AdaptiveCardExtensionTestWrapper(testData, cls, rootScope) {
        var _this = this;
        this._onUpdateCallback = function (card) {
            // no-op
        };
        this._onVisibilityChanged = function () {
            // no-op
        };
        this._setRenderType = function (newRenderType, instanceId, initialViewId) {
            if (_this._renderType !== newRenderType) {
                _this._renderType = newRenderType;
                _this._adaptiveCardExtension._setRenderType(newRenderType, initialViewId);
            }
        };
        this._testData = testData;
        this._cls = cls;
        this._host = new index_1._AdaptiveCardExtensionHost({
            onRequestRenderTypeCallback: this._setRenderType,
            onUpdateCallback: this._onUpdateCallback,
            onVisibilityChanged: this._onVisibilityChanged,
            cache: this._testData.cache
        });
        this._renderType = 'Card';
        if (rootScope) {
            this._rootScope = rootScope;
        }
        else {
            this._rootScope = sp_core_library_1.ServiceScope.startNewRoot();
            this._rootScope.finish();
        }
    }
    AdaptiveCardExtensionTestWrapper.prototype.load = function () {
        var _this = this;
        this._adaptiveCardExtension = new this._cls();
        // override _generateCacheKey as it needs to read from `this.context.pageContext` which does not exist.
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        jest.spyOn(this._cls.prototype, '_generateCacheKey').mockImplementation(function () { return KEY; });
        this._adaptiveCardExtension._internalInitialize(this._getContext(this._testData), false, sp_core_library_1.DisplayMode.Read, TEST_TAG_NAME, false, undefined);
        this._adaptiveCardExtension._internalDeserialize(this._getData(this._testData));
        this._host.onBeforeInitialized(this._adaptiveCardExtension);
        return (this._adaptiveCardExtension
            .onInit()
            .then(function () {
            _this._adaptiveCardExtension._internalOnAfterInit();
            // Ensures the initial Card view is pushed to the navigator
            _this._adaptiveCardExtension._getRenderArguments('Card');
        })
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            .catch(function (error) {
            throw error;
        }));
    };
    AdaptiveCardExtensionTestWrapper.prototype._logCardActionEngagement = function (actionType, location, mobileSessionId, mobileBootType) {
        this._adaptiveCardExtension = new this._cls();
        this._adaptiveCardExtension._internalInitialize(this._getContext(this._testData), false, sp_core_library_1.DisplayMode.Read, TEST_TAG_NAME, false, undefined);
        Object.defineProperty(this._adaptiveCardExtension.cardNavigator, '_currentView', {
            value: 'mocked value'
        });
        this._adaptiveCardExtension._logCardActionEngagement(actionType, location, mobileSessionId, mobileBootType);
    };
    Object.defineProperty(AdaptiveCardExtensionTestWrapper.prototype, "adaptiveCardExtension", {
        get: function () {
            return this._adaptiveCardExtension;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AdaptiveCardExtensionTestWrapper.prototype, "context", {
        get: function () {
            return this._context;
        },
        enumerable: false,
        configurable: true
    });
    AdaptiveCardExtensionTestWrapper.prototype.openQuickView = function (viewId) {
        this._setRenderType('QuickView', viewId);
    };
    Object.defineProperty(AdaptiveCardExtensionTestWrapper.prototype, "currentCardView", {
        get: function () {
            return this._adaptiveCardExtension.cardNavigator._currentView;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AdaptiveCardExtensionTestWrapper.prototype, "currentQuickView", {
        get: function () {
            return this._adaptiveCardExtension.quickViewNavigator._currentView;
        },
        enumerable: false,
        configurable: true
    });
    AdaptiveCardExtensionTestWrapper.prototype.onNotificationReceived = function (notificationArguments) {
        return this._adaptiveCardExtension.onNotificationReceived(notificationArguments);
    };
    AdaptiveCardExtensionTestWrapper.prototype._getContext = function (testData) {
        var contextParams = {
            host: this._host,
            manifest: testData.manifest || new MockAdaptiveCardExtensionManifestInstance_1.default(),
            instanceId: testData.instanceId || 'aceInstanceId',
            parentServiceScope: this._rootScope,
            loggingTag: '',
            deviceContext: 'WebView',
            location: function () {
                return new Promise(function (resolve, reject) {
                    return resolve({ latitude: 10, longitude: 10 });
                });
            }
        };
        return new index_1.AdaptiveCardExtensionContext(contextParams);
    };
    AdaptiveCardExtensionTestWrapper.prototype._getData = function (testData) {
        var defaultAdaptiveCardExtensionData = {
            dataVersion: '1.0.0',
            id: 'aceId',
            instanceId: 'aceInstanceId',
            properties: {},
            title: 'title',
            description: 'description',
            iconProperty: 'iconProperty',
            cardSize: 'Medium'
        };
        return tslib_1.__assign(tslib_1.__assign({}, defaultAdaptiveCardExtensionData), testData);
    };
    return AdaptiveCardExtensionTestWrapper;
}());
exports.AdaptiveCardExtensionTestWrapper = AdaptiveCardExtensionTestWrapper;
//# sourceMappingURL=AdaptiveCardExtensionTestWrapper.js.map