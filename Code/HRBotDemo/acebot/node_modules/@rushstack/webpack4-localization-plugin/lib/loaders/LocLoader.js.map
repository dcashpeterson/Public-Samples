{"version":3,"file":"LocLoader.js","sourceRoot":"","sources":["../../src/loaders/LocLoader.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAG3D,oEAAwD;AACxD,8EAAyF;AAGzF,mDAAyE;AACzE,4DAAyD;AACzD,gFAA6E;AAM7E,kBAAe,IAAA,6BAAa,EAAC,UAE3B,WAAmB,EACnB,OAAe,EACf,OAA0B;IAE1B,MAAM,EAAE,cAAc,EAAE,GAAG,OAAO,CAAC;IACnC,MAAM,QAAQ,GAAa,IAAI,4BAAQ,CAAC,+CAAsB,CAAC,4BAA4B,CAAC,IAAI,CAAC,CAAC,CAAC;IACnG,MAAM,WAAW,GAAsB,IAAA,qCAAY,kCAC9C,OAAO,KACV,OAAO;QACP,QAAQ,EACR,QAAQ,EAAE,WAAW,IACrB,CAAC;IACH,MAAM,EAAE,yBAAyB,EAAE,MAAM,EAAE,GAAG,cAAc,CAAC,iBAAiB,CAC5E,QAAQ,EACR,WAAW,EACX,WAAW,CACZ,CAAC;IACF,KAAK,MAAM,cAAc,IAAI,yBAAyB,EAAE;QACtD,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;KACjC;IAED,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE;QAC1B,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;KACvB;IAED,MAAM,YAAY,GAAqC,EAAE,CAAC;IAC1D,wCAAwC;IACxC,KAAK,MAAM,UAAU,IAAI,WAAW,EAAE;QACpC,MAAM,SAAS,GAAW,GAAG,WAAW,IAAI,UAAU,EAAE,CAAC;QACzD,IAAI,cAAc,CAAC,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE;YAC5C,YAAY,CAAC,UAAU,CAAC,GAAG,cAAc,CAAC,UAAU,CAAC,GAAG,CAAC,SAAS,CAAE,CAAC,KAAK,CAAC;SAC5E;aAAM;YACL,MAAM,IAAI,KAAK,CAAC,oDAAoD,SAAS,GAAG,CAAC,CAAC;SACnF;KACF;IAED,2BAAY,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IAE5C,OAAO,YAAY,CAAC;AACtB,CAAC,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport type { loader } from 'webpack';\nimport { Terminal } from '@rushstack/node-core-library';\nimport { type ILocalizationFile, parseLocFile } from '@rushstack/localization-utilities';\n\nimport type { LocalizationPlugin } from '../LocalizationPlugin';\nimport { loaderFactory, type IBaseLoaderOptions } from './LoaderFactory';\nimport { EntityMarker } from '../utilities/EntityMarker';\nimport { LoaderTerminalProvider } from '../utilities/LoaderTerminalProvider';\n\nexport interface ILocLoaderOptions extends IBaseLoaderOptions {\n  pluginInstance: LocalizationPlugin;\n}\n\nexport default loaderFactory(function (\n  this: loader.LoaderContext,\n  locFilePath: string,\n  content: string,\n  options: ILocLoaderOptions\n) {\n  const { pluginInstance } = options;\n  const terminal: Terminal = new Terminal(LoaderTerminalProvider.getTerminalProviderForLoader(this));\n  const locFileData: ILocalizationFile = parseLocFile({\n    ...options,\n    content,\n    terminal,\n    filePath: locFilePath\n  });\n  const { additionalLoadedFilePaths, errors } = pluginInstance.addDefaultLocFile(\n    terminal,\n    locFilePath,\n    locFileData\n  );\n  for (const additionalFile of additionalLoadedFilePaths) {\n    this.dependency(additionalFile);\n  }\n\n  for (const error of errors) {\n    this.emitError(error);\n  }\n\n  const resultObject: { [stringName: string]: string } = {};\n  // eslint-disable-next-line guard-for-in\n  for (const stringName in locFileData) {\n    const stringKey: string = `${locFilePath}?${stringName}`;\n    if (pluginInstance.stringKeys.has(stringKey)) {\n      resultObject[stringName] = pluginInstance.stringKeys.get(stringKey)!.value;\n    } else {\n      throw new Error(`Unexpected - missing placeholder for string key \"${stringKey}\"`);\n    }\n  }\n\n  EntityMarker.markEntity(this._module, true);\n\n  return resultObject;\n});\n"]}