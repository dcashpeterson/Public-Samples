import { CardElement, Action } from "./card-elements";
import { SerializableObject, Version } from "./serialization";
export interface ITypeRegistration<T extends SerializableObject> {
    typeName: string;
    objectType: {
        new (): T;
    };
    schemaVersion: Version;
}
export declare class CardObjectRegistry<T extends SerializableObject> {
    private _items;
    findByName(typeName: string): ITypeRegistration<T> | undefined;
    clear(): void;
    copyTo(target: CardObjectRegistry<T>): void;
    register(typeName: string, objectType: {
        new (): T;
    }, schemaVersion?: Version): void;
    unregister(typeName: string): void;
    createInstance(typeName: string, targetVersion: Version): T | undefined;
    getItemCount(): number;
    getItemAt(index: number): ITypeRegistration<T>;
}
export declare class GlobalRegistry {
    private static _elements?;
    private static _actions?;
    static populateWithDefaultElements(registry: CardObjectRegistry<CardElement>): void;
    static populateWithDefaultActions(registry: CardObjectRegistry<Action>): void;
    static readonly defaultElements: CardObjectRegistry<CardElement>;
    static readonly defaultActions: CardObjectRegistry<Action>;
    static get elements(): CardObjectRegistry<CardElement>;
    static get actions(): CardObjectRegistry<Action>;
    static reset(): void;
}
