{"version":3,"file":"LoadThemedStylesLoader.js","sourceRoot":"","sources":["../src/LoadThemedStylesLoader.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAS3D,4CAA6C;AAE7C,MAAM,sBAAsB,GAAW,OAAO,CAAC,OAAO,CAAC,+BAA+B,CAAC,CAAC;AAexF;;;;;GAKG;AACH,MAAa,sBAAsB;IAGjC;QACE,MAAM,IAAI,KAAK,CAAC,yDAAyD,CAAC,CAAC;IAC7E,CAAC;IAEM,MAAM,KAAK,sBAAsB,CAAC,KAAa;QACpD,sBAAsB,CAAC,uBAAuB,GAAG,KAAK,CAAC;IACzD,CAAC;IAED;;OAEG;IACI,MAAM,KAAK,sBAAsB;QACtC,OAAO,sBAAsB,CAAC,uBAAuB,CAAC;IACxD,CAAC;IAED;;OAEG;IACI,MAAM,CAAC,2BAA2B;QACvC,sBAAsB,CAAC,uBAAuB,GAAG,sBAAsB,CAAC;IAC1E,CAAC;IAEM,MAAM,CAAC,KAAK,CAA6B,gBAAwB;QACtE,MAAM,OAAO,GAAmC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;QACnF,IAAK,OAAmC,CAAC,WAAW,EAAE;YACpD,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;SAC/D;QAED,MAAM,EAAE,KAAK,GAAG,KAAK,EAAE,GAAG,OAAO,CAAC;QAElC,OAAO;YACL,yBAAyB,WAAW,CAAC,gBAAgB,CAAC,IAAI,EAAE,IAAI,GAAG,gBAAgB,CAAC,IAAI;YACxF,wBAAwB,IAAI,CAAC,SAAS,CAAC,sBAAsB,CAAC,uBAAuB,CAAC,IAAI;YAC1F,EAAE;YACF,mEAAmE;YACnE,EAAE;YACF,8BAA8B;YAC9B,6EAA6E,KAAK,KAAK,IAAI,IAAI;YAC/F,EAAE;YACF,qDAAqD;SACtD,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACf,CAAC;;AA3Cc,8CAAuB,GAAW,sBAAsB,CAAC;AAD7D,wDAAsB","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\n/**\n * This simple loader wraps the loading of CSS in script equivalent to\n *  require(\"load-themed-styles\").loadStyles('... css text ...').\n * @packageDocumentation\n */\n\nimport type { loader } from 'webpack';\nimport loaderUtils = require('loader-utils');\n\nconst loadedThemedStylesPath: string = require.resolve('@microsoft/load-themed-styles');\n\n/**\n * Options for the loader.\n *\n * @public\n */\nexport interface ILoadThemedStylesLoaderOptions {\n  /**\n   * If this parameter is set to \"true,\" the \"loadAsync\" parameter is set to true in the call to loadStyles.\n   * Defaults to false.\n   */\n  async?: boolean;\n}\n\n/**\n * This simple loader wraps the loading of CSS in script equivalent to\n *  require(\"load-themed-styles\").loadStyles('... css text ...').\n *\n * @public\n */\nexport class LoadThemedStylesLoader {\n  private static _loadedThemedStylesPath: string = loadedThemedStylesPath;\n\n  public constructor() {\n    throw new Error('Constructing \"LoadThemedStylesLoader\" is not supported.');\n  }\n\n  public static set loadedThemedStylesPath(value: string) {\n    LoadThemedStylesLoader._loadedThemedStylesPath = value;\n  }\n\n  /**\n   * Use this property to override the path to the `@microsoft/load-themed-styles` package.\n   */\n  public static get loadedThemedStylesPath(): string {\n    return LoadThemedStylesLoader._loadedThemedStylesPath;\n  }\n\n  /**\n   * Reset the path to the `@microsoft/load-themed-styles package` to the default.\n   */\n  public static resetLoadedThemedStylesPath(): void {\n    LoadThemedStylesLoader._loadedThemedStylesPath = loadedThemedStylesPath;\n  }\n\n  public static pitch(this: loader.LoaderContext, remainingRequest: string): string {\n    const options: ILoadThemedStylesLoaderOptions = loaderUtils.getOptions(this) || {};\n    if ((options as Record<string, unknown>).namedExport) {\n      throw new Error('The \"namedExport\" option has been removed.');\n    }\n\n    const { async = false } = options;\n\n    return [\n      `var content = require(${loaderUtils.stringifyRequest(this, '!!' + remainingRequest)});`,\n      `var loader = require(${JSON.stringify(LoadThemedStylesLoader._loadedThemedStylesPath)});`,\n      '',\n      'if(typeof content === \"string\") content = [[module.id, content]];',\n      '',\n      '// add the styles to the DOM',\n      `for (var i = 0; i < content.length; i++) loader.loadStyles(content[i][1], ${async === true});`,\n      '',\n      'if(content.locals) module.exports = content.locals;'\n    ].join('\\n');\n  }\n}\n"]}