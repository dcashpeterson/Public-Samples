"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
Object.defineProperty(exports, "__esModule", { value: true });
exports.ThumbnailPickerPreview = void 0;
var tslib_1 = require("tslib");
var React = tslib_1.__importStar(require("react"));
var office_ui_fabric_react_bundle_1 = require("@ms/office-ui-fabric-react-bundle");
var FilePickerWrapper_1 = require("../filePicker/FilePickerWrapper");
var ThumbnailRenderer_1 = require("../../../propertyPaneThumbnailPickerShared/thumbnailRenderer/ThumbnailRenderer");
var ThumbnailPickerUtils_1 = require("../../../propertyPaneThumbnailPickerShared/ThumbnailPickerUtils");
var KillSwitches_1 = require("../../../common/KillSwitches");
var ThumbnailPickerPreview_module_scss_1 = tslib_1.__importDefault(require("./ThumbnailPickerPreview.module.scss"));
var FILE_PICKER_IMAGES_TYPE = 2;
var ThumbnailPickerPreview = /** @class */ (function (_super) {
    tslib_1.__extends(ThumbnailPickerPreview, _super);
    function ThumbnailPickerPreview(props) {
        var _this = _super.call(this, props) || this;
        _this._handleChangeImageClick = function () {
            _this._filePicker.openFilePicker();
        };
        _this._filePicker = new FilePickerWrapper_1.FilePickerWrapper({
            serviceScope: _this.props.serviceScope,
            itemTypes: new Set([FILE_PICKER_IMAGES_TYPE]),
            onSelectFile: _this._handleSelectFile,
            onUploadFileError: _this._handleUploadError,
            onUploadFileStart: _this._handleUploadFileStart,
            allowExternalTenantLinks: false,
            disableWebSearch: false,
            isMultiSelectMode: false,
            callerName: _this.props.callerName
        });
        _this._thumbnailWrapperRef = React.createRef();
        _this.state = {
            isUploadInProgress: false
        };
        return _this;
    }
    // eslint-disable-next-line @typescript-eslint/naming-convention
    ThumbnailPickerPreview.prototype.UNSAFE_componentWillReceiveProps = function (nextProps) {
        this.setState({
            isUploadInProgress: false
        });
    };
    ThumbnailPickerPreview.prototype.render = function () {
        return (React.createElement("div", { className: ThumbnailPickerPreview_module_scss_1.default.root, ref: this._thumbnailWrapperRef },
            React.createElement(ThumbnailRenderer_1.ThumbnailRenderer, { key: this.props.thumbnail.imageUrl, thumbnail: this.props.thumbnail, showLoading: this.state.isUploadInProgress, previewFullWidth: this.props.previewFullWidth, previewGrayBackground: this.props.previewGrayBackground, wrapperClassName: this.props.thumbnailRendererWrapperClassName, iconClassName: this.props.thumbnailRendererIconClassName, qosPrefix: this.props.callerName }),
            (0, ThumbnailPickerUtils_1.getThumbnailPickerButtons)(this._handleChangeImageClick, this.props.onItemDeleted, ThumbnailPickerPreview_module_scss_1.default.changeButton, 'thumbnailImagePicker')));
    };
    ThumbnailPickerPreview.prototype._handleUploadFileStart = function () {
        this.setState({
            isUploadInProgress: true
        });
    };
    ThumbnailPickerPreview.prototype._handleUploadError = function (error) {
        // @todo show error somehow. - VSO 1064771
        this.setState({
            isUploadInProgress: false
        });
    };
    ThumbnailPickerPreview.prototype._handleSelectFile = function (url, guidSet) {
        this.setState(function (prevState) { return ({
            isUploadInProgress: false
        }); });
        this.props.onItemChanged(url, guidSet);
        this._handleImageChangeFocus();
    };
    ThumbnailPickerPreview.prototype._handleImageChangeFocus = function () {
        var _this = this;
        if (!(0, KillSwitches_1.isImageChangeButtonFocusedKSActivated)()) {
            setTimeout(function () {
                var _a;
                var query = '[data-automation-id="thumbnailImagePickerChangeButton"]';
                // Leverage the ref to avoid querying the whole document
                var changeButton = (_a = _this._thumbnailWrapperRef.current) === null || _a === void 0 ? void 0 : _a.querySelector(query);
                if (changeButton) {
                    changeButton.focus();
                }
            }, 0);
        }
    };
    tslib_1.__decorate([
        office_ui_fabric_react_bundle_1.autobind
    ], ThumbnailPickerPreview.prototype, "_handleUploadFileStart", null);
    tslib_1.__decorate([
        office_ui_fabric_react_bundle_1.autobind
    ], ThumbnailPickerPreview.prototype, "_handleUploadError", null);
    tslib_1.__decorate([
        office_ui_fabric_react_bundle_1.autobind
    ], ThumbnailPickerPreview.prototype, "_handleSelectFile", null);
    return ThumbnailPickerPreview;
}(React.PureComponent));
exports.ThumbnailPickerPreview = ThumbnailPickerPreview;
//# sourceMappingURL=ThumbnailPickerPreview.js.map