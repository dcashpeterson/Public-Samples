import type { RushConfigurationProject } from '../../api/RushConfigurationProject';
import type { IPhase } from '../../api/CommandLineConfiguration';
import type { IOperationRunner } from './IOperationRunner';
/**
 * Options for constructing a new Operation.
 * @alpha
 */
export interface IOperationOptions {
    /**
     * The Rush phase associated with this Operation, if any
     */
    phase?: IPhase | undefined;
    /**
     * The Rush project associated with this Operation, if any
     */
    project?: RushConfigurationProject | undefined;
    /**
     * When the scheduler is ready to process this `Operation`, the `runner` implements the actual work of
     * running the operation.
     */
    runner?: IOperationRunner | undefined;
}
/**
 * The `Operation` class is a node in the dependency graph of work that needs to be scheduled by the
 * `OperationExecutionManager`. Each `Operation` has a `runner` member of type `IOperationRunner`, whose
 * implementation manages the actual process of running a single operation.
 *
 * The graph of `Operation` instances will be cloned into a separate execution graph after processing.
 *
 * @alpha
 */
export declare class Operation {
    /**
     * The Rush phase associated with this Operation, if any
     */
    readonly associatedPhase: IPhase | undefined;
    /**
     * The Rush project associated with this Operation, if any
     */
    readonly associatedProject: RushConfigurationProject | undefined;
    /**
     * A set of all operations which depend on this operation.
     */
    readonly consumers: ReadonlySet<Operation>;
    /**
     * A set of all dependencies which must be executed before this operation is complete.
     */
    readonly dependencies: ReadonlySet<Operation>;
    /**
     * When the scheduler is ready to process this `Operation`, the `runner` implements the actual work of
     * running the operation.
     */
    runner: IOperationRunner | undefined;
    /**
     * The weight for this operation. This scalar is the contribution of this operation to the
     * `criticalPathLength` calculation above. Modify to indicate the following:
     * - `weight` === 1: indicates that this operation has an average duration
     * - `weight` &gt; 1: indicates that this operation takes longer than average and so the scheduler
     *     should try to favor starting it over other, shorter operations. An example might be an operation that
     *     bundles an entire application and runs whole-program optimization.
     * - `weight` &lt; 1: indicates that this operation takes less time than average and so the scheduler
     *     should favor other, longer operations over it. An example might be an operation to unpack a cached
     *     output, or an operation using NullOperationRunner, which might use a value of 0.
     */
    weight: number;
    constructor(options?: IOperationOptions);
    /**
     * The name of this operation, for logging.
     */
    get name(): string | undefined;
    /**
     * Adds the specified operation as a dependency and updates the consumer list.
     */
    addDependency(dependency: Operation): void;
    /**
     * Deletes the specified operation as a dependency and updates the consumer list.
     */
    deleteDependency(dependency: Operation): void;
}
//# sourceMappingURL=Operation.d.ts.map