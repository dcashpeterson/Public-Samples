"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsalSessionIdManager = void 0;
/**
 * This class is used to record invalid session IDs to avoid using them in future requests.
 *
 * A static array is used to manage invalid session IDs. These session IDs are backed up to local storage
 * and updated when new ones are found.
 *
 * The maximum number of bad session IDs is configurable and currently set to 5. We limit this field to
 * keep storage use to a minimum.
 *
 * @internal
 */
var MsalSessionIdManager = /** @class */ (function () {
    function MsalSessionIdManager() {
    }
    /**
     * Initializes the MsalSessionIdManager by loading state from storage. This should be called before
     * attempting to perform any other methods.
     */
    MsalSessionIdManager.initialize = function () {
        if (!MsalSessionIdManager._invalidSessionIds) {
            MsalSessionIdManager._invalidSessionIds = MsalSessionIdManager._loadInvalidSessionIdsFromStorage();
        }
    };
    /**
     * Given a session ID, determines if the session ID is known to be invalid.
     * @param sessionId - Session ID to search for.
     * @returns True if the session ID is invalid.
     */
    MsalSessionIdManager.isSessionIdInvalid = function (sessionId) {
        return MsalSessionIdManager._invalidSessionIds.indexOf(sessionId) !== -1;
    };
    /**
     * Given a session ID, adds it to the list of invalid session IDs. Ignores IDs that are already invalid.
     * @param sessionId - Session ID to mark as invalid.
     */
    MsalSessionIdManager.addInvalidSessionId = function (sessionId) {
        var invalidSessionIds = MsalSessionIdManager._invalidSessionIds;
        var isSidAlreadyInvalid = MsalSessionIdManager.isSessionIdInvalid(sessionId);
        if (sessionId && !isSidAlreadyInvalid) {
            if (invalidSessionIds.length >= MsalSessionIdManager._MAX_SIDS) {
                MsalSessionIdManager._invalidSessionIds.shift();
            }
            MsalSessionIdManager._invalidSessionIds.push(sessionId);
            MsalSessionIdManager.saveInvalidSessionIdsToStorage();
        }
    };
    /**
     * Saves the current list of invalid session IDs to local storage.
     * Does not write to storage if there are no known invalid session IDs.
     */
    MsalSessionIdManager.saveInvalidSessionIdsToStorage = function () {
        if (MsalSessionIdManager._invalidSessionIds) {
            var invalidSessionIdsJson = JSON.stringify(MsalSessionIdManager._invalidSessionIds);
            window.localStorage.setItem(MsalSessionIdManager._INVALID_SID_SS_KEY, invalidSessionIdsJson);
        }
    };
    /**
     * Loads and returns the list of known invalid session IDs from local storage.
     * If there is nothing in storage then it will a new array.
     *
     * If the JSON from local storage is not valid it will return an empty new array.
     * @returns
     */
    MsalSessionIdManager._loadInvalidSessionIdsFromStorage = function () {
        var invalidSidsJson = window.localStorage.getItem(MsalSessionIdManager._INVALID_SID_SS_KEY);
        if (invalidSidsJson) {
            try {
                return JSON.parse(invalidSidsJson);
            }
            catch (error) {
                return new Array();
            }
        }
        else {
            return new Array();
        }
    };
    MsalSessionIdManager._INVALID_SID_SS_KEY = 'spfx.msal.invalidSessionIds';
    MsalSessionIdManager._MAX_SIDS = 5;
    return MsalSessionIdManager;
}());
exports.MsalSessionIdManager = MsalSessionIdManager;
//# sourceMappingURL=MsalSessionIdManager.js.map