{"version":3,"file":"AzureStorageAuthentication.js","sourceRoot":"","sources":["../src/AzureStorageAuthentication.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAG3D,sDAM6B;AAE7B,uEAImC;AAWnC,MAAM,oBAAoB,GAAW,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,aAAa;AAE3E;;GAEG;AACH,MAAa,0BAA2B,SAAQ,iDAAuB;IASrE,YAAmB,OAA2C;QAC5D,KAAK,CAAC,OAAO,CAAC,CAAC;QATE,4BAAuB,GAAW,oBAAoB,CAAC;QACvD,8BAAyB,GAAW,SAAS,CAAC;QAS/D,IAAI,CAAC,mBAAmB,GAAG,OAAO,CAAC,kBAAkB,CAAC;QACtD,IAAI,CAAC,qBAAqB,GAAG,OAAO,CAAC,oBAAoB,CAAC;QAC1D,IAAI,CAAC,mCAAmC,GAAG,OAAO,CAAC,mBAAmB,CAAC;QACvE,IAAI,CAAC,kBAAkB,GAAG,WAAW,IAAI,CAAC,mBAAmB,yBAAyB,CAAC;IACzF,CAAC;IAES,gBAAgB;QACxB,MAAM,YAAY,GAAa,CAAC,IAAI,CAAC,mBAAmB,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC;QAEtF,IAAI,IAAI,CAAC,mCAAmC,EAAE;YAC5C,YAAY,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;SACxC;QAED,OAAO,YAAY,CAAC;IACtB,CAAC;IAES,KAAK,CAAC,iCAAiC,CAC/C,QAAmB,EACnB,oBAA0C;QAE1C,MAAM,iBAAiB,GAAsB,IAAI,gCAAiB,CAChE,IAAI,CAAC,kBAAkB,EACvB,oBAAoB,CACrB,CAAC;QAEF,MAAM,QAAQ,GAAS,IAAI,IAAI,EAAE,CAAC;QAClC,MAAM,OAAO,GAAS,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,oBAAoB,CAAC,CAAC;QAClE,MAAM,GAAG,GAAwC,MAAM,iBAAiB,CAAC,oBAAoB,CAC3F,QAAQ,EACR,OAAO,CACR,CAAC;QAEF,MAAM,uBAAuB,GAA4B,IAAI,sCAAuB,EAAE,CAAC;QACvF,uBAAuB,CAAC,IAAI,GAAG,IAAI,CAAC;QACpC,uBAAuB,CAAC,KAAK,GAAG,IAAI,CAAC,mCAAmC,CAAC;QAEzE,MAAM,eAAe,GAAuB,IAAA,6CAA8B,EACxE;YACE,QAAQ,EAAE,QAAQ;YAClB,SAAS,EAAE,OAAO;YAClB,WAAW,EAAE,uBAAuB;YACpC,aAAa,EAAE,IAAI,CAAC,qBAAqB;SAC1C,EACD,GAAG,EACH,IAAI,CAAC,mBAAmB,CACzB,CAAC;QAEF,OAAO;YACL,gBAAgB,EAAE,eAAe,CAAC,QAAQ,EAAE;YAC5C,SAAS,EAAE,eAAe,CAAC,SAAS;SACrC,CAAC;IACJ,CAAC;CACF;AA/DD,gEA+DC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport type { DeviceCodeCredential } from '@azure/identity';\nimport {\n  BlobServiceClient,\n  ContainerSASPermissions,\n  generateBlobSASQueryParameters,\n  type SASQueryParameters,\n  type ServiceGetUserDelegationKeyResponse\n} from '@azure/storage-blob';\nimport type { ITerminal } from '@rushstack/node-core-library';\nimport {\n  AzureAuthenticationBase,\n  type ICredentialResult,\n  type IAzureAuthenticationBaseOptions\n} from './AzureAuthenticationBase';\n\n/**\n * @public\n */\nexport interface IAzureStorageAuthenticationOptions extends IAzureAuthenticationBaseOptions {\n  storageContainerName: string;\n  storageAccountName: string;\n  isCacheWriteAllowed: boolean;\n}\n\nconst SAS_TTL_MILLISECONDS: number = 7 * 24 * 60 * 60 * 1000; // Seven days\n\n/**\n * @public\n */\nexport class AzureStorageAuthentication extends AzureAuthenticationBase {\n  protected readonly _credentialNameForCache: string = 'azure-blob-storage';\n  protected readonly _credentialKindForLogging: string = 'Storage';\n\n  protected readonly _storageAccountName: string;\n  protected readonly _storageContainerName: string;\n  protected readonly _isCacheWriteAllowedByConfiguration: boolean;\n  protected readonly _storageAccountUrl: string;\n\n  public constructor(options: IAzureStorageAuthenticationOptions) {\n    super(options);\n    this._storageAccountName = options.storageAccountName;\n    this._storageContainerName = options.storageContainerName;\n    this._isCacheWriteAllowedByConfiguration = options.isCacheWriteAllowed;\n    this._storageAccountUrl = `https://${this._storageAccountName}.blob.core.windows.net/`;\n  }\n\n  protected _getCacheIdParts(): string[] {\n    const cacheIdParts: string[] = [this._storageAccountName, this._storageContainerName];\n\n    if (this._isCacheWriteAllowedByConfiguration) {\n      cacheIdParts.push('cacheWriteAllowed');\n    }\n\n    return cacheIdParts;\n  }\n\n  protected async _getCredentialFromDeviceCodeAsync(\n    terminal: ITerminal,\n    deviceCodeCredential: DeviceCodeCredential\n  ): Promise<ICredentialResult> {\n    const blobServiceClient: BlobServiceClient = new BlobServiceClient(\n      this._storageAccountUrl,\n      deviceCodeCredential\n    );\n\n    const startsOn: Date = new Date();\n    const expires: Date = new Date(Date.now() + SAS_TTL_MILLISECONDS);\n    const key: ServiceGetUserDelegationKeyResponse = await blobServiceClient.getUserDelegationKey(\n      startsOn,\n      expires\n    );\n\n    const containerSasPermissions: ContainerSASPermissions = new ContainerSASPermissions();\n    containerSasPermissions.read = true;\n    containerSasPermissions.write = this._isCacheWriteAllowedByConfiguration;\n\n    const queryParameters: SASQueryParameters = generateBlobSASQueryParameters(\n      {\n        startsOn: startsOn,\n        expiresOn: expires,\n        permissions: containerSasPermissions,\n        containerName: this._storageContainerName\n      },\n      key,\n      this._storageAccountName\n    );\n\n    return {\n      credentialString: queryParameters.toString(),\n      expiresOn: queryParameters.expiresOn\n    };\n  }\n}\n"]}