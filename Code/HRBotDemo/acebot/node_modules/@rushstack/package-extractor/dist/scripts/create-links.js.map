{"version":3,"file":"create-links.js","mappings":";;;;;;;;;;AAAA;;;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACyB;AACI;AAC7B;AACA;AACA;AACA;AACA,QAAQ,2CAAc;AACtB;AACA;AACA,QAAQ,2CAAc;AACtB;AACA;AACA,QAAQ,2CAAc;AACtB;AACA;AACA,QAAQ,wCAAW;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0CAAa;AACrB;AACA;AACA,uBAAuB,yCAAY;AACnC;AACA;AACA;AACA,IAAI,yCAAY;AAChB;AACA;AACA;AACA;AACA,4BAA4B,sCAAS;AACrC,YAAY,0CAAa;AACzB,YAAY,0CAAa;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,sCAAS;AACrC,+BAA+B,sCAAS;AACxC;AACA,qBAAqB,yCAAY;AACjC;AACA;AACA;AACA;AACA,wDAAwD,6BAA6B;AACrF;AACA;AACA;AACA;AACA;AACA,4CAA4C,6BAA6B;AACzE;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,6BAA6B;AACnF;AACA;AACA,oDAAoD,6BAA6B;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,sCAAS;AAC3C,SAAS,0CAAa;AACtB;AACA;AACA,kCAAkC,4CAAe;AACjD;AACA;AACA,gEAAgE,iBAAiB;AACjF;AACA;AACA;AACA;AACA,gEAAgE,iBAAiB;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wC","sources":["webpack://@rushstack/package-extractor/external node-commonjs \"fs\"","webpack://@rushstack/package-extractor/external node-commonjs \"path\"","webpack://@rushstack/package-extractor/webpack/bootstrap","webpack://@rushstack/package-extractor/webpack/runtime/compat get default export","webpack://@rushstack/package-extractor/webpack/runtime/define property getters","webpack://@rushstack/package-extractor/webpack/runtime/hasOwnProperty shorthand","webpack://@rushstack/package-extractor/webpack/runtime/make namespace object","webpack://@rushstack/package-extractor/./lib-esnext/scripts/create-links.js"],"sourcesContent":["module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n// THIS SCRIPT IS GENERATED BY THE \"rush deploy\" COMMAND.\n/* eslint-disable no-console */\nimport * as fs from 'fs';\nimport * as path from 'path';\n// API borrowed from @rushstack/node-core-library, since this script avoids using any\n// NPM dependencies.\nclass FileSystem {\n    static createSymbolicLinkJunction(options) {\n        fs.symlinkSync(options.linkTargetPath, options.newLinkPath, 'junction');\n    }\n    static createSymbolicLinkFile(options) {\n        fs.symlinkSync(options.linkTargetPath, options.newLinkPath, 'file');\n    }\n    static createSymbolicLinkFolder(options) {\n        fs.symlinkSync(options.linkTargetPath, options.newLinkPath, 'dir');\n    }\n    static createHardLink(options) {\n        fs.linkSync(options.linkTargetPath, options.newLinkPath);\n    }\n}\nfunction ensureFolder(folderPath) {\n    if (!folderPath) {\n        return;\n    }\n    if (fs.existsSync(folderPath)) {\n        return;\n    }\n    const parentPath = path.dirname(folderPath);\n    if (parentPath && parentPath !== folderPath) {\n        ensureFolder(parentPath);\n    }\n    fs.mkdirSync(folderPath);\n}\nfunction removeLinks(targetRootFolder, extractorMetadataObject) {\n    for (const linkInfo of extractorMetadataObject.links) {\n        // Link to the relative path for symlinks\n        const newLinkPath = path.join(targetRootFolder, linkInfo.linkPath);\n        if (fs.existsSync(newLinkPath)) {\n            fs.unlinkSync(newLinkPath);\n        }\n    }\n}\nfunction createLinks(targetRootFolder, extractorMetadataObject) {\n    for (const linkInfo of extractorMetadataObject.links) {\n        // Link to the relative path for symlinks\n        const newLinkPath = path.join(targetRootFolder, linkInfo.linkPath);\n        const linkTargetPath = path.join(targetRootFolder, linkInfo.targetPath);\n        // Make sure the containing folder exists\n        ensureFolder(path.dirname(newLinkPath));\n        // NOTE: This logic is based on NpmLinkManager._createSymlink()\n        if (process.platform === 'win32') {\n            if (linkInfo.kind === 'folderLink') {\n                // For directories, we use a Windows \"junction\".  On Unix, this produces a regular symlink.\n                FileSystem.createSymbolicLinkJunction({ newLinkPath, linkTargetPath });\n            }\n            else {\n                // For files, we use a Windows \"hard link\", because creating a symbolic link requires\n                // administrator permission.\n                // NOTE: We cannot use the relative path for hard links\n                FileSystem.createHardLink({ newLinkPath, linkTargetPath });\n            }\n        }\n        else {\n            // However hard links seem to cause build failures on Mac, so for all other operating systems\n            // we use symbolic links for this case.\n            if (linkInfo.kind === 'folderLink') {\n                FileSystem.createSymbolicLinkFolder({ newLinkPath, linkTargetPath });\n            }\n            else {\n                FileSystem.createSymbolicLinkFile({ newLinkPath, linkTargetPath });\n            }\n        }\n    }\n}\nfunction showUsage() {\n    console.log('Usage:');\n    console.log('  node create-links.js create');\n    console.log('  node create-links.js remove');\n    console.log('\\nCreates or removes the symlinks for the output folder created by \"rush deploy\".');\n    console.log('The link information is read from \"extractor-metadata.json\" in the same folder.');\n}\nfunction main() {\n    // Example: [ \"node.exe\", \"create-links.js\", \"\"create\" ]\n    const args = process.argv.slice(2);\n    if (args.length !== 1 || (args[0] !== 'create' && args[0] !== 'remove')) {\n        showUsage();\n        return false;\n    }\n    const targetRootFolder = __dirname;\n    const extractorMetadataPath = path.join(targetRootFolder, 'extractor-metadata.json');\n    if (!fs.existsSync(extractorMetadataPath)) {\n        throw new Error('Input file not found: ' + extractorMetadataPath);\n    }\n    const extractorMetadataJson = fs.readFileSync(extractorMetadataPath).toString();\n    const extractorMetadataObject = JSON.parse(extractorMetadataJson);\n    if (args[0] === 'create') {\n        console.log(`\\nCreating links for extraction at path \"${targetRootFolder}\"`);\n        removeLinks(targetRootFolder, extractorMetadataObject);\n        createLinks(targetRootFolder, extractorMetadataObject);\n    }\n    else {\n        console.log(`\\nRemoving links for extraction at path \"${targetRootFolder}\"`);\n        removeLinks(targetRootFolder, extractorMetadataObject);\n    }\n    console.log('The operation completed successfully.');\n    return true;\n}\ntry {\n    process.exitCode = 1;\n    if (main()) {\n        process.exitCode = 0;\n    }\n}\ncatch (error) {\n    console.log('ERROR: ' + error);\n}\n//# sourceMappingURL=create-links.js.map"],"names":[],"sourceRoot":""}