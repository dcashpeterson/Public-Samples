"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsalTokenProvider = void 0;
var tslib_1 = require("tslib");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var sp_diagnostics_1 = require("@microsoft/sp-diagnostics");
var msalLegacy_1 = require("msalLegacy"); /* v1.4.12 */
var Flights_1 = require("../../../../../common/Flights");
var AadConstants_1 = tslib_1.__importDefault(require("../../../../AadConstants"));
var AadErrorHandler_1 = require("../../../../AadErrorHandler");
var AadFlights_1 = require("../../../../AadFlights");
var AadTokenProvider_1 = tslib_1.__importStar(require("../../../../AadTokenProvider"));
var MsalInteractionManager_1 = require("../common/MsalInteractionManager");
var MsalRedirectManager_1 = require("../common/MsalRedirectManager");
var MsalUtilities_1 = require("../common/MsalUtilities");
var AadKillSwitches_1 = require("../../../../AadKillSwitches");
/**
 * Class that wraps the MSAL's authentication class
 * @internal
 */
var MsalTokenProvider = /** @class */ (function () {
    function MsalTokenProvider(configuration) {
        this._defaultConfiguration = configuration;
        this._requestMap = new Map();
        this._msalInstance = this._initializeMsalJs();
        this._allowedRedirectAttempts = (0, Flights_1.isIncreaseNumOfMSALAuthRedirectsFlightEnabled)() ? 13 : 7;
        var clientId = configuration.servicePrincipalId;
        var authority = configuration.aadInstanceUrl + '/' + configuration.aadTenantId;
        this._redirectManager = new MsalRedirectManager_1.MsalRedirectManager(authority, clientId, false);
    }
    MsalTokenProvider.prototype.getToken = function (resourceEndpoint, optionsOrUseCachedToken) {
        if (optionsOrUseCachedToken === void 0) { optionsOrUseCachedToken = true; }
        var options = optionsOrUseCachedToken && typeof optionsOrUseCachedToken === 'object'
            ? tslib_1.__assign({}, optionsOrUseCachedToken) : {
            useCachedToken: optionsOrUseCachedToken
        };
        return this.getTokenData(resourceEndpoint, options).then(function (tokenData) { return tokenData.accessToken; });
    };
    MsalTokenProvider.prototype.getTokenData = function (resourceEndpoint, optionsOrUseCachedToken, skipLoggingAndDisableRedirects) {
        var _this = this;
        if (optionsOrUseCachedToken === void 0) { optionsOrUseCachedToken = true; }
        if (skipLoggingAndDisableRedirects === void 0) { skipLoggingAndDisableRedirects = false; }
        var options = optionsOrUseCachedToken && typeof optionsOrUseCachedToken === 'object'
            ? optionsOrUseCachedToken
            : {
                useCachedToken: optionsOrUseCachedToken,
                skipLoggingAndDisableRedirects: skipLoggingAndDisableRedirects,
                claims: undefined
            };
        var claims = options.claims, _a = options.useCachedToken, useCachedToken = _a === void 0 ? true : _a, _b = options.skipLoggingAndDisableRedirects, shouldNotLogOrRedirect = _b === void 0 ? false : _b, scopes = options.scopes;
        var acquireAccessTokenDataQosMonitor;
        if ((0, AadFlights_1.isMsalBrowserFlightEnabled)()) {
            return this.getTokenDataV2(resourceEndpoint, {
                claims: claims,
                scopes: scopes,
                useCachedToken: useCachedToken,
                skipLoggingAndDisableRedirects: shouldNotLogOrRedirect
            });
        }
        var extraData = this._generateTelemetryExtraData();
        if (!shouldNotLogOrRedirect) {
            acquireAccessTokenDataQosMonitor = new sp_diagnostics_1._QosMonitor('MsalTokenProvider.GetTokenData');
        }
        if (extraData.isInternal) {
            extraData.name = resourceEndpoint;
        }
        // If you try to fetch a token without "logging in", MSAL will make a request to fetch both
        // an ID and ACCESS token in parallel. The problem with this is that the URL containing the tokens
        // will exceed 4K characters. IE and EDGE do not support this and will automatically drop off
        // trailing query parameters. MSAL team plans to eventually fix this on their end.
        var currentBrowser = sp_core_library_1._BrowserDetection.getBrowserInformation().browser;
        var acquireTokenDataPromise;
        if (currentBrowser === sp_core_library_1._Browser.IE || currentBrowser === sp_core_library_1._Browser.Edge) {
            acquireTokenDataPromise = this._loginSilent().then(function () {
                return _this._acquireTokenData(resourceEndpoint, claims, shouldNotLogOrRedirect);
            });
        }
        else {
            acquireTokenDataPromise = this._acquireTokenData(resourceEndpoint, claims, shouldNotLogOrRedirect);
        }
        extraData.CorrelationId = this._defaultConfiguration.spRequestGuid || sp_core_library_1.Guid.newGuid().toString();
        return acquireTokenDataPromise
            .then(function (tokenData) {
            extraData.alias = (!!tokenData.fromCache).toString();
            acquireAccessTokenDataQosMonitor === null || acquireAccessTokenDataQosMonitor === void 0 ? void 0 : acquireAccessTokenDataQosMonitor.writeSuccess(extraData);
            return tokenData;
        })
            .catch(function (error) {
            if (shouldNotLogOrRedirect) {
                throw error;
            }
            // acquireAccessTokenDataQosMonitor will exist as long as skipLoggingAndDisableRedirects is false
            if (_this._isExpectedFailure(error)) {
                acquireAccessTokenDataQosMonitor.writeExpectedFailure(error.errorCode, error, extraData);
            }
            else {
                _this._writeUnexpectedFailure(acquireAccessTokenDataQosMonitor, error.errorCode, error, extraData);
            }
            throw error;
        });
    };
    /**
     * Same behaviour as getTokenData() but modified to be compatible with MsalBrowserTokenProvider.
     *
     * To be compabitble with MsalBrowserTokenProvider it must:
     *   - Release control of MsalInteractionManager when skipLoggingAndDisableRedirects is true.
     *     - _handleAuthErrorsV2() will release control otherwise.
     */
    MsalTokenProvider.prototype.getTokenDataV2 = function (resourceEndpoint, options) {
        var _this = this;
        var _a = options.skipLoggingAndDisableRedirects, skipLoggingAndDisableRedirects = _a === void 0 ? false : _a, claims = options.claims, scopes = options.scopes;
        return MsalInteractionManager_1.MsalInteractionManager.acquireControl().then(function () {
            var acquireAccessTokenDataQosMonitor;
            var extraData = _this._generateTelemetryExtraData();
            if (!skipLoggingAndDisableRedirects) {
                acquireAccessTokenDataQosMonitor = new sp_diagnostics_1._QosMonitor('MsalTokenProvider.GetTokenData');
            }
            if (extraData.isInternal) {
                extraData.name = resourceEndpoint;
            }
            // If you try to fetch a token without "logging in", MSAL will make a request to fetch both
            // an ID and ACCESS token in parallel. The problem with this is that the URL containing the tokens
            // will exceed 4K characters. IE and EDGE do not support this and will automatically drop off
            // trailing query parameters. MSAL team plans to eventually fix this on their end.
            var currentBrowser = sp_core_library_1._BrowserDetection.getBrowserInformation().browser;
            var acquireTokenDataPromise;
            if (currentBrowser === sp_core_library_1._Browser.IE || currentBrowser === sp_core_library_1._Browser.Edge) {
                acquireTokenDataPromise = _this._loginSilent().then(function () {
                    return _this._acquireTokenData(resourceEndpoint, claims, skipLoggingAndDisableRedirects, scopes);
                });
            }
            else {
                acquireTokenDataPromise = _this._acquireTokenData(resourceEndpoint, claims, skipLoggingAndDisableRedirects, scopes);
            }
            extraData.CorrelationId = _this._defaultConfiguration.spRequestGuid || sp_core_library_1.Guid.newGuid().toString();
            return acquireTokenDataPromise
                .then(function (tokenData) {
                MsalInteractionManager_1.MsalInteractionManager.releaseControl();
                extraData.alias = (!!tokenData.fromCache).toString();
                acquireAccessTokenDataQosMonitor === null || acquireAccessTokenDataQosMonitor === void 0 ? void 0 : acquireAccessTokenDataQosMonitor.writeSuccess(extraData);
                return tokenData;
            })
                .catch(function (error) {
                if (skipLoggingAndDisableRedirects) {
                    MsalInteractionManager_1.MsalInteractionManager.releaseControl();
                    throw error;
                }
                // acquireAccessTokenDataQosMonitor will exist as long as skipLoggingAndDisableRedirects is false
                if (_this._isExpectedFailure(error)) {
                    acquireAccessTokenDataQosMonitor.writeExpectedFailure(error.errorCode, error, extraData);
                }
                else {
                    _this._writeUnexpectedFailure(acquireAccessTokenDataQosMonitor, error.errorCode, error, extraData);
                }
                throw error;
            });
        });
    };
    MsalTokenProvider.prototype._loginSilent = function () {
        // Represents the time it takes to fetch an id token.
        var getIdTokenQosMonitor = new sp_diagnostics_1._QosMonitor('MsalTokenProvider.GetIdToken');
        return this._loginSilentHelper(0, getIdTokenQosMonitor);
    };
    MsalTokenProvider.prototype._loginSilentHelper = function (attempt, getIdTokenQosMonitor) {
        var _this = this;
        var retryQosMonitor;
        if (attempt > 0) {
            retryQosMonitor = new sp_diagnostics_1._QosMonitor('MsalTokenProvider.RetryGetIdToken');
        }
        var extraData = this._generateTelemetryExtraData();
        var requestData = {
            authority: this._defaultConfiguration.aadInstanceUrl + '/' + this._defaultConfiguration.aadTenantId,
            correlationId: extraData.CorrelationId,
            loginHint: this._defaultConfiguration.userPrincipalName,
            scopes: [this._defaultConfiguration.servicePrincipalId]
        };
        if (attempt === 0) {
            requestData.sid = this._defaultConfiguration.aadSessionId;
            requestData.loginHint = undefined;
        }
        return this._msalInstance
            .acquireTokenSilent(requestData)
            .then(function (response) {
            // Using alias column to mark cache hits
            extraData.alias = (!!response.fromCache).toString();
            extraData.jsonExtraData = JSON.stringify(_this._requestMap.get(extraData.CorrelationId));
            getIdTokenQosMonitor.writeSuccess(extraData);
            return response.accessToken;
        })
            .catch(function (e) {
            extraData.jsonExtraData = JSON.stringify(_this._requestMap.get(extraData.CorrelationId));
            _this._writeUnexpectedFailure(retryQosMonitor, e.errorCode, e, extraData);
            if (AadErrorHandler_1.AadErrorHandler._isInteractionRequired(e.message, e.errorCode) && attempt < 1) {
                return _this._loginSilentHelper(++attempt, getIdTokenQosMonitor);
            }
            else {
                _this._handleAuthErrors(getIdTokenQosMonitor, e, extraData, _this._defaultConfiguration.servicePrincipalId);
            }
        });
    };
    MsalTokenProvider.prototype._acquireTokenData = function (resourceEndpoint, claims, skipLoggingAndDisableRedirects, scopes) {
        if (skipLoggingAndDisableRedirects === void 0) { skipLoggingAndDisableRedirects = false; }
        // Represents the time it takes to fetch an access token.
        var getAccessTokenQosMonitor;
        if (!skipLoggingAndDisableRedirects) {
            getAccessTokenQosMonitor = new sp_diagnostics_1._QosMonitor('MsalTokenProvider.GetAccessTokenData');
        }
        return this._acquireTokenDataHelper(resourceEndpoint, claims, 0, getAccessTokenQosMonitor, false, scopes);
    };
    MsalTokenProvider.prototype._acquireTokenDataHelper = function (resourceEndpoint, claims, attempt, getAccessTokenQosMonitor, useLoginHint, scopes) {
        var _this = this;
        if (useLoginHint === void 0) { useLoginHint = false; }
        var retryQosMonitor;
        if (attempt > 0) {
            if (useLoginHint) {
                retryQosMonitor = new sp_diagnostics_1._QosMonitor('MsalTokenProvider.RetryLoginHintGetAccessToken');
            }
            else {
                retryQosMonitor = new sp_diagnostics_1._QosMonitor('MsalTokenProvider.RetryGetAccessToken');
            }
        }
        var extraData = this._generateTelemetryExtraData();
        var requestData = tslib_1.__assign({ authority: this._defaultConfiguration.aadInstanceUrl + '/' + this._defaultConfiguration.aadTenantId, correlationId: extraData.CorrelationId, loginHint: this._defaultConfiguration.userPrincipalName, scopes: scopes || [resourceEndpoint + '/.default'] }, (claims
            ? {
                claimsRequest: claims
            }
            : {}));
        if (!useLoginHint) {
            requestData.sid = this._defaultConfiguration.aadSessionId;
            requestData.loginHint = undefined;
        }
        return this._msalInstance
            .acquireTokenSilent(requestData)
            .then(function (response) {
            // If we are successfully fetching a token after a full page redirect we want to log it so
            // we can understand how often customers experience a full page redirect.
            if (!(0, AadKillSwitches_1.isLogAfterFullPageRedirectKSActivated)() &&
                _this._getNumberOfAttemptsInLastMinute() === 1 &&
                !_this._getLoggedFullPageRedirect()) {
                _this._setLoggedFullPageRedirect();
                var fullPageRedirect = new sp_diagnostics_1._QosMonitor('MsalTokenProvider.FullPageRedirect');
                fullPageRedirect.writeSuccess();
            }
            // Using alias column to mark cache hits
            extraData.alias = (!!response.fromCache).toString();
            extraData.jsonExtraData = JSON.stringify(_this._requestMap.get(extraData.CorrelationId));
            getAccessTokenQosMonitor === null || getAccessTokenQosMonitor === void 0 ? void 0 : getAccessTokenQosMonitor.writeSuccess(extraData);
            retryQosMonitor === null || retryQosMonitor === void 0 ? void 0 : retryQosMonitor.writeSuccess(extraData);
            return response;
        })
            .catch(function (e) {
            extraData.jsonExtraData = JSON.stringify(_this._requestMap.get(extraData.CorrelationId));
            _this._writeUnexpectedFailure(retryQosMonitor, e.errorCode, e, extraData);
            // We only want to retry once for network issues as the failure could be due to many different reasons
            // and retry could help fix the issue
            if ((AadErrorHandler_1.AadErrorHandler._isTokenRenewalTimeout(e.errorCode) && attempt < 1) ||
                (AadErrorHandler_1.AadErrorHandler._isEndpointsResolutionError(e.errorCode) && attempt < 1)) {
                return _this._acquireTokenDataHelper(resourceEndpoint, claims, ++attempt, getAccessTokenQosMonitor, false, scopes);
            }
            else if (_this._defaultConfiguration.userPrincipalName &&
                (AadErrorHandler_1.AadErrorHandler._isInteractionRequired(e.message, e.errorCode) || _this._isUserLoginError(e)) &&
                attempt < 1) {
                return _this._acquireTokenDataHelper(resourceEndpoint, claims, ++attempt, getAccessTokenQosMonitor, true, scopes);
            }
            else {
                if (getAccessTokenQosMonitor) {
                    if (AadErrorHandler_1.AadErrorHandler._isInteractionRequired(e.message, e.errorCode) &&
                        (0, AadFlights_1.isAadTokenProviderPopupFlowV1Enabled)() &&
                        _this._defaultConfiguration.isMsalTokenProviderPopupEnabled) {
                        extraData.shouldTryTokenByPopup = true;
                        _this._pendingPopup = _this._acquireTokenPopup(getAccessTokenQosMonitor, resourceEndpoint, claims, extraData);
                        if (_this._pendingPopup) {
                            return _this._pendingPopup;
                        }
                        else {
                            throw new Error('_acquireTokenPopup Failed - pendingPopup undefined');
                        }
                    }
                    else {
                        _this._handleAuthErrors(getAccessTokenQosMonitor, e, extraData, resourceEndpoint);
                    }
                }
                else {
                    throw e;
                }
            }
        });
    };
    MsalTokenProvider.prototype._initializeMsalJs = function () {
        var _this = this;
        var configuration;
        if (sp_core_library_1._SPFlight.isEnabled(467)) {
            configuration = {
                auth: {
                    clientId: this._defaultConfiguration.servicePrincipalId,
                    navigateToLoginRequestUrl: true,
                    redirectUri: this._defaultConfiguration.redirectUri,
                    validateAuthority: false,
                    authority: this._defaultConfiguration.aadInstanceUrl + '/' + this._defaultConfiguration.aadTenantId
                },
                system: {
                    loadFrameTimeout: 10000,
                    navigateFrameWait: 0
                }
            };
        }
        else {
            configuration = {
                auth: {
                    clientId: this._defaultConfiguration.servicePrincipalId,
                    navigateToLoginRequestUrl: false,
                    redirectUri: this._defaultConfiguration.redirectUri,
                    validateAuthority: false
                },
                system: {
                    loadFrameTimeout: 10000,
                    navigateFrameWait: 0
                }
            };
        }
        configuration.system.telemetry = {
            applicationName: this._defaultConfiguration.servicePrincipalId,
            applicationVersion: '1.0',
            telemetryEmitter: function (events) {
                var key = '';
                var value = {};
                events.forEach(function (event) {
                    if (event['msal.event_name'] === 'msal.api_event') {
                        key = event['Microsoft.MSAL.correlation_id'];
                        value = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, value), _this._requestMap.get(key)), event);
                    }
                    else if (event['msal.event_name'] === 'msal.default_event') {
                        value = tslib_1.__assign(tslib_1.__assign({}, value), { 'msal.effective_connection_speed': event['msal.effective_connection_speed'] });
                    }
                });
                _this._requestMap.set(key, value);
            }
        };
        if ((0, MsalUtilities_1.shouldPrintMsalLogsToConsole)()) {
            configuration.system.logger = new msalLegacy_1.Logger(function (logLevel, message, containsPii) {
                // eslint-disable-next-line no-console
                console.log("[sp-http][msal.js][LogLevel:".concat(logLevel, "]: ").concat(message));
            }, {
                level: msalLegacy_1.LogLevel.Verbose,
                piiLoggingEnabled: true
            });
        }
        return new msalLegacy_1.UserAgentApplication(configuration);
    };
    MsalTokenProvider.prototype._generateTelemetryExtraData = function () {
        // alias is being used to detect cache hits
        // manifestId is used to save msal perf data
        return {
            alias: 'false',
            CorrelationId: sp_core_library_1.Guid.newGuid().toString(),
            isInternal: this._defaultConfiguration.servicePrincipalId === AadConstants_1.default.PRE_AUTHORIZED_APP_PRINCIPAL_ID,
            jsonExtraData: '',
            msalVersion: '1.4.12'
        };
    };
    MsalTokenProvider.prototype._cancelRedirect = function () {
        this._redirectCancelled = true;
    };
    MsalTokenProvider.prototype._handleAuthErrors = function (monitor, error, extraData, resourceEndpoint) {
        var _this = this;
        if ((0, AadFlights_1.isMsalBrowserFlightEnabled)()) {
            return this._handleAuthErrorsV2(monitor, error, extraData, resourceEndpoint);
        }
        var userAgentString = sp_core_library_1._BrowserDetection.getBrowserInformation().userAgent || '';
        // Will remove this flight check when MSAL provides an API for handling MFA.
        if (sp_core_library_1._SPFlight.isEnabled(467) /* Allow MSAL to prompt the end user for MFA errors */ &&
            sp_core_library_1._Browser.IE !== sp_core_library_1._BrowserDetection.getBrowserInformation().browser &&
            (AadErrorHandler_1.AadErrorHandler._isInteractionRequired(error.message, error.errorCode) ||
                this._isUserLoginError(error))) {
            // To prevent infinite redirect loops we want to only allow 3 redirects with 1 minute
            var currDate = new Date();
            var attemptNumber = 1;
            var foundPreviousAttempt = false;
            attemptNumber = this._getNumberOfAttemptsInLastMinute() + 1;
            if (attemptNumber > 1) {
                foundPreviousAttempt = true;
            }
            if (!foundPreviousAttempt) {
                window.sessionStorage.setItem('msalRedirectFirstAttempTime', currDate.toString());
            }
            // We want to limit the number of attempts to prevent infinite redirects which would just trigger blinking.
            if (attemptNumber < this._allowedRedirectAttempts) {
                monitor.writeExpectedFailure(error.errorCode, error, extraData);
                window.sessionStorage.setItem('msalRedirectAttempNumber', attemptNumber.toString());
                window.sessionStorage.setItem('msalRedirectClientId', this._defaultConfiguration.servicePrincipalId);
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                var onRedirectNavigate = function (url) {
                    _this._redirectCancelled = false;
                    if (!(0, AadKillSwitches_1.isPreventInfiniteRefreshViaReadingFromSessionStorageKSActivated)()) {
                        // Check if the request for the given resource has already failed
                        // if so, prevent a redirect if that request failed less than a minute ago
                        window.sessionStorage.setItem('resourceEndpoint', resourceEndpoint);
                        // eslint-disable-next-line @typescript-eslint/no-explicit-any
                        var previousFailedResourceRequest = window.sessionStorage.getItem("".concat(resourceEndpoint, "_failedResourceRequest"));
                        if (previousFailedResourceRequest) {
                            try {
                                var previousFailedResourceRequestTimeStamp = new Date(JSON.parse(previousFailedResourceRequest));
                                var oneMinuteInterval = 60000;
                                if (previousFailedResourceRequestTimeStamp > new Date(Date.now() - oneMinuteInterval)) {
                                    extraData.jsonExtraData += "Redirect loop stopped. 3rd party cookies are blocked and the appropriate API access has not been granted by the tenant admin";
                                    monitor.writeExpectedFailure(error.errorCode, error, extraData);
                                    return false;
                                }
                            }
                            catch (err) {
                                extraData.jsonExtraData += "Error parsing session variable of ".concat(resourceEndpoint, "_failedResourceRequest to JSON");
                                monitor.writeUnexpectedFailure(error.errorCode, error, extraData);
                            }
                        }
                    }
                    sp_core_library_1._SPEventManager.instance.raiseEvent(AadTokenProvider_1.default._onBeforeRedirectEventId, new AadTokenProvider_1.BeforeRedirectEventArgs(url, _this._cancelRedirect.bind(_this)));
                    // If we are in tab cancel the redirect.
                    if (window.sessionStorage.getItem('_isRunningTABTest') === 'true') {
                        _this._redirectCancelled = true;
                    }
                    return !_this._redirectCancelled;
                };
                var msalAuthParameters = {
                    authority: this._defaultConfiguration.aadInstanceUrl + '/' + this._defaultConfiguration.aadTenantId,
                    correlationId: extraData.CorrelationId,
                    scopes: [resourceEndpoint + '/.default'],
                    state: window.location.href,
                    onRedirectNavigate: onRedirectNavigate
                };
                if (this._defaultConfiguration.userPrincipalName) {
                    msalAuthParameters.loginHint = this._defaultConfiguration.userPrincipalName;
                }
                if (!this._defaultConfiguration.userPrincipalName && !this._msalInstance.getAccount()) {
                    var loginAuthParameters = {
                        authority: this._defaultConfiguration.aadInstanceUrl + '/' + this._defaultConfiguration.aadTenantId,
                        correlationId: extraData.CorrelationId,
                        scopes: [resourceEndpoint + '/.default'],
                        redirectUri: this._defaultConfiguration.redirectUri,
                        state: window.location.href
                    };
                    loginAuthParameters.onRedirectNavigate = onRedirectNavigate;
                    this._msalInstance.loginRedirect(loginAuthParameters);
                }
                else {
                    this._msalInstance.acquireTokenRedirect(msalAuthParameters);
                }
            }
            else {
                this._writeUnexpectedFailure(monitor, error.errorCode, error, extraData);
            }
        }
        else if (AadErrorHandler_1.AadErrorHandler._doesAadErrorCodeExist(error.message, AadConstants_1.default.EXPECTED_AAD_ERRORS) ||
            userAgentString.indexOf('TabStop/1.0') > -1 // MSAL Implicit seems to have issues with test infra.
        ) {
            monitor.writeExpectedFailure(error.errorCode, error, extraData);
        }
        else {
            this._writeUnexpectedFailure(monitor, error.errorCode, error, extraData);
        }
        throw error;
    };
    /**
     * Same behaviour as _handleAuthErrors() but modified to be compatible with MsalBrowserTokenProvider.
     *
     * To be compabitble with MsalBrowserTokenProvider it must:
     *   - Coordinate redirects using MsalRedirectManager.
     *
     *   - Release control of MsalInteractionManager if not redirecting.
     * Note: This method is NOT called when skipLoggingAndDisableRedirects is true.
     *       The caller should ensure that MsalInteractionManager release's control is invoked
     *       when skipLoggingAndDisableRedirects is true.
     */
    MsalTokenProvider.prototype._handleAuthErrorsV2 = function (monitor, error, extraData, resourceEndpoint) {
        var _this = this;
        var userAgentString = sp_core_library_1._BrowserDetection.getBrowserInformation().userAgent || '';
        if (sp_core_library_1._Browser.IE !== sp_core_library_1._BrowserDetection.getBrowserInformation().browser &&
            (AadErrorHandler_1.AadErrorHandler._isInteractionRequired(error.message, error.errorCode) ||
                this._isUserLoginError(error))) {
            if (this._redirectManager.isAllowedToRedirect()) {
                monitor.writeExpectedFailure(error.errorCode, error, extraData);
                this._redirectManager.prepareForRedirect();
                /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
                var onRedirectNavigate = function (url) {
                    _this._redirectCancelled = false;
                    sp_core_library_1._SPEventManager.instance.raiseEvent(AadTokenProvider_1.default._onBeforeRedirectEventId, new AadTokenProvider_1.BeforeRedirectEventArgs(url, _this._cancelRedirect.bind(_this)));
                    /* If we are in tab cancel the redirect. */
                    if (window.sessionStorage.getItem('_isRunningTABTest') === 'true') {
                        _this._redirectCancelled = true;
                    }
                    if (_this._redirectCancelled) {
                        _this._redirectManager.cancelRedirect();
                    }
                    return !_this._redirectCancelled;
                };
                var msalAuthParameters = {
                    authority: this._defaultConfiguration.aadInstanceUrl + '/' + this._defaultConfiguration.aadTenantId,
                    correlationId: extraData.CorrelationId,
                    scopes: [resourceEndpoint + '/.default'],
                    state: window.location.href,
                    onRedirectNavigate: onRedirectNavigate
                };
                if (this._defaultConfiguration.userPrincipalName) {
                    msalAuthParameters.loginHint = this._defaultConfiguration.userPrincipalName;
                }
                if (!this._defaultConfiguration.userPrincipalName && !this._msalInstance.getAccount()) {
                    var loginAuthParameters = {
                        authority: this._defaultConfiguration.aadInstanceUrl + '/' + this._defaultConfiguration.aadTenantId,
                        correlationId: extraData.CorrelationId,
                        scopes: [resourceEndpoint + '/.default'],
                        redirectUri: this._defaultConfiguration.redirectUri,
                        state: window.location.href
                    };
                    loginAuthParameters.onRedirectNavigate = onRedirectNavigate;
                    this._msalInstance.loginRedirect(loginAuthParameters);
                }
                else {
                    this._msalInstance.acquireTokenRedirect(msalAuthParameters);
                }
            }
            else {
                this._writeUnexpectedFailure(monitor, error.errorCode, error, extraData);
                MsalInteractionManager_1.MsalInteractionManager.releaseControl();
            }
        }
        else if (AadErrorHandler_1.AadErrorHandler._doesAadErrorCodeExist(error.message, AadConstants_1.default.EXPECTED_AAD_ERRORS) ||
            userAgentString.indexOf('TabStop/1.0') > -1 /* MSAL Implicit seems to have issues with test infra. */) {
            monitor.writeExpectedFailure(error.errorCode, error, extraData);
            MsalInteractionManager_1.MsalInteractionManager.releaseControl();
        }
        else {
            this._writeUnexpectedFailure(monitor, error.errorCode, error, extraData);
            MsalInteractionManager_1.MsalInteractionManager.releaseControl();
        }
        throw error;
    };
    /**
     * This is a ClientAuthError that is raised when user login to the MSAL library is required.
     *
     * This specifically happens when we attempt to acquireTokenSilent() without sid or login_hint.
     * Allowing handleAuthErrors() to perform a full-page redirect resolves this.
     */
    MsalTokenProvider.prototype._isUserLoginError = function (error) {
        var MSAL_USER_LOGIN_REQUIRED_ERROR_CODE = 'user_login_error';
        var isUserLoginRequiredError = error.errorCode === MSAL_USER_LOGIN_REQUIRED_ERROR_CODE;
        return isUserLoginRequiredError;
    };
    MsalTokenProvider.prototype._isExpectedFailure = function (error) {
        var doesAadErrorCodeExist = AadErrorHandler_1.AadErrorHandler._doesAadErrorCodeExist(error.message, AadConstants_1.default.EXPECTED_AAD_ERRORS);
        var userAgentString = sp_core_library_1._BrowserDetection.getBrowserInformation().userAgent || '';
        var isTabStopTest = userAgentString.indexOf('TabStop/1.0') > -1;
        var isUserLoginError = this._isUserLoginError(error);
        var isInteractionRequiredError = AadErrorHandler_1.AadErrorHandler._isInteractionRequired(error.message, error.errorCode);
        var hasMoreRetries = this._getNumberOfAttemptsInLastMinute() < this._allowedRedirectAttempts;
        var isRetryableError = (isUserLoginError || isInteractionRequiredError) && hasMoreRetries;
        return doesAadErrorCodeExist || isTabStopTest || isRetryableError;
    };
    MsalTokenProvider.prototype._getNumberOfAttemptsInLastMinute = function () {
        var numberOfAttempts = 0;
        var oneMinuteInMs = 60 * 1000;
        var firstRedirectTime = window.sessionStorage.getItem('msalRedirectFirstAttempTime');
        if (firstRedirectTime) {
            var currDate = new Date();
            var firstRedirectDate = new Date(firstRedirectTime);
            if (currDate.getTime() - firstRedirectDate.getTime() < oneMinuteInMs) {
                var attemptCountString = window.sessionStorage.getItem('msalRedirectAttempNumber') || '0';
                numberOfAttempts = parseInt(attemptCountString, 10);
            }
        }
        return numberOfAttempts;
    };
    MsalTokenProvider.prototype._getLoggedFullPageRedirect = function () {
        var loggedRedirect = window.sessionStorage.getItem('msalLoggedFullPageRedirect');
        if (loggedRedirect) {
            return true;
        }
        return false;
    };
    MsalTokenProvider.prototype._setLoggedFullPageRedirect = function () {
        window.sessionStorage.setItem('msalLoggedFullPageRedirect', 'true');
    };
    /**
     * This method wraps QoSMonitor's writeUnexpectedFailure method with specific behaviour for IE.
     *
     * M365 has dropped support for IE and we no longer want to count IE failures against our
     * reliability statistics. If an unexpected error is raised by IE, then this method will
     * instead log it as an expected error.
     *
     * This method intentionally has the same signature as QoSMonitor.writeUnexpectedFailure,
     * so tslint no-any is disabled for extraData.
     *
     * TODO: Replace with MsalMonitor.
     */
    MsalTokenProvider.prototype._writeUnexpectedFailure = function (monitor, tagNameSuffix, error, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    extraData) {
        var currentBrowser = sp_core_library_1._BrowserDetection.getBrowserInformation().browser;
        if (currentBrowser === sp_core_library_1._Browser.IE) {
            monitor === null || monitor === void 0 ? void 0 : monitor.writeExpectedFailure(tagNameSuffix, error, extraData);
        }
        else {
            monitor === null || monitor === void 0 ? void 0 : monitor.writeUnexpectedFailure(tagNameSuffix, error, extraData);
        }
    };
    /**
     *
     * @returns
     */
    MsalTokenProvider.prototype._acquireTokenPopup = function (authMonitor, resourceEndpoint, claims, extraData) {
        var _this = this;
        var popupMonitor = new sp_diagnostics_1._QosMonitor('MsalTokenProvider.Popup'
        /*shouldNotLogOrRedirect */
        );
        var resolveAuthData;
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var rejectAuthData;
        var requestPopup = function () {
            if (_this._pendingPopup) {
                return;
            }
            _this._pendingPopup = new Promise(function (resolve, 
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            reject) {
                resolveAuthData = resolve;
                rejectAuthData = reject;
            });
        };
        var cancel = function (error) {
            if (!_this._pendingPopup) {
                requestPopup();
            }
            _this._popupCancelled = true;
            if (rejectAuthData) {
                rejectAuthData(error);
            }
        };
        var showPopup = function () {
            if (!_this._pendingPopup) {
                requestPopup();
            }
            if (resolveAuthData) {
                resolveAuthData(_this._loginByPopup(resourceEndpoint, claims, extraData)
                    .then(function (authResult) {
                    extraData.alias = (!!authResult.fromCache).toString();
                    popupMonitor.writeSuccess(extraData);
                    authMonitor.writeSuccess(extraData);
                    return authResult;
                })
                    .catch(function (error) {
                    if (_this._isExpectedFailure(error)) {
                        popupMonitor.writeExpectedFailure(error.errorCode, error, extraData);
                        authMonitor.writeExpectedFailure(error.errorCode, error, extraData);
                    }
                    else {
                        popupMonitor.writeUnexpectedFailure(error.errorCode, error, extraData);
                        authMonitor.writeUnexpectedFailure(error.errorCode, error, extraData);
                    }
                    return Promise.reject(error);
                }));
            }
        };
        sp_core_library_1._SPEventManager.instance.raiseEvent(AadTokenProvider_1.default._popupEventId, new AadTokenProvider_1.PopupEventArgs(cancel, requestPopup, showPopup));
        if (!this._popupCancelled) {
            showPopup();
        }
        if (this._pendingPopup) {
            return this._pendingPopup;
        }
    };
    MsalTokenProvider.prototype._loginByPopup = function (resourceEndpoint, claims, extraData) {
        var authParameters = tslib_1.__assign({ authority: this._defaultConfiguration.aadInstanceUrl + '/' + this._defaultConfiguration.aadTenantId, correlationId: extraData.CorrelationId, scopes: [resourceEndpoint + '/.default'], state: window.location.href }, (claims
            ? {
                claimsRequest: claims
            }
            : {}));
        if (!this._defaultConfiguration.userPrincipalName && !this._msalInstance.getAccount()) {
            authParameters.redirectUri = this._defaultConfiguration.redirectUri;
            return this._msalInstance.loginPopup(authParameters);
        }
        else {
            authParameters.loginHint = this._defaultConfiguration.userPrincipalName;
            return this._msalInstance.acquireTokenPopup(authParameters);
        }
    };
    return MsalTokenProvider;
}());
exports.MsalTokenProvider = MsalTokenProvider;
//# sourceMappingURL=MsalTokenProvider.js.map