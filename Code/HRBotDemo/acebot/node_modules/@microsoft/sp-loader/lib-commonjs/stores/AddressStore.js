"use strict";
// Copyright (c) Microsoft. All rights reserved.
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Stores the address for each module by its normalized name.
 * This is used for SystemJS to know how to locate each module.
 */
var AddressStore = /** @class */ (function () {
    function AddressStore() {
    }
    /**
     * Returns an address for a module, given its normalized name.
     * @param normalizedName - Normalized name
     */
    AddressStore.tryGetAddress = function (normalizedName) {
        return this._addressMap.get(normalizedName);
    };
    /**
     * Returns the normalized name for a given address.
     * If the address hasn't been set in the AddressStore, it returns undefined
     * @param integrityPath - Address
     */
    AddressStore.getNormalizedName = function (integrityPath) {
        var path = integrityPath.path;
        return this._reverseAddressMap.get(path);
    };
    /**
     * Set a mapping from a module's normalized name to the module address.
     *
     * @remarks
     * If the address has been set for a previous module's normalized name, when searching for that address
     * the original module's normalized name will be returned.
     * @param normalizedName - Module normalized name
     * @param integrityPath - Module address
     */
    AddressStore.set = function (normalizedName, integrityPath) {
        // Multiple normalized names can point to the same address
        if (!this._addressMap.has(normalizedName)) {
            this._addressMap.set(normalizedName, integrityPath);
        }
        // An address can point only to one normalized name
        // For implementation purposes, this is the first one that is registered
        // RequireJsLoader.configure handles this case
        var path = integrityPath.path;
        if (!this._reverseAddressMap.has(path)) {
            this._reverseAddressMap.set(path, normalizedName);
        }
    };
    /**
     * Map from normalized name to address
     */
    AddressStore._addressMap = new Map();
    AddressStore._reverseAddressMap = new Map();
    return AddressStore;
}());
exports.default = AddressStore;
//# sourceMappingURL=AddressStore.js.map