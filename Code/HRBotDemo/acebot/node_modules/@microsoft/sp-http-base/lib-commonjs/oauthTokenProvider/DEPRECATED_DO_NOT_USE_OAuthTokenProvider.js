"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var OAuthUtilityContext_1 = tslib_1.__importDefault(require("./OAuthUtilityContext"));
var sp_core_library_1 = require("@microsoft/sp-core-library");
/**
 * This class allows one to obtain OAuth tokens
 *
 * OAuth tokens are used to authenticate the user from the sharepoint page
 * to other services such as PowerBI, Sway, Exchange, Yammer, etc.
 *
 * @internal @deprecated Please use AADTokenProvider instead.
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
var DEPRECATED_DO_NOT_USE_OAuthTokenProvider = /** @class */ (function () {
    function DEPRECATED_DO_NOT_USE_OAuthTokenProvider(serviceScope) {
        this._serviceScope = serviceScope;
    }
    DEPRECATED_DO_NOT_USE_OAuthTokenProvider.prototype.getOAuthToken = function (resource, webUrl, tokenType, info) {
        sp_core_library_1.Validate.isNotNullOrUndefined(resource, 'resource');
        sp_core_library_1.Validate.isNonemptyString(resource, 'resource');
        return this._getTokenUtility().then(function (tokenUtility) {
            return tokenUtility.getOAuthToken(resource, webUrl, tokenType, info);
        });
    };
    /**
     * Clears the token from a given resource from the internal cache. If there is no token
     * cached for the resource the method does nothing.
     *
     * @param resource - resource for which the token should be cleared from the cache
     */
    DEPRECATED_DO_NOT_USE_OAuthTokenProvider.prototype.clearCachedToken = function (resource, tokenType) {
        sp_core_library_1.Validate.isNotNullOrUndefined(resource, 'resource');
        sp_core_library_1.Validate.isNonemptyString(resource, 'resource');
        this._getTokenUtility()
            .then(function (tokenUtility) { return tokenUtility.clearCachedToken(resource, tokenType); })
            .catch(function (e) {
            throw e;
        });
    };
    /**
     * Returns the token utility singleton
     */
    DEPRECATED_DO_NOT_USE_OAuthTokenProvider.prototype._getTokenUtility = function () {
        var _this = this;
        if (!this._tokenUtility) {
            this._tokenUtility = Promise.resolve().then(function () { return tslib_1.__importStar(require('@ms/sp-client-shared' /* webpackChunkName: 'ms-client-shared' */)); }).then(function (msClientSharedModule) {
                return new msClientSharedModule.OAuthUtility(new OAuthUtilityContext_1.default(_this._serviceScope));
            });
        }
        return this._tokenUtility;
    };
    /**
     * The service key for OAuthTokenProvider.
     */
    DEPRECATED_DO_NOT_USE_OAuthTokenProvider.serviceKey = sp_core_library_1.ServiceKey.create('sp-client-shared:DEPRECATED_DO_NOT_USE_OAuthTokenProvider', DEPRECATED_DO_NOT_USE_OAuthTokenProvider);
    return DEPRECATED_DO_NOT_USE_OAuthTokenProvider;
}());
exports.default = DEPRECATED_DO_NOT_USE_OAuthTokenProvider;
//# sourceMappingURL=DEPRECATED_DO_NOT_USE_OAuthTokenProvider.js.map