"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var ComponentStore_1 = tslib_1.__importDefault(require("../stores/ComponentStore"));
var ManifestStore_1 = tslib_1.__importDefault(require("../stores/ManifestStore"));
var ComponentOverrider = /** @class */ (function () {
    function ComponentOverrider() {
    }
    /**
     * Given a component id and a component module, it sets the component in the loader, therefore being
     * available without the need of loading it separately.
     * Should only be used when initializing the loader.
     *
     * @param componentId - Id of the component to override. There should be only one version of the component.
     * @param componentVersion - Version of the component to override.
     * @param componentModule - Component module.
     */
    ComponentOverrider.overrideComponent = function (componentId, componentVersion, componentModule, serviceScope, moduleLoaderServiceKey) {
        sp_core_library_1.Validate.isNonemptyString(componentId, 'componentId');
        sp_core_library_1.Validate.isNotNullOrUndefined(componentModule, 'componentModule');
        var manifest = ManifestStore_1.default.instance.tryGetManifest(componentId, componentVersion);
        // VSO bug 295355 makes it possible that manifest for odspUtilitiesBundle may not exist.
        if (!manifest) {
            return;
        }
        serviceScope.consume(moduleLoaderServiceKey).ensure(manifest, componentModule);
        ComponentStore_1.default.instance.storeLoadedComponent(manifest.id, manifest.version, componentModule);
    };
    return ComponentOverrider;
}());
exports.default = ComponentOverrider;
//# sourceMappingURL=ComponentOverrider.js.map