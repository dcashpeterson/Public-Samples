/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  buildManifestsJs: () => (/* binding */ buildManifestsJs)
});

;// CONCATENATED MODULE: external "@rushstack/node-core-library/lib/FileSystem"
const FileSystem_namespaceObject = require("@rushstack/node-core-library/lib/FileSystem");
;// CONCATENATED MODULE: external "path"
const external_path_namespaceObject = require("path");
var external_path_default = /*#__PURE__*/__webpack_require__.n(external_path_namespaceObject);
;// CONCATENATED MODULE: ./lib/manifests-file-bundled/bundled.js?raw
const bundledraw_namespaceObject = "(()=>{\"use strict\";var e={};e.g=function(){if(\"object\"==typeof globalThis)return globalThis;try{return this||new Function(\"return this\")()}catch(e){if(\"object\"==typeof window)return window}}(),(()=>{var t;e.g.importScripts&&(t=e.g.location+\"\");var n=e.g.document;if(!t&&n&&(n.currentScript&&(t=n.currentScript.src),!t)){var a=n.getElementsByTagName(\"script\");if(a.length)for(var i=a.length-1;i>-1&&!t;)t=a[i--].src}if(!t)throw new Error(\"Automatic publicPath is not supported in this browser\");t=t.replace(/#.*$/,\"\").replace(/\\?.*$/,\"\").replace(/\\/[^\\/]+$/,\"/\"),e.p=t})();var t=MANIFESTS_ARRAY_PROXY;function n(e){e=e.replace(/[\\[]/,\"\\\\[\").replace(/[\\]]/,\"\\\\]\");var t=new RegExp(\"[\\\\?&]\"+e+\"=([^&#]*)\").exec(window.location.search);return null===t?\"\":decodeURIComponent(t[1].replace(/\\+/g,\" \"))}var a={_metadata:MANIFESTS_FILE_METADATA,getManifests:function(){var a=JSON.parse(JSON.stringify(t),function(e,t){if(\"paths\"===e){for(var n=t,a={},i=0,r=Object.entries(n.l);i<r.length;i++){var o=r[i],s=o[0],c=o[1],d=void 0,l=void 0,u=!1,f=void 0;\"string\"==typeof c?l=c:(u=!0,l=c[0],f=c[1]),d=n.p+l+n.s,u&&(d={path:d,integrity:f}),a[s]=d}return a}return t}),i=DEPLOYED_ASSET_PATH_OVERRIDE||e.p,r=n(\"market\")||n(\"locale\");r&&(r=r.toLowerCase()),i||console.error(\"Unable to determine \".concat(MANIFESTS_FILE_NAME,\" file URL. Using default base URL. \")+'This is expected if you are running \"gulp serve.\"');for(var o=0,s=a;o<s.length;o++){var c=s[o].loaderConfig;if(i&&(c.internalModuleBaseUrls&&0!==c.internalModuleBaseUrls.length||(c.internalModuleBaseUrls=[i])),r)for(var d=c.scriptResources,l=0,u=Object.keys(d);l<u.length;l++){var f=d[u[l]];if(\"localizedPath\"===f.type){var p=f,m=p.paths;if(m)for(var _=0,h=Object.keys(m);_<h.length;_++){var b=h[_];if(b.toLowerCase()===r){p.defaultPath=m[b],delete p.paths;break}}}}}return a}};self.debugManifests=a,define([],function(){return a})})();";
;// CONCATENATED MODULE: ./lib/ManifestsFileBuilder.js
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};



function buildManifestsJs(options) {
    return __awaiter(this, void 0, void 0, function () {
        var manifestsArray, outputFilePath, azurePathOverride, manifestsJsFileMetadata, formattedManifests, outputFileName, filledTemplate;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    manifestsArray = options.manifestsArray, outputFilePath = options.outputFilePath, azurePathOverride = options.azurePathOverride, manifestsJsFileMetadata = options.manifestsJsFileMetadata;
                    formattedManifests = JSON.stringify(manifestsArray, compressManifests);
                    outputFileName = external_path_default().basename(outputFilePath);
                    filledTemplate = bundledraw_namespaceObject
                        .replace(/MANIFESTS_ARRAY_PROXY/g, formattedManifests)
                        .replace(/DEPLOYED_ASSET_PATH_OVERRIDE/g, JSON.stringify(azurePathOverride || ''))
                        .replace(/MANIFESTS_FILE_METADATA/g, manifestsJsFileMetadata ? JSON.stringify(manifestsJsFileMetadata) : 'undefined')
                        .replace(/MANIFESTS_FILE_NAME/g, JSON.stringify(outputFileName));
                    // Write the manifest file
                    return [4 /*yield*/, FileSystem_namespaceObject.FileSystem.writeFileAsync(outputFilePath, filledTemplate, { ensureFolderExists: true })];
                case 1:
                    // Write the manifest file
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
function compressManifests(key, value) {
    if (key === 'paths') {
        // Compress path mapping as prefix, localized, suffix
        var entries = Object.entries(value);
        // Empty object, short-circuit
        if (entries.length === 0) {
            return value;
        }
        var prefix = normalizePath(entries[0][1]);
        var suffix = prefix;
        // Iterate once to find the maximum shared prefix and shared suffix
        for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
            var _a = entries_1[_i], localizedPath = _a[1];
            var normalizedLocalizedPath = normalizePath(localizedPath);
            while (prefix && !normalizedLocalizedPath.startsWith(prefix)) {
                prefix = prefix.slice(0, -1);
            }
            while (suffix && !normalizedLocalizedPath.endsWith(suffix)) {
                suffix = suffix.slice(1);
            }
        }
        var localized = {};
        for (var _b = 0, entries_2 = entries; _b < entries_2.length; _b++) {
            var _c = entries_2[_b], locale = _c[0], localizedPathFromManifest = _c[1];
            var processedEntry = void 0;
            if (typeof localizedPathFromManifest === 'string') {
                processedEntry = localizedPathFromManifest.slice(prefix.length, -suffix.length);
            }
            else {
                processedEntry = localizedPathFromManifest.path.slice(prefix.length, -suffix.length);
                if (localizedPathFromManifest.integrity !== undefined) {
                    processedEntry = [processedEntry, localizedPathFromManifest.integrity];
                }
                else {
                    processedEntry = [processedEntry];
                }
            }
            localized[locale] = processedEntry;
        }
        var newPathsObj = {
            p: prefix,
            l: localized,
            s: suffix
        };
        return newPathsObj;
    }
    return value;
}
function normalizePath(p) {
    return typeof p === 'string' ? p : p.path;
}
//# sourceMappingURL=ManifestsFileBuilder.js.map
module.exports = __webpack_exports__;
/******/ })()
;
//# sourceMappingURL=ManifestsFileBuilder.js.map