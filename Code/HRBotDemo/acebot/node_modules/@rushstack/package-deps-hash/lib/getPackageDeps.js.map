{"version":3,"file":"getPackageDeps.js","sourceRoot":"","sources":["../src/getPackageDeps.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport type * as child_process from 'child_process';\nimport * as path from 'path';\nimport { Executable } from '@rushstack/node-core-library';\n\nimport { ensureGitMinimumVersion } from './getRepoState';\n\n/**\n * Parses a quoted filename sourced from the output of the \"git status\" command.\n *\n * Paths with non-standard characters will be enclosed with double-quotes, and non-standard\n * characters will be backslash escaped (ex. double-quotes, non-ASCII characters). The\n * escaped chars can be included in one of two ways:\n * - backslash-escaped chars (ex. \\\")\n * - octal encoded chars (ex. \\347)\n *\n * See documentation: https://git-scm.com/docs/git-status\n */\nexport function parseGitFilename(filename: string): string {\n  // If there are no double-quotes around the string, then there are no escaped characters\n  // to decode, so just return\n  if (!filename.match(/^\".+\"$/)) {\n    return filename;\n  }\n\n  // Need to hex encode '%' since we will be decoding the converted octal values from hex\n  filename = filename.replace(/%/g, '%25');\n  // Replace all instances of octal literals with percent-encoded hex (ex. '\\347\\275\\221' -> '%E7%BD%91').\n  // This is done because the octal literals represent UTF-8 bytes, and by converting them to percent-encoded\n  // hex, we can use decodeURIComponent to get the Unicode chars.\n  filename = filename.replace(/(?:\\\\(\\d{1,3}))/g, (match, ...[octalValue, index, source]) => {\n    // We need to make sure that the backslash is intended to escape the octal value. To do this, walk\n    // backwards from the match to ensure that it's already escaped.\n    const trailingBackslashes: RegExpMatchArray | null = (source as string)\n      .slice(0, index as number)\n      .match(/\\\\*$/);\n    return trailingBackslashes && trailingBackslashes.length > 0 && trailingBackslashes[0].length % 2 === 0\n      ? `%${parseInt(octalValue, 8).toString(16)}`\n      : match;\n  });\n\n  // Finally, decode the filename and unescape the escaped UTF-8 chars\n  return JSON.parse(decodeURIComponent(filename));\n}\n\n/**\n * Parses the output of the \"git ls-tree\" command\n */\nexport function parseGitLsTree(output: string): Map<string, string> {\n  const changes: Map<string, string> = new Map<string, string>();\n\n  if (output) {\n    // A line is expected to look like:\n    // 100644 blob 3451bccdc831cb43d7a70ed8e628dcf9c7f888c8    src/typings/tsd.d.ts\n    // 160000 commit c5880bf5b0c6c1f2e2c43c95beeb8f0a808e8bac  rushstack\n    const gitRegex: RegExp = /([0-9]{6})\\s(blob|commit)\\s([a-f0-9]{40})\\s*(.*)/;\n\n    // Note: The output of git ls-tree uses \\n newlines regardless of OS.\n    const outputLines: string[] = output.trim().split('\\n');\n    for (const line of outputLines) {\n      if (line) {\n        // Take everything after the \"100644 blob\", which is just the hash and filename\n        const matches: RegExpMatchArray | null = line.match(gitRegex);\n        if (matches && matches[3] && matches[4]) {\n          const hash: string = matches[3];\n          const filename: string = parseGitFilename(matches[4]);\n\n          changes.set(filename, hash);\n        } else {\n          throw new Error(`Cannot parse git ls-tree input: \"${line}\"`);\n        }\n      }\n    }\n  }\n\n  return changes;\n}\n\n/**\n * Parses the output of the \"git status\" command\n */\nexport function parseGitStatus(output: string, packagePath: string): Map<string, string> {\n  const changes: Map<string, string> = new Map<string, string>();\n\n  /*\n   * Typically, output will look something like:\n   * M temp_modules/rush-package-deps-hash/package.json\n   * D package-deps-hash/src/index.ts\n   */\n\n  // If there was an issue with `git ls-tree`, or there are no current changes, processOutputBlocks[1]\n  // will be empty or undefined\n  if (!output) {\n    return changes;\n  }\n\n  // Note: The output of git hash-object uses \\n newlines regardless of OS.\n  const outputLines: string[] = output.trim().split('\\n');\n  for (const line of outputLines) {\n    /*\n     * changeType is in the format of \"XY\" where \"X\" is the status of the file in the index and \"Y\" is the status of\n     * the file in the working tree. Some example statuses:\n     *   - 'D' == deletion\n     *   - 'M' == modification\n     *   - 'A' == addition\n     *   - '??' == untracked\n     *   - 'R' == rename\n     *   - 'RM' == rename with modifications\n     *   - '[MARC]D' == deleted in work tree\n     * Full list of examples: https://git-scm.com/docs/git-status#_short_format\n     */\n    const match: RegExpMatchArray | null = line.match(/(\"(\\\\\"|[^\"])+\")|(\\S+\\s*)/g);\n\n    if (match && match.length > 1) {\n      const [changeType, ...filenameMatches] = match;\n\n      // We always care about the last filename in the filenames array. In the case of non-rename changes,\n      // the filenames array only contains one file, so we can join all segments that were split on spaces.\n      // In the case of rename changes, the last item in the array is the path to the file in the working tree,\n      // which is the only one that we care about. It is also surrounded by double-quotes if spaces are\n      // included, so no need to worry about joining different segments\n      let lastFilename: string = changeType.startsWith('R')\n        ? filenameMatches[filenameMatches.length - 1]\n        : filenameMatches.join('');\n      lastFilename = parseGitFilename(lastFilename);\n\n      changes.set(lastFilename, changeType.trimRight());\n    }\n  }\n\n  return changes;\n}\n\n/**\n * Takes a list of files and returns the current git hashes for them\n *\n * @public\n */\nexport function getGitHashForFiles(\n  filesToHash: string[],\n  packagePath: string,\n  gitPath?: string\n): Map<string, string> {\n  const changes: Map<string, string> = new Map<string, string>();\n\n  if (filesToHash.length) {\n    // Use --stdin-paths arg to pass the list of files to git in order to avoid issues with\n    // command length\n    const result: child_process.SpawnSyncReturns<string> = Executable.spawnSync(\n      gitPath || 'git',\n      ['hash-object', '--stdin-paths'],\n      { input: filesToHash.map((x) => path.resolve(packagePath, x)).join('\\n') }\n    );\n\n    if (result.status !== 0) {\n      ensureGitMinimumVersion(gitPath);\n\n      throw new Error(`git hash-object exited with status ${result.status}: ${result.stderr}`);\n    }\n\n    const hashStdout: string = result.stdout.trim();\n\n    // The result of \"git hash-object\" will be a list of file hashes delimited by newlines\n    const hashes: string[] = hashStdout.split('\\n');\n\n    if (hashes.length !== filesToHash.length) {\n      throw new Error(\n        `Passed ${filesToHash.length} file paths to Git to hash, but received ${hashes.length} hashes.`\n      );\n    }\n\n    for (let i: number = 0; i < hashes.length; i++) {\n      const hash: string = hashes[i];\n      const filePath: string = filesToHash[i];\n      changes.set(filePath, hash);\n    }\n  }\n\n  return changes;\n}\n\n/**\n * Executes \"git ls-tree\" in a folder\n */\nexport function gitLsTree(cwdPath: string, gitPath?: string): string {\n  const result: child_process.SpawnSyncReturns<string> = Executable.spawnSync(\n    gitPath || 'git',\n    ['ls-tree', 'HEAD', '-r'],\n    {\n      currentWorkingDirectory: cwdPath\n    }\n  );\n\n  if (result.status !== 0) {\n    ensureGitMinimumVersion(gitPath);\n\n    throw new Error(`git ls-tree exited with status ${result.status}: ${result.stderr}`);\n  }\n\n  return result.stdout;\n}\n\n/**\n * Executes \"git status\" in a folder\n */\nexport function gitStatus(cwdPath: string, gitPath?: string): string {\n  /**\n   * -s - Short format. Will be printed as 'XY PATH' or 'XY ORIG_PATH -> PATH'. Paths with non-standard\n   *      characters will be escaped using double-quotes, and non-standard characters will be backslash\n   *      escaped (ex. spaces, tabs, double-quotes)\n   * -u - Untracked files are included\n   *\n   * See documentation here: https://git-scm.com/docs/git-status\n   */\n  const result: child_process.SpawnSyncReturns<string> = Executable.spawnSync(\n    gitPath || 'git',\n    ['status', '-s', '-u', '.'],\n    {\n      currentWorkingDirectory: cwdPath\n    }\n  );\n\n  if (result.status !== 0) {\n    ensureGitMinimumVersion(gitPath);\n\n    throw new Error(`git status exited with status ${result.status}: ${result.stderr}`);\n  }\n\n  return result.stdout;\n}\n\n/**\n * Builds an object containing hashes for the files under the specified `packagePath` folder.\n * @param packagePath - The folder path to derive the package dependencies from. This is typically the folder\n *                      containing package.json.  If omitted, the default value is the current working directory.\n * @param excludedPaths - An optional array of file path exclusions. If a file should be omitted from the list\n *                         of dependencies, use this to exclude it.\n * @returns the package-deps.json file content\n *\n * @public\n */\nexport function getPackageDeps(\n  packagePath: string = process.cwd(),\n  excludedPaths?: string[],\n  gitPath?: string\n): Map<string, string> {\n  const gitLsOutput: string = gitLsTree(packagePath, gitPath);\n\n  // Add all the checked in hashes\n  const result: Map<string, string> = parseGitLsTree(gitLsOutput);\n\n  // Remove excluded paths\n  if (excludedPaths) {\n    for (const excludedPath of excludedPaths) {\n      result.delete(excludedPath);\n    }\n  }\n\n  // Update the checked in hashes with the current repo status\n  const gitStatusOutput: string = gitStatus(packagePath, gitPath);\n  const currentlyChangedFiles: Map<string, string> = parseGitStatus(gitStatusOutput, packagePath);\n  const filesToHash: string[] = [];\n  const excludedPathSet: Set<string> = new Set<string>(excludedPaths);\n  for (const [filename, changeType] of currentlyChangedFiles) {\n    // See comments inside parseGitStatus() for more information\n    if (changeType === 'D' || (changeType.length === 2 && changeType.charAt(1) === 'D')) {\n      result.delete(filename);\n    } else {\n      if (!excludedPathSet.has(filename)) {\n        filesToHash.push(filename);\n      }\n    }\n  }\n\n  const currentlyChangedFileHashes: Map<string, string> = getGitHashForFiles(\n    filesToHash,\n    packagePath,\n    gitPath\n  );\n  for (const [filename, hash] of currentlyChangedFileHashes) {\n    result.set(filename, hash);\n  }\n\n  return result;\n}\n"]}