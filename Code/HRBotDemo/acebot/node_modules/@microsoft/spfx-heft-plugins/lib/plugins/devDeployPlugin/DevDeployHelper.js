"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DevDeployHelper = void 0;
const AzureUploader_1 = require("../../utilities/AzureUploader");
const UrlUtilities_1 = require("../../utilities/UrlUtilities");
const ProgressBar_1 = require("../../utilities/ProgressBar");
/**
 * Helper functions for dev-deploy.
 * @public
 */
class DevDeployHelper {
    static async deployFilesAsync(terminal, deployConfig, deployData, deployPathsFunction) {
        const progressBar = new ProgressBar_1.ProgressBar(deployData.filesToUpload.length);
        let uploadedCount = 0;
        if (deployPathsFunction) {
            await deployPathsFunction(deployData.filesToUpload);
        }
        else {
            const uploader = new AzureUploader_1.AzureUploader({
                storageAccountName: deployConfig.accountName,
                containerName: deployConfig.containerName,
                sas: deployConfig.sas
            });
            const onFileUploaded = () => {
                progressBar.update(++uploadedCount);
            };
            await uploader.uploadFilesToAzureAsync(terminal, deployData.filesToUpload.map((fileToUpload) => {
                const azurePath = deployConfig.folderNameInContainer
                    ? UrlUtilities_1.UrlUtilities.joinUrlSegments(deployConfig.folderNameInContainer, fileToUpload.deployPath)
                    : fileToUpload.deployPath;
                return {
                    azurePath,
                    localPath: fileToUpload.localPath
                };
            }), undefined, deployConfig.maxRetries, undefined, onFileUploaded);
        }
    }
}
exports.DevDeployHelper = DevDeployHelper;
//# sourceMappingURL=DevDeployHelper.js.map