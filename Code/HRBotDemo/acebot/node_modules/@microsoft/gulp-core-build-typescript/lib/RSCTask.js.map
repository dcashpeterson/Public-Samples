{"version":3,"file":"RSCTask.js","sourceRoot":"","sources":["../src/RSCTask.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport * as resolve from 'resolve';\r\n\r\nimport {\r\n  JsonFile,\r\n  IPackageJson,\r\n  FileSystem,\r\n  PackageJsonLookup,\r\n  Terminal\r\n} from '@rushstack/node-core-library';\r\nimport { GulpTask, GCBTerminalProvider } from '@microsoft/gulp-core-build';\r\n\r\nexport interface IRSCTaskConfig extends Object {\r\n  buildDirectory: string;\r\n\r\n  allowBuiltinCompiler: boolean;\r\n}\r\n\r\ninterface ITsconfig {\r\n  extends?: string;\r\n}\r\n\r\nexport abstract class RSCTask<TTaskConfig extends IRSCTaskConfig> extends GulpTask<TTaskConfig> {\r\n  // For a given folder that contains a tsconfig.json file, return the absolute path of the folder\r\n  // containing \"@microsoft/rush-stack-compiler-*\"\r\n  private static _rushStackCompilerPackagePathCache: Map<string, string> = new Map<string, string>();\r\n\r\n  private static __packageJsonLookup: PackageJsonLookup | undefined;\r\n\r\n  private static get _packageJsonLookup(): PackageJsonLookup {\r\n    if (!RSCTask.__packageJsonLookup) {\r\n      RSCTask.__packageJsonLookup = new PackageJsonLookup();\r\n    }\r\n\r\n    return RSCTask.__packageJsonLookup;\r\n  }\r\n\r\n  protected _terminalProvider: GCBTerminalProvider = new GCBTerminalProvider(this);\r\n  protected _terminal: Terminal = new Terminal(this._terminalProvider);\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  protected _rushStackCompiler: unknown;\r\n\r\n  private get _rushStackCompilerPackagePath(): string {\r\n    if (!RSCTask._rushStackCompilerPackagePathCache.has(this.buildFolder)) {\r\n      const projectTsconfigPath: string = path.join(this.buildFolder, 'tsconfig.json');\r\n\r\n      const visitedTsconfigPaths: Set<string> = new Set<string>();\r\n      let compilerPath: string;\r\n      try {\r\n        compilerPath = this._resolveRushStackCompilerFromTsconfig(projectTsconfigPath, visitedTsconfigPaths);\r\n      } catch (e) {\r\n        if (this.taskConfig.allowBuiltinCompiler) {\r\n          this._terminal.writeVerboseLine(\r\n            'Unable to resolve rush-stack-compiler from tsconfig.json. Using built-in compiler'\r\n          );\r\n          const builtInCompilerPath: string | undefined = RSCTask._packageJsonLookup.tryGetPackageFolderFor(\r\n            require.resolve('@microsoft/rush-stack-compiler-4.7')\r\n          );\r\n          if (!builtInCompilerPath) {\r\n            throw new Error(\r\n              'Unable to resolve built-in compiler. Ensure @microsoft/gulp-core-build-typescript is correctly installed'\r\n            );\r\n          }\r\n\r\n          compilerPath = builtInCompilerPath;\r\n        } else {\r\n          throw e;\r\n        }\r\n      }\r\n\r\n      RSCTask._rushStackCompilerPackagePathCache.set(this.buildFolder, compilerPath);\r\n    }\r\n\r\n    return RSCTask._rushStackCompilerPackagePathCache.get(this.buildFolder)!;\r\n  }\r\n\r\n  protected get buildFolder(): string {\r\n    return this.taskConfig.buildDirectory || this.buildConfig.rootPath;\r\n  }\r\n\r\n  public constructor(taskName: string, defaultConfig: Partial<TTaskConfig>) {\r\n    super(taskName, {\r\n      allowBuiltinCompiler: false,\r\n      ...defaultConfig\r\n    } as TTaskConfig);\r\n  }\r\n\r\n  protected initializeRushStackCompiler(): void {\r\n    const compilerPackageJson: IPackageJson = JsonFile.load(\r\n      path.join(this._rushStackCompilerPackagePath, 'package.json')\r\n    );\r\n    const main: string | undefined = compilerPackageJson.main;\r\n    if (!main) {\r\n      throw new Error('Compiler package does not have a \"main\" entry.');\r\n    }\r\n\r\n    this._rushStackCompiler = require(path.join(this._rushStackCompilerPackagePath, main));\r\n  }\r\n\r\n  /**\r\n   * Determine which compiler should be used to compile a given project.\r\n   *\r\n   * @remarks\r\n   * We load the tsconfig.json file, and follow its \"extends\" field until we reach the end of the chain.\r\n   * We expect the last extended file to be under an installed @microsoft/rush-stack-compiler-* package,\r\n   * which determines which typescript/tslint/api-extractor versions should be invoked.\r\n   *\r\n   * @param tsconfigPath - The path of a tsconfig.json file to analyze\r\n   * @returns The absolute path of the folder containing \"@microsoft/rush-stack-compiler-*\" which should be used\r\n   * to compile this tsconfig.json project\r\n   */\r\n  private _resolveRushStackCompilerFromTsconfig(\r\n    tsconfigPath: string,\r\n    visitedTsconfigPaths: Set<string>\r\n  ): string {\r\n    this._terminal.writeVerboseLine(`Examining ${tsconfigPath}`);\r\n    visitedTsconfigPaths.add(tsconfigPath);\r\n\r\n    if (!FileSystem.exists(tsconfigPath)) {\r\n      throw new Error(`tsconfig.json file (${tsconfigPath}) does not exist.`);\r\n    }\r\n\r\n    let tsconfig: ITsconfig;\r\n    try {\r\n      tsconfig = JsonFile.load(tsconfigPath);\r\n    } catch (e) {\r\n      throw new Error(`Error parsing tsconfig.json ${tsconfigPath}: ${e}`);\r\n    }\r\n\r\n    if (!tsconfig.extends) {\r\n      // Does the chain end with a file in the rush-stack-compiler package?\r\n      const packageJsonPath: string | undefined =\r\n        RSCTask._packageJsonLookup.tryGetPackageJsonFilePathFor(tsconfigPath);\r\n      if (packageJsonPath) {\r\n        const packageJson: IPackageJson = JsonFile.load(packageJsonPath);\r\n        if (packageJson.name.match(/^@microsoft\\/rush-stack-compiler-[0-9\\.]+$/)) {\r\n          const packagePath: string = path.dirname(packageJsonPath);\r\n          this._terminal.writeVerboseLine(`Found rush-stack compiler at ${packagePath}/`);\r\n          return packagePath;\r\n        }\r\n      }\r\n\r\n      throw new Error(\r\n        'Rush Stack determines your TypeScript compiler by following the \"extends\" field in your tsconfig.json ' +\r\n          'file, until it reaches a package folder that depends on a variant of @microsoft/rush-stack-compiler-*. ' +\r\n          `This lookup failed when it reached this file: ${tsconfigPath}`\r\n      );\r\n    }\r\n\r\n    // Follow the tsconfig.extends field:\r\n    let baseTsconfigPath: string;\r\n    let extendsPathKind: string;\r\n    if (path.isAbsolute(tsconfig.extends)) {\r\n      // Absolute path\r\n      baseTsconfigPath = tsconfig.extends;\r\n      extendsPathKind = 'an absolute path';\r\n    } else if (tsconfig.extends.match(/^\\./)) {\r\n      // Relative path\r\n      baseTsconfigPath = path.resolve(path.dirname(tsconfigPath), tsconfig.extends);\r\n      extendsPathKind = 'a relative path';\r\n    } else {\r\n      // Package path\r\n      baseTsconfigPath = resolve.sync(tsconfig.extends, {\r\n        basedir: this.buildConfig.rootPath,\r\n        packageFilter: (pkg: IPackageJson) => {\r\n          return {\r\n            ...pkg,\r\n            main: 'package.json'\r\n          };\r\n        }\r\n      });\r\n      extendsPathKind = 'a package path';\r\n    }\r\n\r\n    this._terminal.writeVerboseLine(\r\n      `Found tsconfig.extends property ${tsconfig.extends}. It appears ` +\r\n        `to be ${extendsPathKind}. Resolved to ${baseTsconfigPath}`\r\n    );\r\n\r\n    if (visitedTsconfigPaths.has(baseTsconfigPath)) {\r\n      throw new Error(\r\n        `The file \"${baseTsconfigPath}\" has an \"extends\" field that creates a circular reference`\r\n      );\r\n    }\r\n\r\n    return this._resolveRushStackCompilerFromTsconfig(baseTsconfigPath, visitedTsconfigPaths);\r\n  }\r\n}\r\n"]}