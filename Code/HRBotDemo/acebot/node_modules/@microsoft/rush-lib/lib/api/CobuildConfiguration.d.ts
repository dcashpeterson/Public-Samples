import { type ITerminal } from '@rushstack/node-core-library';
import type { CobuildLockProviderFactory, RushSession } from '../pluginFramework/RushSession';
import type { ICobuildLockProvider } from '../logic/cobuild/ICobuildLockProvider';
import type { RushConfiguration } from './RushConfiguration';
/**
 * @beta
 */
export interface ICobuildJson {
    cobuildFeatureEnabled: boolean;
    cobuildLockProvider: string;
}
/**
 * @beta
 */
export interface ICobuildConfigurationOptions {
    cobuildJson: ICobuildJson;
    rushConfiguration: RushConfiguration;
    rushSession: RushSession;
    cobuildLockProviderFactory: CobuildLockProviderFactory;
}
/**
 * Use this class to load and save the "common/config/rush/cobuild.json" config file.
 * This file provides configuration options for the Rush Cobuild feature.
 * @beta
 */
export declare class CobuildConfiguration {
    private static _jsonSchema;
    /**
     * Indicates whether the cobuild feature is enabled.
     * Typically it is enabled in the cobuild.json config file.
     *
     * Note: The orchestrator (or local users) should always have to opt into running with cobuilds by
     * providing a cobuild context id. Even if cobuilds are "enabled" as a feature, they don't
     * actually turn on for that particular build unless the cobuild context id is provided as an
     * non-empty string.
     */
    readonly cobuildFeatureEnabled: boolean;
    /**
     * Cobuild context id
     *
     * @remarks
     * The cobuild feature won't be enabled until the context id is provided as an non-empty string.
     */
    readonly cobuildContextId: string | undefined;
    /**
     * This is a name of the participating cobuild runner. It can be specified by the environment variable
     * RUSH_COBUILD_RUNNER_ID. If it is not provided, a random id will be generated to identify the runner.
     */
    readonly cobuildRunnerId: string;
    /**
     * If true, Rush will automatically handle the leaf project with build cache "disabled" by writing
     * to the cache in a special "log files only mode". This is useful when you want to use Cobuilds
     * to improve the performance in CI validations and the leaf projects have not enabled cache.
     */
    readonly cobuildLeafProjectLogOnlyAllowed: boolean;
    private _cobuildLockProvider;
    private readonly _cobuildLockProviderFactory;
    private readonly _cobuildJson;
    private constructor();
    /**
     * Attempts to load the cobuild.json data from the standard file path `common/config/rush/cobuild.json`.
     * If the file has not been created yet, then undefined is returned.
     */
    static tryLoadAsync(terminal: ITerminal, rushConfiguration: RushConfiguration, rushSession: RushSession): Promise<CobuildConfiguration | undefined>;
    static getCobuildConfigFilePath(rushConfiguration: RushConfiguration): string;
    private static _loadAsync;
    createLockProviderAsync(terminal: ITerminal): Promise<void>;
    destroyLockProviderAsync(): Promise<void>;
    getCobuildLockProvider(): ICobuildLockProvider;
}
//# sourceMappingURL=CobuildConfiguration.d.ts.map