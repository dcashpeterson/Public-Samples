import { PhasedCommandHooks } from '../../pluginFramework/PhasedCommandHooks';
import { BaseScriptAction, type IBaseScriptActionOptions } from './BaseScriptAction';
import type { IPhase, IPhasedCommandConfig } from '../../api/CommandLineConfiguration';
/**
 * Constructor parameters for PhasedScriptAction.
 */
export interface IPhasedScriptActionOptions extends IBaseScriptActionOptions<IPhasedCommandConfig> {
    enableParallelism: boolean;
    incremental: boolean;
    disableBuildCache: boolean;
    originalPhases: Set<IPhase>;
    initialPhases: Set<IPhase>;
    watchPhases: Set<IPhase>;
    phases: Map<string, IPhase>;
    alwaysWatch: boolean;
    alwaysInstall: boolean | undefined;
    watchDebounceMs: number | undefined;
}
/**
 * This class implements phased commands which are run individually for each project in the repo,
 * possibly in parallel, and which may define multiple phases.
 *
 * @remarks
 * Phased commands can be defined via common/config/command-line.json.  Rush's predefined "build"
 * and "rebuild" commands are also modeled as phased commands with a single phase that invokes the npm
 * "build" script for each project.
 */
export declare class PhasedScriptAction extends BaseScriptAction<IPhasedCommandConfig> {
    /**
     * @internal
     */
    _runsBeforeInstall: boolean | undefined;
    readonly hooks: PhasedCommandHooks;
    private readonly _enableParallelism;
    private readonly _isIncrementalBuildAllowed;
    private readonly _disableBuildCache;
    private readonly _originalPhases;
    private readonly _initialPhases;
    private readonly _watchPhases;
    private readonly _watchDebounceMs;
    private readonly _alwaysWatch;
    private readonly _alwaysInstall;
    private readonly _knownPhases;
    private readonly _terminal;
    private readonly _changedProjectsOnly;
    private readonly _selectionParameters;
    private readonly _verboseParameter;
    private readonly _parallelismParameter;
    private readonly _ignoreHooksParameter;
    private readonly _watchParameter;
    private readonly _timelineParameter;
    private readonly _installParameter;
    constructor(options: IPhasedScriptActionOptions);
    runAsync(): Promise<void>;
    private _runInitialPhases;
    private _registerWatchModeInterface;
    /**
     * Runs the command in watch mode. Fundamentally is a simple loop:
     * 1) Wait for a change to one or more projects in the selection
     * 2) Invoke the command on the changed projects, and, if applicable, impacted projects
     *    Uses the same algorithm as --impacted-by
     * 3) Goto (1)
     */
    private _runWatchPhases;
    /**
     * Runs a set of operations and reports the results.
     */
    private _executeOperations;
    private _doBeforeTask;
    private _doAfterTask;
}
//# sourceMappingURL=PhasedScriptAction.d.ts.map