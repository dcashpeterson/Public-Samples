"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AdaptiveCardExtensionContext = void 0;
var tslib_1 = require("tslib");
var sp_component_base_1 = require("@microsoft/sp-component-base");
/**
 * Adaptive Card Extension context object.
 *
 * @public
 */
var AdaptiveCardExtensionContext = /** @class */ (function (_super) {
    tslib_1.__extends(AdaptiveCardExtensionContext, _super);
    /**
     * @internal
     */
    function AdaptiveCardExtensionContext(parameters) {
        var _this = _super.call(this, parameters) || this;
        _this._aceHost = parameters.host;
        _this.manifest = parameters.manifest;
        _this._deviceContext = parameters.deviceContext;
        _this._location = parameters.location;
        _this._logACEEditCustomerPromiseFailure = parameters.logEditCustomerPromiseFailure;
        _this._getPositionOnPage = parameters.getPositionOnPage;
        _this._hostContext = parameters.hostContext;
        _this._sdks = parameters.sdks;
        return _this;
    }
    Object.defineProperty(AdaptiveCardExtensionContext.prototype, "_host", {
        /**
         * See {@link _AdaptiveCardExtensionHost}
         *
         * @internal
         */
        get: function () {
            return this._aceHost;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AdaptiveCardExtensionContext.prototype, "propertyPane", {
        /**
         * See {@link @microsoft/sp-webpart-base#IPropertyPaneAccessor }
         */
        get: function () {
            return this._host.propertyPane;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AdaptiveCardExtensionContext.prototype, "deviceContext", {
        get: function () {
            return this._deviceContext;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AdaptiveCardExtensionContext.prototype, "hostContext", {
        /**
         * @internal @deprecated - Use `sdks` to access teams Context instead.
         * Provides a hostContext that gets current context of device. See {@link IHostContext}
         */
        get: function () {
            return this._hostContext;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AdaptiveCardExtensionContext.prototype, "sdks", {
        /**
         * @public
         *
         * Provides a sdk that gets current context of device. See {@link IPartialSDKs}
         */
        get: function () {
            return this._sdks;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AdaptiveCardExtensionContext.prototype, "location", {
        /**
         * @beta
         * Provides a promise that gets current location of the device
         */
        get: function () {
            return this._location();
        },
        enumerable: false,
        configurable: true
    });
    /**
     * @internal
     *
     * @param alias - Manifest alias
     * @param errorMessage - Additional error details describing the failure.
     * @param errorScenario -Information to indicate which scenario failed for the module listed in errorCode.
     */
    AdaptiveCardExtensionContext.prototype._logEditCustomerPromiseFailure = function (alias, errorMessage, errorScenario) {
        if (this._logACEEditCustomerPromiseFailure) {
            this._logACEEditCustomerPromiseFailure(alias, errorMessage, errorScenario);
        }
    };
    return AdaptiveCardExtensionContext;
}(sp_component_base_1.BaseComponentContext));
exports.AdaptiveCardExtensionContext = AdaptiveCardExtensionContext;
//# sourceMappingURL=AdaptiveCardExtensionContext.js.map