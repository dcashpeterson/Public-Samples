"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
exports.SetPublicPathPlugin = void 0;
const os_1 = require("os");
const webpack_plugin_utilities_1 = require("@rushstack/webpack-plugin-utilities");
const node_core_library_1 = require("@rushstack/node-core-library");
const codeGenerator_1 = require("./codeGenerator");
const SHOULD_REPLACE_ASSET_NAME_TOKEN = Symbol('set-public-path-plugin-should-replace-asset-name');
const PLUGIN_NAME = 'set-webpack-public-path';
const ASSET_NAME_TOKEN = '-ASSET-NAME-c0ef4f86-b570-44d3-b210-4428c5b7825c';
const ASSET_NAME_TOKEN_REGEX = new RegExp(ASSET_NAME_TOKEN);
/**
 * This simple plugin sets the __webpack_public_path__ variable to a value specified in the arguments,
 *  optionally appended to the SystemJs baseURL property.
 *
 * @public
 */
class SetPublicPathPlugin {
    constructor(options) {
        this.options = options;
        if (options.scriptName) {
            if (options.scriptName.useAssetName && options.scriptName.name) {
                throw new Error('scriptName.userAssetName and scriptName.name must not be used together');
            }
            else if (options.scriptName.isTokenized && !options.scriptName.name) {
                throw new Error('scriptName.isTokenized is only valid if scriptName.name is set');
            }
        }
    }
    apply(compiler) {
        // Casting here because VersionDetection refers to webpack 5 typings
        if (webpack_plugin_utilities_1.VersionDetection.isWebpack3OrEarlier(compiler)) {
            throw new Error(`The ${SetPublicPathPlugin.name} plugin requires Webpack 4`);
        }
        // Casting here because VersionDetection refers to webpack 5 typings
        const isWebpack4 = webpack_plugin_utilities_1.VersionDetection.isWebpack4(compiler);
        compiler.hooks.compilation.tap(PLUGIN_NAME, (compilation) => {
            if (isWebpack4) {
                const webpack4Compilation = compilation;
                const mainTemplate = webpack4Compilation.mainTemplate;
                mainTemplate.hooks.startup.tap(PLUGIN_NAME, (source, chunk, hash) => {
                    const extendedChunk = chunk;
                    const assetOrChunkFound = !!this.options.skipDetection || this._detectAssetsOrChunks(extendedChunk);
                    if (assetOrChunkFound) {
                        return this._getStartupCode({
                            source,
                            chunk: extendedChunk,
                            hash,
                            requireFn: mainTemplate.requireFn
                        });
                    }
                    else {
                        return source;
                    }
                });
            }
            else {
                // Webpack 5 has its own automatic public path code, so only apply for Webpack 4
                const Webpack5Error = compiler
                    .webpack.WebpackError;
                const thisPackageJson = node_core_library_1.PackageJsonLookup.loadOwnPackageJson(__dirname);
                compilation.errors.push(new Webpack5Error('Webpack 5 supports its own automatic public path detection, ' +
                    `so ${thisPackageJson.name} is unnecessary. Remove the ${SetPublicPathPlugin.name} plugin ` +
                    'from the Webpack configuration.'));
            }
        });
        // Webpack 5 has its own automatic public path code, so only apply for Webpack 4
        if (isWebpack4) {
            compiler.hooks.emit.tap(PLUGIN_NAME, (compilation) => {
                for (const chunkGroup of compilation.chunkGroups) {
                    for (const chunk of chunkGroup.chunks) {
                        if (chunk[SHOULD_REPLACE_ASSET_NAME_TOKEN]) {
                            for (const assetFilename of chunk.files) {
                                let escapedAssetFilename;
                                if (assetFilename.match(/\.map$/)) {
                                    // Trim the ".map" extension
                                    escapedAssetFilename = assetFilename.substr(0, assetFilename.length - 4 /* '.map'.length */);
                                    escapedAssetFilename = node_core_library_1.Text.escapeRegExp(escapedAssetFilename);
                                    // source in sourcemaps is JSON-encoded
                                    escapedAssetFilename = JSON.stringify(escapedAssetFilename);
                                    // Trim the quotes from the JSON encoding
                                    escapedAssetFilename = escapedAssetFilename.substring(1, escapedAssetFilename.length - 1);
                                }
                                else {
                                    escapedAssetFilename = node_core_library_1.Text.escapeRegExp(assetFilename);
                                }
                                const asset = compilation.assets[assetFilename];
                                const originalAssetSource = asset.source();
                                const originalAssetSize = asset.size();
                                const newAssetSource = originalAssetSource.replace(ASSET_NAME_TOKEN_REGEX, escapedAssetFilename);
                                const sizeDifference = assetFilename.length - ASSET_NAME_TOKEN.length;
                                asset.source = () => newAssetSource;
                                asset.size = () => originalAssetSize + sizeDifference;
                            }
                        }
                    }
                }
            });
        }
    }
    _detectAssetsOrChunks(chunk) {
        for (const chunkGroup of chunk.groupsIterable) {
            if (chunkGroup.childrenIterable.size > 0) {
                return true;
            }
        }
        for (const innerModule of chunk.modulesIterable) {
            if (innerModule.buildInfo.assets && Object.keys(innerModule.buildInfo.assets).length > 0) {
                return true;
            }
        }
        return false;
    }
    _getStartupCode(options) {
        const moduleOptions = Object.assign({}, this.options);
        // If this module has ownership over any chunks or assets, inject the public path code
        moduleOptions.webpackPublicPathVariable = `${options.requireFn}.p`;
        moduleOptions.linePrefix = '  ';
        if (this.options.scriptName) {
            if (this.options.scriptName.name) {
                moduleOptions.regexName = this.options.scriptName.name;
                if (this.options.scriptName.isTokenized) {
                    moduleOptions.regexName = moduleOptions.regexName
                        .replace(/\[name\]/g, node_core_library_1.Text.escapeRegExp(options.chunk.name))
                        .replace(/\[hash\]/g, options.chunk.renderedHash || '');
                }
            }
            else if (this.options.scriptName.useAssetName) {
                options.chunk[SHOULD_REPLACE_ASSET_NAME_TOKEN] = true;
                moduleOptions.regexName = ASSET_NAME_TOKEN;
            }
        }
        return [
            '// Set the webpack public path',
            '(function () {',
            // eslint-disable-next-line no-console
            (0, codeGenerator_1.getSetPublicPathCode)(moduleOptions, console.error),
            '})();',
            '',
            options.source
        ].join(os_1.EOL);
    }
}
exports.SetPublicPathPlugin = SetPublicPathPlugin;
//# sourceMappingURL=SetPublicPathPlugin.js.map