"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var sp_diagnostics_1 = require("@microsoft/sp-diagnostics");
var sp_dynamic_data_1 = require("@microsoft/sp-dynamic-data");
var AzureActiveDirectoryInfo_1 = tslib_1.__importDefault(require("./AzureActiveDirectoryInfo"));
var CultureInfo_1 = tslib_1.__importDefault(require("./CultureInfo"));
var Strings_resx_1 = tslib_1.__importDefault(require("./loc/Strings.resx"));
var SPFeatureInfo_1 = tslib_1.__importDefault(require("./SPFeatureInfo"));
var SPList_1 = tslib_1.__importDefault(require("./SPList"));
var SPListItem_1 = tslib_1.__importDefault(require("./SPListItem"));
var SPSite_1 = tslib_1.__importDefault(require("./SPSite"));
var SPUser_1 = tslib_1.__importDefault(require("./SPUser"));
var SPWeb_1 = tslib_1.__importDefault(require("./SPWeb"));
/**
 * The SharePoint page context object.
 *
 * @remarks
 * The page context provides standard definitions for common SharePoint objects
 * that need to be shared between the client-side application, web parts, and other
 * components.  Typically the data is fetched via REST queries when navigating to a
 * new page, but it can also be preloaded by the web server, or filled from a custom
 * application cache.

 * @public
 */
var PageContext = /** @class */ (function () {
    function PageContext(serviceScope) {
        var _this = this;
        this._isInitialized = false;
        this._serviceScope = serviceScope;
        this._searchData = {};
        this._serviceScope.whenFinished(function () {
            // Create the page context data source:
            // Note that the Initialize function is called multiple times, and each time
            // we mark the datasource as having changed.
            _this._pageContextDataSource = new sp_dynamic_data_1._PageContextDataSource(serviceScope);
            _this._pageContextDataSource.addPropertyHandler({
                id: PageContext._pageContextInfoId,
                dynamicDataFunctions: {
                    getPropertyDefinitions: _this._getPropertyDefinitions.bind(_this),
                    getPropertyValue: _this._getPropertyValue.bind(_this),
                    getAnnotatedPropertyValue: _this._getAnnotatedPropertyValue.bind(_this),
                    allowedEvents: function () {
                        return [];
                    }
                }
            });
        });
        this._getPropertyValue = this._getPropertyValue.bind(this);
    }
    /**
     * Initializes the Page Context.
     * @internal
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    PageContext.prototype.initialize = function (options, legacyPageContext) {
        var _this = this;
        sp_core_library_1.Validate.isNotNullOrUndefined(options, 'options');
        try {
            this._aadInfo = options.aadInfo ? new AzureActiveDirectoryInfo_1.default(options.aadInfo) : undefined;
            this._cultureInfo = new CultureInfo_1.default(options.cultureInfo);
            this._list = options.list ? new SPList_1.default(options.list) : undefined;
            this._listItem = options.listItem ? new SPListItem_1.default(options.listItem) : undefined;
            this._site = new SPSite_1.default(options.site);
            this._user = new SPUser_1.default(options.user);
            this._web = new SPWeb_1.default(options.web);
            this._spFeatureInfo = new SPFeatureInfo_1.default(options.featureInfo);
            this._legacyPageContext = legacyPageContext;
            this._initializationData = tslib_1.__assign({}, options);
        }
        catch (e) {
            sp_diagnostics_1._TraceLogger.logError(PageContext._logSource, e, 'initialize');
            throw e;
        }
        this._serviceScope.whenFinished(function () {
            // The datasource was initialized in the constructor because this initialize method is
            // called numerous times.
            _this._pageContextDataSource.notifyPropertyChanged(PageContext._pageContextUserDynamicProperty);
            _this._pageContextDataSource.notifyPropertyChanged(PageContext._pageContextSiteDataDynamicProperty);
            _this._pageContextDataSource.notifyPropertyChanged(PageContext._pageContextUserDynamicProperty);
        });
        this._isInitialized = true;
    };
    /**
     * Sets the search query value for the page context dynamic data.
     * Updating the value triggers a notification to dynamic data consumers for that property.
     *
     * @param searchQuery - Search query to set.
     * @internal
     */
    PageContext.prototype._setSearchQuery = function (searchQuery) {
        // If the value is the same, do not update. This avoids unnecessary callbacks for the same value.
        if (this._searchData.searchQuery !== searchQuery) {
            this._searchData.searchQuery = searchQuery;
            this._pageContextDataSource.notifyPropertyChanged(PageContext._pageContextSearchDataDynamicProperty);
        }
    };
    /**
     * Sets the search query and scope query value for the page context dynamic data.
     * Updating the value triggers a notification to dynamic data consumers for that property.
     *
     * @param searchData - Search Data to set.
     * @internal
     */
    PageContext.prototype._setSearchData = function (searchData) {
        // If the value is the same, do not update. This avoids unnecessary callbacks for the same value.
        if (this._searchData.searchQuery !== searchData.searchQuery ||
            this._searchData.searchScope !== searchData.searchScope) {
            this._searchData = searchData;
            this._pageContextDataSource.notifyPropertyChanged(PageContext._pageContextSearchDataDynamicProperty);
        }
    };
    Object.defineProperty(PageContext.prototype, "aadInfo", {
        /**
         * Contextual information for communicating with Azure Active Directory.
         * If the current page doesn't have an associated Azure Active Directory tenant, this
         * property will be undefined.
         */
        get: function () {
            return this._aadInfo;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PageContext.prototype, "cultureInfo", {
        /**
         * It provides culture info for the current user of the application.
         * This class is primarily used with the `PageContext` class.
         */
        get: function () {
            return this._cultureInfo;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PageContext.prototype, "list", {
        /**
         * Contextual information for the SharePoint list that is hosting the page.
         * If there is no list associated to the current page, this property will be undefined.
         */
        get: function () {
            return this._list;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PageContext.prototype, "listItem", {
        /**
         * Contextual information for the SharePoint list item that is hosting the page.
         * If there is no list item associated to the current page, this property will be undefined.
         */
        get: function () {
            return this._listItem;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PageContext.prototype, "page", {
        /**
         * Exposes information that is associated with the SharePoint web page that is currently being displayed.
         * @alpha
         */
        get: function () {
            return this._page;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PageContext.prototype, "site", {
        /**
         * Contextual information for the SharePoint site collection ("SPSite") that is hosting the page.
         */
        get: function () {
            return this._site;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PageContext.prototype, "user", {
        /**
         * It provides contextual information for the SharePoint user that is accessing the page.
         * This class is primarily used with the `PageContext` class.
         */
        get: function () {
            return this._user;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PageContext.prototype, "web", {
        /**
         * Contextual information for the SharePoint site ("SPWeb") that is hosting the page.
         */
        get: function () {
            return this._web;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PageContext.prototype, "_featureInfo", {
        /**
         * Contextual information for the features that are enabled on the SharePoint site
         * that is hosting the page.
         * @internal
         */
        get: function () {
            return this._spFeatureInfo;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PageContext.prototype, "legacyPageContext", {
        /**
         * An object providing classic SharePoint properties that may be required by certain legacy scripts.
         *
         * @remarks
         * This property is provided to facilitate migration of legacy code. It returns a JavaScript
         * object whose contents are similar to the `_spPageContextInfo` window variable from classic pages.
         * The contents of this variable may change in future releases of SharePoint.  For this reason,
         * new projects are encouraged to use the SharePoint Framework TypeScript APIs instead, since they
         * are fully documented and provide reliable backwards compatibility guarantees.
         *
         * NOTE: If certain functionality is exposed in the `legacyPageContext` but does not seem to have
         * a proper TypeScript API, please file an issue on GitHub.  The intention is that no modern application
         * should need to rely on the `legacyPageContext` object.
         */
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        get: function () {
            return this._legacyPageContext;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PageContext.prototype, "isInitialized", {
        /**
         * Returns whether the `PageContext` has been initialized.
         */
        get: function () {
            return this._isInitialized;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PageContext.prototype, "_initData", {
        /**
         * Returns data object that was used to initialize the `PageContext` instance.
         *
         * @internal
         */
        get: function () {
            return this._initializationData;
        },
        enumerable: false,
        configurable: true
    });
    PageContext.prototype._getPropertyDefinitions = function () {
        var properties = [
            {
                id: PageContext._pageContextSiteDataDynamicProperty,
                title: Strings_resx_1.default.ddpSiteDataTitle
            },
            {
                id: PageContext._pageContextUserDynamicProperty,
                title: Strings_resx_1.default.ddpUserDataTitle
            },
            {
                id: PageContext._pageContextUrlDataDynamicProperty,
                title: Strings_resx_1.default.ddpUrlDataTitle
            },
            {
                id: PageContext._pageContextSearchDataDynamicProperty,
                title: Strings_resx_1.default.ddpSearchDataTitle
            }
        ];
        return properties;
    };
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    PageContext.prototype._getPropertyValue = function (propertyId) {
        switch (propertyId) {
            case PageContext._pageContextUserDynamicProperty:
                return {
                    userName: this.user.displayName,
                    userEmail: this.user.email,
                    userLogin: this.user.loginName
                };
            case PageContext._pageContextSiteDataDynamicProperty:
                return {
                    siteUrl: this.web.absoluteUrl,
                    siteCollectionUrl: this.site.absoluteUrl,
                    listUrl: document &&
                        document.location &&
                        this.list &&
                        document.location.origin + this.list.serverRelativeUrl,
                    itemId: this.listItem && this.listItem.id,
                    siteClassification: this.site.classification,
                    siteTitle: this.web.title,
                    siteDescription: this.web.description,
                    siteLogoUrl: document && document.location && document.location.origin + this.web.logoUrl
                };
            case PageContext._pageContextUrlDataDynamicProperty:
                return {
                    queryParameters: this._getUrlQueryParameterCollection(),
                    fragment: this._getUrlFragmentIdentifier()
                };
            case PageContext._pageContextSearchDataDynamicProperty:
                return this._searchData;
            default:
                return undefined;
        }
    };
    PageContext.prototype._getAnnotatedPropertyValue = function (propertyId) {
        var propMetadata = {};
        switch (propertyId) {
            case PageContext._pageContextUserDynamicProperty:
                propMetadata = {
                    userName: {
                        title: Strings_resx_1.default.ddvUserName,
                        description: Strings_resx_1.default.ddvUserNameDesc
                    },
                    userEmail: {
                        title: Strings_resx_1.default.ddvUserEmail,
                        description: Strings_resx_1.default.ddvUserEmailDesc
                    },
                    userLogin: {
                        title: Strings_resx_1.default.ddvUserLogin,
                        description: Strings_resx_1.default.ddvUserLoginDesc
                    }
                };
                break;
            case PageContext._pageContextSiteDataDynamicProperty:
                propMetadata = {
                    siteUrl: {
                        title: Strings_resx_1.default.ddvSiteUrl,
                        description: Strings_resx_1.default.ddvSiteUrlDesc
                    },
                    siteCollectionUrl: {
                        title: Strings_resx_1.default.ddvSiteCollectionUrl,
                        description: Strings_resx_1.default.ddvSiteCollectionUrlDesc
                    },
                    listUrl: {
                        title: Strings_resx_1.default.ddvListUrl,
                        description: Strings_resx_1.default.ddvListUrlDesc
                    },
                    itemId: {
                        title: Strings_resx_1.default.ddvItemId,
                        description: Strings_resx_1.default.ddvItemIdDesc
                    },
                    siteClassification: {
                        title: Strings_resx_1.default.ddvSiteClassification,
                        description: Strings_resx_1.default.ddvSiteClassificationDesc
                    },
                    siteTitle: {
                        title: Strings_resx_1.default.ddvSiteTitle,
                        description: Strings_resx_1.default.ddvSiteTitleDesc
                    },
                    siteDescription: {
                        title: Strings_resx_1.default.ddvSiteDescription,
                        description: Strings_resx_1.default.ddvSiteDescriptionDesc
                    },
                    siteLogoUrl: {
                        title: Strings_resx_1.default.ddvSiteLogoUrl,
                        description: Strings_resx_1.default.ddvSiteLogoUrlDesc
                    }
                };
                break;
            case PageContext._pageContextUrlDataDynamicProperty:
                propMetadata = {
                    queryParameters: {
                        title: Strings_resx_1.default.ddvQueryParameters,
                        description: Strings_resx_1.default.ddvQueryParametersDesc
                    },
                    fragment: {
                        title: Strings_resx_1.default.ddvFragment,
                        description: Strings_resx_1.default.ddvFragmentDesc
                    }
                };
                break;
            case PageContext._pageContextSearchDataDynamicProperty:
                propMetadata = {
                    searchQuery: {
                        title: Strings_resx_1.default.ddvSearchQuery,
                        description: Strings_resx_1.default.ddvSearchQueryDesc
                    },
                    searchScope: {
                        title: Strings_resx_1.default.ddvSearchScope,
                        description: Strings_resx_1.default.ddvSearchScopeDesc
                    }
                };
                break;
        }
        return {
            sampleValue: this._getPropertyValue(propertyId),
            metadata: propMetadata
        };
    };
    /**
     * Returns decoded key-value pair collection for the current page's query parameters.
     *
     * @remarks
     * If the key or value doesn't exist, it adds an empty string instead.
     */
    PageContext.prototype._getUrlQueryParameterCollection = function () {
        var queryParamCollection = {};
        var queryParams = new URL(self.location.href).searchParams;
        queryParams.forEach(function (value, key) {
            queryParamCollection[decodeURIComponent(key)] = decodeURIComponent(value || '');
        });
        return queryParamCollection;
    };
    /**
     * Returns the fragment identifier for the current page's url.
     */
    PageContext.prototype._getUrlFragmentIdentifier = function () {
        return new URL(self.location.href).hash.substring(1); // removing '#' which is at the 0 index.
    };
    /**
     * The service key for PageContext.
     */
    PageContext.serviceKey = sp_core_library_1.ServiceKey.create('sp-page-context:PageContext', PageContext);
    PageContext._logSource = sp_diagnostics_1._LogSource.create('PageContext');
    PageContext._pageContextInfoId = 'PageContextInfoProperties';
    PageContext._pageContextUserDynamicProperty = 'UserData';
    PageContext._pageContextSiteDataDynamicProperty = 'SiteData';
    PageContext._pageContextUrlDataDynamicProperty = 'UrlData';
    PageContext._pageContextSearchDataDynamicProperty = 'SearchData';
    return PageContext;
}());
exports.default = PageContext;
//# sourceMappingURL=PageContext.js.map