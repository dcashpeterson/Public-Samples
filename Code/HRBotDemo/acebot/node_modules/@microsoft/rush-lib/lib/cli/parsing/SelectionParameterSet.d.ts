import { type ITerminal } from '@rushstack/node-core-library';
import type { CommandLineParameterProvider } from '@rushstack/ts-command-line';
import type { RushConfiguration } from '../../api/RushConfiguration';
import type { RushConfigurationProject } from '../../api/RushConfigurationProject';
import { type IGitSelectorParserOptions } from '../../logic/selectors/GitChangedProjectSelectorParser';
/**
 * This class is provides the set of command line parameters used to select projects
 * based on dependencies.
 *
 * It is a separate component such that unrelated actions can share the same parameters.
 */
export declare class SelectionParameterSet {
    private readonly _rushConfiguration;
    private readonly _fromProject;
    private readonly _impactedByProject;
    private readonly _impactedByExceptProject;
    private readonly _onlyProject;
    private readonly _toProject;
    private readonly _toExceptProject;
    private readonly _fromVersionPolicy;
    private readonly _toVersionPolicy;
    private readonly _selectorParserByScope;
    constructor(rushConfiguration: RushConfiguration, action: CommandLineParameterProvider, gitOptions: IGitSelectorParserOptions);
    /**
     * Computes the set of selected projects based on all parameter values.
     *
     * If no parameters are specified, returns all projects in the Rush config file.
     */
    getSelectedProjectsAsync(terminal: ITerminal): Promise<Set<RushConfigurationProject>>;
    /**
     * Represents the selection as `--filter` parameters to pnpm.
     *
     * @remarks
     * This is a separate from the selection to allow the filters to be represented more concisely.
     *
     * @see https://pnpm.js.org/en/filtering
     */
    getPnpmFilterArgumentsAsync(terminal: ITerminal): Promise<string[]>;
    /**
     * Usage telemetry for selection parameters. Only saved locally, and if requested in the config.
     */
    getTelemetry(): {
        [key: string]: string;
    };
    /**
     * Computes the referents of parameters that accept a project identifier.
     * Handles '.', unscoped names, and scoped names.
     */
    private _evaluateProjectParameterAsync;
}
//# sourceMappingURL=SelectionParameterSet.d.ts.map