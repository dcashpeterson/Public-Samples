"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/**
 * This class builds specific errors for sp-loader.
 * This is short-hand for all the error creation, so the production code looks cleaner.
 */
var sp_diagnostics_1 = require("@microsoft/sp-diagnostics");
var SPLoaderError_1 = tslib_1.__importStar(require("./SPLoaderError"));
var telemetryConstants = tslib_1.__importStar(require("../utilities/telemetryConstants"));
var Error_resx_1 = tslib_1.__importDefault(require("./Error.resx"));
var loadComponentImplEventName = 'loadComponentImpl';
var ErrorBuilder = /** @class */ (function () {
    function ErrorBuilder() {
    }
    ErrorBuilder.buildLoadComponentError = function (manifest, error) {
        // <value>Failed to load component "{0}" ({1}).
        // Original error: {2}</value>
        return this._buildErrorWithVerboseLog(SPLoaderError_1.SPLoaderErrorCode.loadComponentError, error, false, telemetryConstants.loadComponentLogSource, loadComponentImplEventName, manifest.id, manifest.alias, error.message);
    };
    ErrorBuilder.buildLoadComponentReturnsEmptyError = function (manifest) {
        // <value>loadComponent() returned an empty object for component "{0}" ({1}).</value>
        return this._buildErrorWithVerboseLog(SPLoaderError_1.SPLoaderErrorCode.loadComponentReturnsEmptyError, undefined, false, telemetryConstants.loadComponentLogSource, loadComponentImplEventName, manifest.id, manifest.alias);
    };
    ErrorBuilder.buildLoadComponentReturnsDefaultEmptyError = function (manifest) {
        // <value>loadComponent() returned an object with an empty default property for component "{0}" ({1}).</value>
        return this._buildErrorWithVerboseLog(SPLoaderError_1.SPLoaderErrorCode.loadComponentReturnsDefaultEmptyError, undefined, false, telemetryConstants.loadComponentLogSource, loadComponentImplEventName, manifest.id, manifest.alias);
    };
    ErrorBuilder.buildLoadComponentDependencyError = function (manifest, error) {
        // <value>Failed to load component dependency "{0}" from component "{1}" ({2}).
        // Original error: {3}</value>
        return this._buildErrorWithVerboseLog(SPLoaderError_1.SPLoaderErrorCode.loadComponentDependencyError, error, false, telemetryConstants.loadComponentLogSource, loadComponentImplEventName, manifest.id, manifest.alias, error.message);
    };
    ErrorBuilder.buildManifestNotFoundError = function (moduleConfiguration) {
        // <value>Manifest not found for component id "{0}" and version "{1}".</value>
        return this._buildErrorWithVerboseLog(SPLoaderError_1.SPLoaderErrorCode.manifestNotFoundError, undefined, false, telemetryConstants.loadComponentLogSource, undefined, moduleConfiguration.id, moduleConfiguration.version);
    };
    ErrorBuilder.buildLoadPathDependencyBlockedError = function (manifest, name) {
        // <value>Failed to load path dependency "{0}" from component "{1}" ({2}) due to another dependency that failed to load.</value>
        return this._buildErrorWithVerboseLog(SPLoaderError_1.SPLoaderErrorCode.loadPathDependencyBlockedByAnotherDependencyError, undefined, false, telemetryConstants.loadComponentLogSource, undefined, name, manifest.id, manifest.alias);
    };
    ErrorBuilder.buildModuleHasUndeclaredDependencyError = function (manifest, dependencyName) {
        // <value>The entry point for component "{0}" ({1}) has a dependency on "{2}" that is not declared in the manifest.</value>
        return this._buildErrorWithErrorLog(SPLoaderError_1.SPLoaderErrorCode.moduleHasUndeclaredDependencyError, undefined, true, // This is an error when building the manifest/JS so it's an expected error
        telemetryConstants.loadComponentLogSource, undefined, manifest.id, manifest.alias, dependencyName);
    };
    ErrorBuilder.buildLoadEntryPointError = function (manifest, error) {
        // <value>Failed to load entry point from component "{0}" ({1}).
        // Original error: {2}</value>
        return this._buildErrorWithVerboseLog(SPLoaderError_1.SPLoaderErrorCode.loadEntryPointError, error, false, telemetryConstants.loadComponentLogSource, undefined, manifest.id, manifest.alias, error.message);
    };
    ErrorBuilder.buildLoadPathDependencyError = function (manifest, dependencyName, error) {
        // <value>Failed to load path dependency "{0}" from component "{1}" ({2}).
        // Original error: {3}</value>
        return this._buildErrorWithVerboseLog(SPLoaderError_1.SPLoaderErrorCode.loadPathDependencyError, error, false, telemetryConstants.loadComponentLogSource, undefined, dependencyName, manifest.id, manifest.alias, error.message);
    };
    ErrorBuilder.buildMissingPathDependencyError = function (manifest, dependencyName) {
        // <value>Missing path dependency "{0}" from component "{1}" ({2}). Existing path dependencies: {3}</value>
        return this._buildErrorWithVerboseLog(SPLoaderError_1.SPLoaderErrorCode.missingPathDependencyError, undefined, true, telemetryConstants.loadComponentLogSource, undefined, dependencyName, manifest.id, manifest.alias, Object.keys(manifest.loaderConfig.scriptResources).join(Error_resx_1.default.listSeparator));
    };
    ErrorBuilder.buildLoadComponentDependencyFailoverPathError = function (manifest, dependencyName, failoverPath, error) {
        // <value>Failed to load component dependency "{0}" with failover path "{1}" from component "{2}" ({3}).
        // Original error: {4}</value>
        return this._buildErrorWithVerboseLog(SPLoaderError_1.SPLoaderErrorCode.loadComponentDependencyFailoverPathError, error, false, telemetryConstants.loadComponentLogSource, undefined, dependencyName, typeof failoverPath === 'object' ? failoverPath.path : failoverPath, manifest.id, manifest.alias, error.message);
    };
    ErrorBuilder.buildLoadScriptWithStringError = function () {
        // <value>loadScript function doesn't allow a string as 2nd parameter. Use ILoadScriptOptions instead.</value>
        return this._buildErrorWithErrorLog(SPLoaderError_1.SPLoaderErrorCode.loadScriptWithStringError, undefined, true, // Expected error, as it is caused by a wrong input from the user
        telemetryConstants.loadScriptLogSource, undefined);
    };
    ErrorBuilder.buildUrlStatusLocalhostFileNotFoundError = function (manifest, resourceName, url) {
        // <value>Failed to load URL '{3}' for resource '{2}' in component '{0}' ({1}). The file was not found in the server.
        // Make sure that you are running 'gulp serve'.</value>
        return this._buildErrorWithErrorLog(SPLoaderError_1.SPLoaderErrorCode.urlStatusLocalhostFileNotFoundError, undefined, true, // Expected error, as it is caused by a user action (not running gulp serve)
        telemetryConstants.loadScriptLogSource, undefined, manifest.id, manifest.alias, resourceName, url);
    };
    ErrorBuilder.buildUrlStatusFileNotFoundError = function (manifest, resourceName, url) {
        // <value>Failed to load URL '{3}' for resource '{2}' in component '{0}' ({1}). The file was not found in the server.</value>
        return this._buildErrorWithErrorLog(SPLoaderError_1.SPLoaderErrorCode.urlStatusFileNotFoundError, undefined, true, // Expected error, as it is caused by a wrong URL in the manifest
        telemetryConstants.loadScriptLogSource, undefined, manifest.id, manifest.alias, resourceName, url);
    };
    ErrorBuilder.buildUrlStatusForbiddenError = function (manifest, resourceName, url) {
        // <value>Failed to load URL '{3}' for resource '{2}' in component '{0}' ({1}). The access to the file is forbidden.</value>
        return this._buildErrorWithErrorLog(SPLoaderError_1.SPLoaderErrorCode.urlStatusForbiddenError, undefined, true, // Expected error, as it is caused by accessing a URL/CDN without permission
        telemetryConstants.loadScriptLogSource, undefined, manifest.id, manifest.alias, resourceName, url);
    };
    ErrorBuilder.buildUrlStatusClientErrorError = function (manifest, resourceName, url) {
        // <value>Failed to load URL '{3}' for resource '{2}' in component '{0}' ({1}). There was an error requesting the file.</value>
        return this._buildErrorWithErrorLog(SPLoaderError_1.SPLoaderErrorCode.urlStatusClientErrorError, undefined, false, // Unexpected error
        telemetryConstants.loadScriptLogSource, undefined, manifest.id, manifest.alias, resourceName, url);
    };
    ErrorBuilder.buildUrlStatusServerErrorError = function (manifest, resourceName, url) {
        // <value>Failed to load URL '{3}' for resource '{2}' in component '{0}' ({1}). There was a problem in the server.</value>
        return this._buildErrorWithErrorLog(SPLoaderError_1.SPLoaderErrorCode.urlStatusServerErrorError, undefined, false, // Unexpected error
        telemetryConstants.loadScriptLogSource, undefined, manifest.id, manifest.alias, resourceName, url);
    };
    ErrorBuilder.buildUrlStatusLocalhostNetworkErrorError = function (manifest, resourceName, url) {
        // <value>Failed to load URL '{3}' for resource '{2}' in component '{0}' ({1}). There was a network problem.
        // Make sure that you are running 'gulp serve' and you have run 'gulp trust-dev-cert'.</value>
        return this._buildErrorWithErrorLog(SPLoaderError_1.SPLoaderErrorCode.urlStatusLocalhostNetworkErrorError, undefined, true, // Expected error, as it is caused by a user action (not running gulp serve)
        telemetryConstants.loadScriptLogSource, undefined, manifest.id, manifest.alias, resourceName, url);
    };
    ErrorBuilder.buildUrlStatusDocLibNetworkErrorError = function (manifest, resourceName, url) {
        // <value>Failed to load URL '{3}' for resource '{2}' in component '{0}' ({1}). There was a network problem.</value>
        return this._buildErrorWithErrorLog(SPLoaderError_1.SPLoaderErrorCode.urlStatusDocLibNetworkErrorError, undefined, true, // Expected error, as it is caused by the tenant admin not enabling CDN
        telemetryConstants.loadScriptLogSource, undefined, manifest.id, manifest.alias, resourceName, url);
    };
    ErrorBuilder.buildUrlStatusHttpsNetworkErrorError = function (manifest, resourceName, url) {
        // <value>Failed to load URL '{3}' for resource '{2}' in component '{0}' ({1}). There was a network problem.
        // This may be a problem with a HTTPS certificate. Make sure you have the right certificate.</value>
        return this._buildErrorWithErrorLog(SPLoaderError_1.SPLoaderErrorCode.urlStatusHttpsNetworkErrorError, undefined, true, telemetryConstants.loadScriptLogSource, undefined, manifest.id, manifest.alias, resourceName, url);
    };
    ErrorBuilder.buildUrlStatusNetworkErrorError = function (manifest, resourceName, url) {
        // <value>Failed to load URL '{3}' for resource '{2}' in component '{0}' ({1}). There was a network problem.</value>
        return this._buildErrorWithErrorLog(SPLoaderError_1.SPLoaderErrorCode.urlStatusNetworkErrorError, undefined, true, telemetryConstants.loadScriptLogSource, undefined, manifest.id, manifest.alias, resourceName, url);
    };
    ErrorBuilder.buildUrlStatusUndefinedError = function (manifest, resourceName, url) {
        // <value>Failed to load URL '{3}' for resource '{2}' in component '{0}' ({1}) because of unknown problems.</value>
        return this._buildErrorWithErrorLog(SPLoaderError_1.SPLoaderErrorCode.urlStatusUndefinedError, undefined, false, // Unexpected error
        telemetryConstants.loadScriptLogSource, undefined, manifest.id, manifest.alias, resourceName, url);
    };
    ErrorBuilder.buildScriptFailedToCreateGlobalError = function (globalName, scriptUrl) {
        return this._buildErrorWithErrorLog(SPLoaderError_1.SPLoaderErrorCode.failedToCreateGlobalVariable, undefined, false, telemetryConstants.loadScriptLogSource, undefined, globalName, scriptUrl);
    };
    ErrorBuilder.buildModuleHasFailedDependencyError = function (resource, dependency) {
        // <value>Failed to load module '{0}' because dependency {1} was not loaded</value>
        return this._buildErrorWithErrorLog(SPLoaderError_1.SPLoaderErrorCode.dependencyLoadError, undefined, true, // Unexpected error
        telemetryConstants.loadScriptLogSource, undefined, resource, dependency);
    };
    ErrorBuilder._buildErrorWithVerboseLog = function (errorCode, innerError, isExpected, source, eventName) {
        var params = [];
        for (var _i = 5; _i < arguments.length; _i++) {
            params[_i - 5] = arguments[_i];
        }
        var error = new (SPLoaderError_1.default.bind.apply(SPLoaderError_1.default, tslib_1.__spreadArray([void 0, errorCode, innerError, isExpected], params, false)))();
        sp_diagnostics_1._TraceLogger.logVerbose(source, error.message, eventName);
        return error;
    };
    ErrorBuilder._buildErrorWithErrorLog = function (errorCode, innerError, isExpected, source, eventName) {
        var params = [];
        for (var _i = 5; _i < arguments.length; _i++) {
            params[_i - 5] = arguments[_i];
        }
        var error = new (SPLoaderError_1.default.bind.apply(SPLoaderError_1.default, tslib_1.__spreadArray([void 0, errorCode, innerError, isExpected], params, false)))();
        sp_diagnostics_1._TraceLogger.logError(source, error, eventName);
        return error;
    };
    return ErrorBuilder;
}());
exports.default = ErrorBuilder;
//# sourceMappingURL=ErrorBuilder.js.map