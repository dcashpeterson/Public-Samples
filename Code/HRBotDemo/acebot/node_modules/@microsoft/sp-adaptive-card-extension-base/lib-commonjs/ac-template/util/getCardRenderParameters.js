"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCardRenderParameters = void 0;
var tslib_1 = require("tslib");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var Strings_resx_1 = tslib_1.__importDefault(require("../../loc/Strings.resx"));
var actionButtonHelper_1 = require("./actionButtonHelper");
var Killswitches_1 = require("../../common/Killswitches");
var BaseTemplateCardView_1 = require("../../views/card/BaseTemplateCardView");
var CardButtonComponent_1 = require("../../components/CardButtonComponent");
var BaseComponent_1 = require("../../components/BaseComponent");
var textInputL1Template_1 = require("../textInputL1Template");
var imageL1TemplateSelectAction_1 = require("../imageL1TemplateSelectAction");
var imageL1Template_1 = require("../imageL1Template");
var primaryTextL1TemplateSelectAction_1 = require("../primaryTextL1TemplateSelectAction");
var primaryTextL1Template_1 = require("../primaryTextL1Template");
var basicL1TemplateSelectAction_1 = require("../basicL1TemplateSelectAction");
var basicL1Template_1 = require("../basicL1Template");
var searchL1Template_1 = require("../searchL1Template");
function getCardRenderParameters(cardView, cardSize, deviceContext, template, defaultIconProperty, defaultTitle, manifest, instanceId, cardViewId) {
    //
    // TODO: when implementing ACE components we need to add checks like if ('cardButtons' in cardView, etc.)
    // ADO item: https://onedrive.visualstudio.com/DefaultCollection/WEX!/_workitems/edit/1642050
    //
    var onCardSelection = cardView.onCardSelection;
    var cardViewParameters = !(0, Killswitches_1.isGenerateComponentIdsKSActivated)()
        ? _generateComponentIds(instanceId, cardView._getCardViewParameters())
        : cardView._getCardViewParameters();
    var cardButtons;
    var data;
    var cardViewTemplate;
    var templateType = 'Basic';
    if (cardView instanceof BaseTemplateCardView_1.BaseTemplateCardView) {
        cardButtons = cardView.cardButtons;
        data = cardView.data;
        cardViewTemplate = cardView.template;
        templateType = cardView._templateType;
    }
    else if (deviceContext === 'Mobile' || !!sessionStorage.getItem('spfx-debug')) {
        //
        // This is TEMPORARY code and should be removed when IDC implements support for ACE Components
        //
        if (cardViewParameters.image) {
            templateType = 'Image';
        }
        else {
            templateType = 'Basic';
        }
        if (cardViewParameters.footer &&
            cardViewParameters.footer.length &&
            cardViewParameters.footer[0].componentName === 'cardButton') {
            cardButtons = cardViewParameters.footer.map(function (button) {
                return (0, CardButtonComponent_1._cardButtonParametersToCardButton)(button);
            });
        }
        data = _getData(cardViewParameters);
        if (!template) {
            cardViewTemplate = _getTemplate(cardViewParameters, !!onCardSelection, cardSize, instanceId);
        }
    }
    if (!template) {
        template = cardViewTemplate;
    }
    var selectAction;
    if (template) {
        if (!(0, Killswitches_1.isRefactorParseCardButtonsToAction)()) {
            (0, actionButtonHelper_1.appendActions)(template, cardButtons, cardSize, templateType, instanceId);
        }
        else if (cardButtons !== undefined && !(templateType === 'Image' && cardSize !== 'Large')) {
            (0, actionButtonHelper_1.appendActions)(template, cardButtons, cardSize, templateType, instanceId);
        }
    }
    if (onCardSelection) {
        // The ACE WebPart checks for this id to determine whether a card action was from a button or the card
        var action = (0, actionButtonHelper_1.createAction)(onCardSelection, 'select-action');
        if ((!(0, Killswitches_1.isSupportActionExecuteKSActivated)() && action.type === 'Action.Execute') ||
            action.type === 'Action.OpenUrl' ||
            action.type === 'Action.Submit' ||
            action.type === 'VivaAction.GetLocation' ||
            action.type === 'VivaAction.ShowLocation' ||
            action.type === 'VivaAction.SelectMedia') {
            selectAction = action;
        }
    }
    if (cardView._templateType === 'Image' && data.imageAltText === undefined) {
        data.imageAltText = !(0, Killswitches_1.isAddDefaultImageAltTextKSActivated)()
            ? sp_core_library_1.Text.format(Strings_resx_1.default.ImageAltText, manifest.alias)
            : '';
    }
    var cardData = !(0, Killswitches_1.isIconAltTextNotOverriddenKSActivated)()
        ? tslib_1.__assign(tslib_1.__assign({ selectAction: selectAction, iconProperty: defaultIconProperty, title: defaultTitle, actionButtons: deviceContext !== 'Mobile'
                ? (0, actionButtonHelper_1.parseButtonsToAction)(cardButtons, templateType, cardSize, instanceId)
                : undefined }, data), { 
            // defined iconAltText after spread operator to avoid value getting overridden.
            iconAltText: !(0, Killswitches_1.isAddDefaultImageAltTextKSActivated)()
                ? (data === null || data === void 0 ? void 0 : data.iconAltText) || sp_core_library_1.Text.format(Strings_resx_1.default.IconAltText, manifest.alias)
                : (data === null || data === void 0 ? void 0 : data.iconAltText) || Strings_resx_1.default.DefaultIconAltText }) : tslib_1.__assign({ selectAction: selectAction, iconProperty: defaultIconProperty, iconAltText: !(0, Killswitches_1.isAddDefaultImageAltTextKSActivated)()
            ? (data === null || data === void 0 ? void 0 : data.iconAltText) || sp_core_library_1.Text.format(Strings_resx_1.default.IconAltText, manifest.alias)
            : (data === null || data === void 0 ? void 0 : data.iconAltText) || Strings_resx_1.default.DefaultIconAltText, title: defaultTitle, actionButtons: deviceContext !== 'Mobile'
            ? (0, actionButtonHelper_1.parseButtonsToAction)(cardButtons, templateType, cardSize, instanceId)
            : undefined }, data);
    var cardProperties = {
        iconProperty: (data === null || data === void 0 ? void 0 : data.iconProperty) || defaultIconProperty,
        size: cardSize,
        title: (data === null || data === void 0 ? void 0 : data.title) || defaultTitle,
        templateType: templateType,
        cardViewId: !(0, Killswitches_1.isProvideCardViewIdKSActivated)() ? cardViewId : undefined
    };
    if (!(0, Killswitches_1.isMovePropertiesFromDataToCardPropertiesKSActivated)()) {
        // at some point we will get rid of data property so we need to move important bits to cardProperties
        cardProperties.defaultIconAltText = sp_core_library_1.Text.format(Strings_resx_1.default.IconAltText, manifest.alias);
        cardProperties.selectAction = selectAction;
        cardProperties.defaultImageAltText = cardViewParameters.image
            ? sp_core_library_1.Text.format(Strings_resx_1.default.ImageAltText, manifest.alias)
            : undefined;
    }
    return {
        data: cardData,
        template: template,
        cardViewParameters: cardViewParameters,
        cardProperties: cardProperties
    };
}
exports.getCardRenderParameters = getCardRenderParameters;
function _generateComponentIds(instanceId, cardViewParameters) {
    //
    // Ideally, we don't want to modify the original parameters object provided by a developer.
    // However, in that case we need to perform deep clone and this operation is not too fast.
    // For now we will modify the original object and check for feedback/issues.
    // author: aterentiev
    //
    _generateComponentIdsForCardViewPart(instanceId, 'cardBar', cardViewParameters.cardBar);
    _generateComponentIdsForCardViewPart(instanceId, 'header', cardViewParameters.header);
    _generateComponentIdsForCardViewPart(instanceId, 'body', cardViewParameters.body);
    _generateComponentIdsForCardViewPart(instanceId, 'footer', cardViewParameters.footer);
    return cardViewParameters;
}
function _generateComponentIdsForCardViewPart(instanceId, cardViewPart, components) {
    if (!components) {
        return;
    }
    components.forEach(function (component, index) {
        component.id = (0, BaseComponent_1.generateComponentId)(instanceId, cardViewPart, component, index);
        if (component.componentName === 'searchBox' || component.componentName === 'textInput') {
            // we also need to generate id for the button
            var button = component.button;
            if (button && !button.id) {
                button.id = "".concat(component.id, "-button");
            }
        }
    });
}
function _getData(cardViewParameters) {
    var _a, _b, _c;
    var cardBar = cardViewParameters.cardBar, image = cardViewParameters.image, header = cardViewParameters.header, body = cardViewParameters.body, footer = cardViewParameters.footer;
    var data = {
        title: cardBar[0].title,
        iconProperty: (_a = cardBar[0].icon) === null || _a === void 0 ? void 0 : _a.url,
        iconAltText: (_b = cardBar[0].icon) === null || _b === void 0 ? void 0 : _b.altText,
        _iconPropertyFallback: (_c = cardBar[0].icon) === null || _c === void 0 ? void 0 : _c._urlFallback
    };
    if (header && header.length) {
        data.primaryText = header[0].text;
    }
    if (image) {
        var imageData = data;
        imageData.imageUrl = image.url;
        imageData.imageAltText = image.altText;
        imageData._imageUrlFallback = image._urlFallback;
    }
    if (body && body.length) {
        switch (body[0].componentName) {
            case 'text':
                var bodyText = body[0];
                data.description = bodyText.text;
                break;
            case 'searchBox':
                data = tslib_1.__assign(tslib_1.__assign({}, data), _getSearchBoxData(body[0]));
                break;
            default:
                data = tslib_1.__assign(tslib_1.__assign({}, data), _getTextInputData(body[0]));
                break;
        }
    }
    if (footer && footer.length) {
        switch (footer[0].componentName) {
            case 'searchFooter':
                data = tslib_1.__assign(tslib_1.__assign({}, data), _getSearchFooterData(footer[0]));
                break;
            case 'textInput':
                data = tslib_1.__assign(tslib_1.__assign({}, data), _getTextInputData(footer[0]));
                break;
        }
    }
    return data;
}
function _getTextInputData(textInput) {
    var _a;
    var textInputData = {
        placeholder: textInput.placeholder || '',
        defaultValue: textInput.defaultValue || ''
    };
    if (textInput.iconBefore) {
        textInputData.iconBeforeProperty = textInput.iconBefore.url;
        textInputData.iconBeforeAltText = textInput.iconBefore.altText;
        textInputData._iconBeforeUrlFallback = textInput.iconBefore._urlFallback;
    }
    if (textInput.iconAfter) {
        textInputData.iconAfterProperty = textInput.iconAfter.url;
        textInputData.iconAfterAltText = textInput.iconAfter.altText;
        textInputData._iconAfterUrlFallback = textInput.iconAfter._urlFallback;
    }
    if (textInput.button && ((_a = textInput.button) === null || _a === void 0 ? void 0 : _a.icon)) {
        var button = textInput.button;
        textInputData.buttonIconProperty = button.icon.url;
        textInputData.buttonIconAltText = button.icon.altText;
        textInputData._buttonIconUrlFallback = button.icon._urlFallback;
    }
    return textInputData;
}
function _getSearchBoxData(searchBox) {
    return {
        placeholder: searchBox.placeholder || '',
        defaultValue: searchBox.defaultValue || ''
    };
}
function _getSearchFooterData(searcFooter) {
    var title = searcFooter.title, imageUrl = searcFooter.imageUrl, text = searcFooter.text;
    return {
        footerImageUrl: imageUrl || '',
        footerTitle: title,
        footerText: text
    };
}
function _getTemplate(cardViewParameters, hasSelectionAction, cardSize, instanceId) {
    var body = cardViewParameters.body, footer = cardViewParameters.footer, image = cardViewParameters.image;
    if (body && body.length) {
        switch (body[0].componentName) {
            case 'textInput':
                return (0, textInputL1Template_1.textInputL1Template)(cardViewParameters, hasSelectionAction, cardSize, instanceId);
            case 'searchBox':
                return (0, searchL1Template_1.searchL1Template)(cardViewParameters, hasSelectionAction, instanceId);
        }
    }
    if (footer && footer.length === 1 && footer[0].componentName === 'textInput') {
        return (0, textInputL1Template_1.textInputFooterL1Template)(cardViewParameters, hasSelectionAction, instanceId);
    }
    if (image) {
        return hasSelectionAction ? imageL1TemplateSelectAction_1.imageL1TemplateSelectAction : imageL1Template_1.imageL1Template;
    }
    if (body && body.length) {
        return hasSelectionAction ? primaryTextL1TemplateSelectAction_1.primaryTextL1TemplateSelectAction : primaryTextL1Template_1.primaryTextL1Template;
    }
    return hasSelectionAction ? basicL1TemplateSelectAction_1.basicL1TemplateSelectAction : basicL1Template_1.basicL1Template;
}
//# sourceMappingURL=getCardRenderParameters.js.map