/**
 * A disjoint set data structure
 */
export declare class DisjointSet<T extends object> {
    private _forest;
    private _parentMap;
    private _sizeMap;
    private _setByElement;
    constructor();
    destroy(): void;
    /**
     * Adds a new set containing specific object
     */
    add(x: T): void;
    /**
     * Unions the sets that contain two objects
     */
    union(a: T, b: T): void;
    getAllSets(): Iterable<Set<T>>;
    /**
     * Returns true if x and y are in the same set
     */
    isConnected(x: T, y: T): boolean;
    private _find;
    private _getParent;
    private _getSize;
}
//# sourceMappingURL=DisjointSet.d.ts.map