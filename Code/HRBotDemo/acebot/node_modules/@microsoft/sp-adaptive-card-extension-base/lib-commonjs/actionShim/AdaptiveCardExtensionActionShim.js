"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AdaptiveCardExtensionActionShim = void 0;
var sp_diagnostics_1 = require("@microsoft/sp-diagnostics");
var Killswitches_1 = require("../common/Killswitches");
var getOnBeforeActionArguments_1 = require("./getOnBeforeActionArguments");
/**
 * A shim for brokering the actions between an ACE's renderer e.g., the ACE web part and isolated ACE application.
 * This removes redundant handling logic while also allowing for each handler renderer to behave differently at
 * specific steps of action handling.
 *
 * TODO: Kill switch using this shim in `BaseAdaptiveCardExtensionWebPart._handleAction`.
 *
 * @internal
 */
var AdaptiveCardExtensionActionShim = /** @class */ (function () {
    function AdaptiveCardExtensionActionShim(ace, provider, location) {
        var _this = this;
        this.handleAction = function (action) {
            // action will be of type 'Action' as it is passed from QuickView
            var acAction = action;
            var actionType = acAction.getJsonTypeName();
            var actionArguments = (0, getOnBeforeActionArguments_1.getOnBeforeActionArguments)(actionType, action);
            if (!(0, Killswitches_1.isSurfaceOnBeforeActionKSActivated)() && actionArguments) {
                _this._ace._onBeforeAction(actionArguments, _this._location);
            }
            switch (actionType) {
                case 'Action.OpenUrl':
                    _this._handleOpenUrl(acAction);
                    break;
                case 'Action.ShowCard':
                    _this._handleShowCard(acAction);
                    break;
                case 'Action.Submit':
                    _this._handleSubmit(acAction);
                    break;
                case 'Action.Execute':
                    _this._handleExecute(acAction);
                    break;
                case 'VivaAction.GetLocation':
                    _this._handleGetLocation(acAction);
                    break;
                case 'VivaAction.SelectMedia':
                    _this._handleSelectMedia(acAction);
                    break;
                case 'VivaAction.ShowLocation':
                    _this._handleShowLocation(acAction);
                    break;
            }
        };
        this._ace = ace;
        this._provider = provider;
        this._location = location;
    }
    AdaptiveCardExtensionActionShim.prototype._handleGetLocation = function (action) {
        var _a;
        var monitor = new sp_diagnostics_1._QosMonitor('AdaptiveCardExtension._onExecuteAction.GetLocation', true);
        try {
            var params = {
                chooseLocationOnMap: (_a = action.parameters) === null || _a === void 0 ? void 0 : _a.chooseLocationOnMap
            };
            this._provider.getLocation(this._ace).getLocation(params);
            monitor.writeSuccess();
            this._provider.log(this._ace, 'VivaAction.GetLocation');
        }
        catch (error) {
            monitor.writeUnexpectedFailure(undefined, error);
        }
    };
    AdaptiveCardExtensionActionShim.prototype._handleOpenUrl = function (action) {
        var url = action.url;
        if (url) {
            this._provider.openUrl(this._ace, url);
            this._provider.log(this._ace, 'OpenUrl');
        }
    };
    AdaptiveCardExtensionActionShim.prototype._handleSelectMedia = function (action) {
        this._provider.selectMedia(this._ace, action).getMedia(action);
        this._provider.log(this._ace, 'VivaAction.SelectMedia');
    };
    AdaptiveCardExtensionActionShim.prototype._handleShowCard = function (action) {
        var actionArgs = {
            id: action.id,
            type: 'ShowCard'
        };
        this._provider.aceActionHandler(this._ace, actionArgs);
        this._provider.log(this._ace, 'ShowCard');
    };
    AdaptiveCardExtensionActionShim.prototype._handleShowLocation = function (action) {
        var _a;
        var monitor = new sp_diagnostics_1._QosMonitor('AdaptiveCardExtension._onExecuteAction.ShowLocation', true);
        try {
            var params = {
                locationCoordinates: (_a = action.parameters) === null || _a === void 0 ? void 0 : _a.locationCoordinates
            };
            this._provider.showLocation(this._ace).showLocation(params);
            monitor.writeSuccess();
            this._provider.log(this._ace, 'VivaAction.ShowLocation');
        }
        catch (error) {
            monitor.writeUnexpectedFailure(undefined, error);
        }
    };
    AdaptiveCardExtensionActionShim.prototype._handleSubmit = function (action) {
        var _this = this;
        var _a;
        var monitor = new sp_diagnostics_1._QosMonitor('AdaptiveCardExtension._onExecuteAction.handleConfirmationDialog', true);
        // Internally, a Submit action is used to open the quick view
        var viewId = (_a = action.data) === null || _a === void 0 ? void 0 : _a._internalQuickViewId;
        if (viewId) {
            this._provider.quickView(viewId);
        }
        else {
            var actionArgs_1 = {
                data: action.data,
                id: action.id,
                type: 'Submit'
            };
            this._provider
                .confirmationDialog(actionArgs_1)
                .then(function (isCancelled) {
                monitor.writeSuccess();
                if (!isCancelled) {
                    _this._provider.aceActionHandler(_this._ace, actionArgs_1);
                    _this._provider.log(_this._ace, 'Submit');
                }
            })
                .catch(function () {
                monitor.writeUnexpectedFailure();
            });
        }
    };
    AdaptiveCardExtensionActionShim.prototype._handleExecute = function (action) {
        if (!(0, Killswitches_1.isSupportActionExecuteKSActivated)()) {
            var actionArgs = {
                id: action.id,
                verb: action.verb,
                data: action.data,
                type: 'Execute'
            };
            this._provider.aceActionHandler(this._ace, actionArgs);
            this._provider.log(this._ace, 'Execute');
        }
    };
    return AdaptiveCardExtensionActionShim;
}());
exports.AdaptiveCardExtensionActionShim = AdaptiveCardExtensionActionShim;
//# sourceMappingURL=AdaptiveCardExtensionActionShim.js.map