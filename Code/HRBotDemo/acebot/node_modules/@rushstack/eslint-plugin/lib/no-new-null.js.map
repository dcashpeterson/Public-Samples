{"version":3,"file":"no-new-null.js","sourceRoot":"","sources":["../src/no-new-null.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport type { TSESLint, TSESTree } from '@typescript-eslint/experimental-utils';\r\nimport { AST_NODE_TYPES } from '@typescript-eslint/experimental-utils';\r\n\r\ntype MessageIds = 'error-new-usage-of-null';\r\ntype Options = [];\r\n\r\ntype Accessible = {\r\n  accessibility?: TSESTree.Accessibility;\r\n};\r\n\r\nconst noNewNullRule: TSESLint.RuleModule<MessageIds, Options> = {\r\n  meta: {\r\n    type: 'problem',\r\n    messages: {\r\n      'error-new-usage-of-null':\r\n        'Usage of \"null\" is deprecated except when describing legacy APIs; use \"undefined\" instead'\r\n    },\r\n    schema: [\r\n      {\r\n        type: 'object',\r\n        additionalProperties: false\r\n      }\r\n    ],\r\n    docs: {\r\n      description:\r\n        'Prevent usage of JavaScript\\'s \"null\" keyword in new type declarations. To avoid hampering usage' +\r\n        ' of preexisting APIs that require \"null\", the rule ignores declarations that are local variables,' +\r\n        ' private members, or types that are not exported.',\r\n      // Deprecated in ESLint v8; Keep for backwards compatibility\r\n      category: 'Stylistic Issues',\r\n      recommended: 'error',\r\n      url: 'https://www.npmjs.com/package/@rushstack/eslint-plugin'\r\n    } as TSESLint.RuleMetaDataDocs\r\n  },\r\n\r\n  create: (context: TSESLint.RuleContext<MessageIds, Options>) => {\r\n    /**\r\n     * Returns true if the accessibility is not explicitly set to private or protected, e.g. class properties, methods.\r\n     */\r\n    function isPubliclyAccessible(node?: Accessible): boolean {\r\n      const accessibility = node?.accessibility;\r\n      return !(accessibility === 'private' || accessibility === 'protected');\r\n    }\r\n\r\n    /**\r\n     * Let's us check the accessibility field of certain types of nodes\r\n     */\r\n    function isAccessible(node?: unknown): node is Accessible {\r\n      if (!node) {\r\n        return false;\r\n      }\r\n      switch ((node as TSESTree.Node).type) {\r\n        case AST_NODE_TYPES.MethodDefinition:\r\n          return true;\r\n        case AST_NODE_TYPES.PropertyDefinition:\r\n          return true;\r\n        case AST_NODE_TYPES.TSIndexSignature:\r\n          return true;\r\n        case AST_NODE_TYPES.TSParameterProperty:\r\n          return true;\r\n        default:\r\n          return false;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Checks if the type declaration is lifted to be exportable to others\r\n     */\r\n    function isDefinitionExportable(node?: TSESTree.Node): boolean {\r\n      switch (node?.type) {\r\n        case undefined: // base case\r\n          return false;\r\n        case AST_NODE_TYPES.BlockStatement: // we are an inline function, scope is not exportable\r\n          return false;\r\n        case AST_NODE_TYPES.ExportNamedDeclaration: // our definition is being exported\r\n          return true;\r\n        case AST_NODE_TYPES.Program: // our definition can be exported\r\n          return true;\r\n        default:\r\n          if (isAccessible(node)) {\r\n            // only fail when class method/constructor is accessible publicly\r\n            return isPubliclyAccessible(node);\r\n          }\r\n          return isDefinitionExportable(node?.parent);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Returns true if this type definition exposes a null type\r\n     */\r\n    function isNewNull(node?: TSESTree.Node): boolean {\r\n      switch (node?.type) {\r\n        case undefined:\r\n          return false;\r\n        case AST_NODE_TYPES.TSTypeAnnotation:\r\n          return isDefinitionExportable(node.parent);\r\n        case AST_NODE_TYPES.TSTypeAliasDeclaration:\r\n          return isDefinitionExportable(node.parent);\r\n        default:\r\n          return isNewNull(node?.parent);\r\n      }\r\n    }\r\n\r\n    return {\r\n      TSNullKeyword(node): void {\r\n        if (isNewNull(node.parent)) {\r\n          context.report({ node, messageId: 'error-new-usage-of-null' });\r\n        }\r\n      }\r\n    };\r\n  }\r\n};\r\n\r\nexport { noNewNullRule };\r\n"]}