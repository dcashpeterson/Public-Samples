{"version":3,"file":"TypingsGenerator.js","sourceRoot":"","sources":["../src/TypingsGenerator.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,oEAIsC;AAItC,mDAA+C;AAiB/C;;;;GAIG;AACH,MAAa,gBAAiB,SAAQ,gDAA4B;IAChE,YAAmB,OAAiC;QAClD,MAAM,EAAE,YAAY,EAAE,cAAc,EAAE,GAAG,OAAO,CAAC;QACjD,KAAK,CAAC;YACJ,GAAG,OAAO;YACV,cAAc,EAAE,CAAC,OAAO,EAAE,YAAY,EAAE,WAAW,EAAE,UAAU,CAAC;YAChE,uBAAuB,EAAE,CAAC,YAAoB,EAAE,QAAgB,EAAE,YAAoB,EAAE,EAAE;gBACxF,MAAM,WAAW,GAAsB,IAAA,4BAAY,EAAC;oBAClD,QAAQ,EAAE,QAAQ;oBAClB,OAAO,EAAE,YAAY;oBACrB,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAS;oBACjC,wBAAwB,EAAE,OAAO,CAAC,wBAAwB;oBAC1D,yBAAyB,EAAE,OAAO,CAAC,yBAAyB;oBAC5D,YAAY;iBACb,CAAC,CAAC;gBAEH,MAAM,OAAO,GAAyB,EAAE,CAAC;gBAEzC,wCAAwC;gBACxC,KAAK,MAAM,UAAU,IAAI,WAAW,EAAE;oBACpC,IAAI,OAAO,GAAuB,WAAW,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC;oBAClE,IAAI,cAAc,EAAE;wBAClB,OAAO,GAAG,cAAc,CAAC,OAAO,EAAE,YAAY,EAAE,UAAU,CAAC,CAAC;qBAC7D;oBAED,OAAO,CAAC,IAAI,CAAC;wBACX,UAAU,EAAE,UAAU;wBACtB,OAAO;qBACR,CAAC,CAAC;iBACJ;gBAED,OAAO,EAAE,OAAO,EAAE,CAAC;YACrB,CAAC;SACF,CAAC,CAAC;IACL,CAAC;CACF;AAnCD,4CAmCC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport {\n  StringValuesTypingsGenerator,\n  type IStringValueTyping,\n  type ITypingsGeneratorBaseOptions\n} from '@rushstack/typings-generator';\nimport type { NewlineKind } from '@rushstack/node-core-library';\n\nimport type { IgnoreStringFunction, ILocalizationFile } from './interfaces';\nimport { parseLocFile } from './LocFileParser';\n\n/**\n * @public\n */\nexport interface ITypingsGeneratorOptions extends ITypingsGeneratorBaseOptions {\n  exportAsDefault?: boolean;\n  resxNewlineNormalization?: NewlineKind | undefined;\n  ignoreMissingResxComments?: boolean | undefined;\n  ignoreString?: IgnoreStringFunction;\n  processComment?: (\n    comment: string | undefined,\n    resxFilePath: string,\n    stringName: string\n  ) => string | undefined;\n}\n\n/**\n * This is a simple tool that generates .d.ts files for .loc.json, .resx.json, .resjson, and .resx files.\n *\n * @public\n */\nexport class TypingsGenerator extends StringValuesTypingsGenerator {\n  public constructor(options: ITypingsGeneratorOptions) {\n    const { ignoreString, processComment } = options;\n    super({\n      ...options,\n      fileExtensions: ['.resx', '.resx.json', '.loc.json', '.resjson'],\n      parseAndGenerateTypings: (fileContents: string, filePath: string, resxFilePath: string) => {\n        const locFileData: ILocalizationFile = parseLocFile({\n          filePath: filePath,\n          content: fileContents,\n          terminal: this._options.terminal!,\n          resxNewlineNormalization: options.resxNewlineNormalization,\n          ignoreMissingResxComments: options.ignoreMissingResxComments,\n          ignoreString\n        });\n\n        const typings: IStringValueTyping[] = [];\n\n        // eslint-disable-next-line guard-for-in\n        for (const stringName in locFileData) {\n          let comment: string | undefined = locFileData[stringName].comment;\n          if (processComment) {\n            comment = processComment(comment, resxFilePath, stringName);\n          }\n\n          typings.push({\n            exportName: stringName,\n            comment\n          });\n        }\n\n        return { typings };\n      }\n    });\n  }\n}\n"]}