{"version":3,"file":"TreePattern.test.js","sourceRoot":"","sources":["../src/TreePattern.test.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,+CAAsD;AAMtD,MAAM,QAAQ,GAAgB,IAAI,yBAAW,CAAC;IAC5C,CAAC,EAAE;QACD,CAAC;QACD,CAAC;QACD,yBAAW,CAAC,GAAG,CAAC,QAAQ,EAAE;YACxB,CAAC,EAAE,EAAE;SACN,CAAC;KACH;CACF,CAAC,CAAC;AAEH,MAAM,QAAQ,GAAgB,IAAI,yBAAW,CAAC;IAC5C,CAAC,EAAE,yBAAW,CAAC,KAAK,CAAC;QACnB,GAAG;QACH;YACE,CAAC,EAAE,CAAC;SACL;KACF,CAAC;CACH,CAAC,CAAC;AAEH,QAAQ,CAAC,yBAAW,CAAC,IAAI,EAAE,GAAG,EAAE;IAC9B,EAAE,CAAC,qBAAqB,EAAE,GAAG,EAAE;QAC7B,MAAM,KAAK,GAAa;YACtB,CAAC,EAAE;gBACD,CAAC;gBACD,CAAC;gBACD;oBACE,CAAC,EAAE,EAAE;oBACL,KAAK,EAAE,IAAI;iBACZ;aACF;YACD,CAAC,EAAE,GAAG;SACP,CAAC;QAEF,MAAM,QAAQ,GAAe,EAAE,CAAC;QAChC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACnD,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,aAAa,CAAC;YACpC,CAAC,EAAE,EAAE;YACL,KAAK,EAAE,IAAI;SACZ,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sBAAsB,EAAE,GAAG,EAAE;QAC9B,MAAM,MAAM,GAAa;YACvB,CAAC,EAAE,GAAG;SACP,CAAC;QACF,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAE1C,MAAM,MAAM,GAAa;YACvB,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE;SACZ,CAAC;QACF,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAE1C,MAAM,MAAM,GAAa;YACvB,CAAC,EAAE,GAAG;SACP,CAAC;QACF,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { TreePattern, TreeNode } from './TreePattern';\n\nexport interface IMyPattern {\n  branch?: string;\n}\n\nconst pattern1: TreePattern = new TreePattern({\n  a: [\n    1,\n    2,\n    TreePattern.tag('branch', {\n      b: []\n    })\n  ]\n});\n\nconst pattern2: TreePattern = new TreePattern({\n  c: TreePattern.oneOf([\n    123,\n    {\n      d: 1\n    }\n  ])\n});\n\ndescribe(TreePattern.name, () => {\n  it('matches using a tag', () => {\n    const tree1: TreeNode = {\n      a: [\n        1,\n        2,\n        {\n          b: [],\n          extra: 'hi'\n        }\n      ],\n      b: 123\n    };\n\n    const captures: IMyPattern = {};\n    expect(pattern1.match(tree1, captures)).toBe(true);\n    expect(captures.branch).toMatchObject({\n      b: [],\n      extra: 'hi'\n    });\n  });\n\n  it('matches alternatives', () => {\n    const tree2a: TreeNode = {\n      c: 123\n    };\n    expect(pattern2.match(tree2a)).toBe(true);\n\n    const tree2b: TreeNode = {\n      c: { d: 1 }\n    };\n    expect(pattern2.match(tree2b)).toBe(true);\n\n    const tree2c: TreeNode = {\n      c: 321\n    };\n    expect(pattern2.match(tree2c)).toBe(false);\n  });\n});\n"]}