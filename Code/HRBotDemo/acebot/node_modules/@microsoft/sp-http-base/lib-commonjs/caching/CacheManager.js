"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CacheManager = void 0;
var IRequestCacheOptions_1 = require("./IRequestCacheOptions");
var sp_diagnostics_1 = require("@microsoft/sp-diagnostics");
var Killswitches_1 = require("../common/Killswitches");
/**
 * Cache Manager for http Requests
 *
 * @internal
 */
var CacheManager = /** @class */ (function () {
    function CacheManager() {
    }
    /**
     * Fetches latest data from server or cache. Updates the cache from server if needed.
     * @param cacheKey - The cache Key
     * @param cacheProvider - The cache Provider
     * @param cacheConfiguration - The Cache configuration
     * @param serverFetch - The server fetch call
     * @param prefetchProvider - The prefetch provider
     */
    CacheManager.fetchAndCache = function (cacheKey /* eslint-disable-line @typescript-eslint/no-explicit-any */, cacheProvider, cacheConfiguration, serverFetch, prefetchProvider) {
        var cacheStrategy = cacheConfiguration.cacheStrategy;
        // 3rd party default behavior - If cacheStrategy is undefined, make a cache or network request
        if (cacheStrategy === undefined) {
            return cacheProvider
                .getData(cacheKey, cacheConfiguration)
                .then(function (cacheData) { return cacheData.data; })
                .catch(function () {
                // Cache Miss, update cache with serverData
                return CacheManager._fetchAndUpdateCache(serverFetch, cacheKey, cacheProvider, cacheConfiguration).catch(function (e) {
                    throw e;
                });
            });
        }
        // First Party Caching Strategies
        if (cacheStrategy === IRequestCacheOptions_1.CacheStrategy.CacheThenNetwork) {
            return CacheManager._applyCacheThenNetworkStrategy(cacheKey, cacheProvider, cacheConfiguration, serverFetch, prefetchProvider);
        }
        var cachableResponse = CacheManager._applyCacheStrategy(cacheKey, cacheProvider, cacheConfiguration, serverFetch);
        return Promise.resolve(cachableResponse);
    };
    CacheManager._applyCacheThenNetworkStrategy = function (cacheKey /* eslint-disable-line @typescript-eslint/no-explicit-any */, cacheProvider, cacheConfiguration, serverFetch, prefetchProvider) {
        var _a;
        if (!((_a = cacheConfiguration === null || cacheConfiguration === void 0 ? void 0 : cacheConfiguration.extraProps) === null || _a === void 0 ? void 0 : _a.get('enableDataPrefetch'))) {
            return this._applySimpleCacheThenNetworkStrategy(cacheKey, cacheProvider, cacheConfiguration, serverFetch);
        }
        var qosMonitor = new sp_diagnostics_1._QosMonitor("CacheManager.CacheThenNetwork.".concat(cacheConfiguration.alias));
        var cachableResponse = {
            cachedResponse: undefined,
            serverResponse: undefined
        };
        var setServerResponse = function (qosAlias) {
            cachableResponse.serverResponse = CacheManager._getServerData(cacheKey, cacheProvider, cacheConfiguration, serverFetch, prefetchProvider, qosMonitor, qosAlias);
        };
        return cacheProvider
            .getData(cacheKey, cacheConfiguration)
            .then(function (cacheData) {
            var _a, _b;
            cachableResponse.cachedResponse = Promise.resolve(cacheData.data);
            // cache data is stale or not served from data prefetch
            if ((_a = cacheData.stats) === null || _a === void 0 ? void 0 : _a.isStale) {
                setServerResponse('StaleCache');
            }
            else if (!!((_b = cacheData.stats) === null || _b === void 0 ? void 0 : _b.isFromFreshDataFlush) && !!prefetchProvider) {
                qosMonitor.writeSuccess({ alias: 'CacheFromFreshDataFlush' });
            }
            return cachableResponse;
        })
            .catch(function () {
            // Only serverData can be available and returned
            setServerResponse('NoCache');
            return cachableResponse;
        });
    };
    CacheManager._getServerData = function (cacheKey /* eslint-disable-line @typescript-eslint/no-explicit-any */, cacheProvider, cacheConfiguration, serverFetch, prefetchProvider, qosMonitor, qosAliasPrefix) {
        // cacheResponse was served from recent data but not from fresh async. Let's race fresh data flush and API call
        var clientAPICall = CacheManager._fetchAndUpdateCache(serverFetch, cacheKey, cacheProvider, cacheConfiguration)
            .then(function (data) {
            if (!qosMonitor.hasEnded) {
                qosMonitor.writeSuccess({ alias: "".concat(qosAliasPrefix, "ApiData") });
            }
            return data;
        })
            .catch(function (error) {
            if (!qosMonitor.hasEnded) {
                qosMonitor.writeUnexpectedFailure('APICallFailed', undefined, // Error
                { alias: "".concat(qosAliasPrefix, "ApiData") });
            }
            throw error;
        });
        var freshFlushedData = prefetchProvider
            ? prefetchProvider.getDataAsync(cacheKey.key, {
                alias: cacheConfiguration.alias
            }).then(function (freshData) {
                if (freshData) {
                    if (!qosMonitor.hasEnded) {
                        qosMonitor.writeSuccess({ alias: "".concat(qosAliasPrefix, "PrefetchData") });
                    }
                    // Update the cache if there is prefetch data
                    setTimeout(function () {
                        return cacheProvider.setData(cacheKey, freshData.data, cacheConfiguration).catch(function (err) {
                            if (!Killswitches_1.Killswitches.isLogPropagatedMySiteCacheSaveErrorKSActivated() &&
                                !qosMonitor.hasEnded) {
                                qosMonitor.writeUnexpectedFailure('FailedToSetCacheData', err);
                            }
                        });
                    }, 0);
                    // Respond with actual http response
                    var bodyInit = JSON.stringify(freshData.data);
                    var responseInit = { status: 200 };
                    var flushAsResponse = new Response(bodyInit, responseInit);
                    return flushAsResponse;
                }
                if (!qosMonitor.hasEnded) {
                    qosMonitor.writeUnexpectedFailure('NoPrefetchData', undefined, // Error
                    { alias: "".concat(qosAliasPrefix, "PrefetchData") });
                }
                return Promise.reject();
            })
            : Promise.reject();
        // Simple Promise race, if failed, default to API call
        return Promise.race([freshFlushedData, clientAPICall]).catch(function () { return clientAPICall; });
    };
    CacheManager._applySimpleCacheThenNetworkStrategy = function (cacheKey /* eslint-disable-line @typescript-eslint/no-explicit-any */, cacheProvider, cacheConfiguration, serverFetch) {
        var cachableResponse = {
            cachedResponse: undefined,
            serverResponse: undefined
        };
        return cacheProvider
            .getData(cacheKey, cacheConfiguration)
            .then(function (cacheData) {
            cachableResponse.cachedResponse = Promise.resolve(cacheData.data);
            if (cacheData.stats && cacheData.stats.isStale) {
                cachableResponse.serverResponse = CacheManager._fetchAndUpdateCache(serverFetch, cacheKey, cacheProvider, cacheConfiguration);
            }
            return cachableResponse;
        })
            .catch(function () {
            // Only serverData can be available and returned
            cachableResponse.serverResponse = CacheManager._fetchAndUpdateCache(serverFetch, cacheKey, cacheProvider, cacheConfiguration);
            return cachableResponse;
        });
    };
    CacheManager._applyCacheStrategy = function (cacheKey /* eslint-disable-line @typescript-eslint/no-explicit-any */, cacheProvider, cacheConfiguration, serverFetch) {
        var cacheStrategy = cacheConfiguration.cacheStrategy;
        var cachableResponse = {
            cachedResponse: undefined,
            serverResponse: undefined
        };
        if (cacheStrategy === IRequestCacheOptions_1.CacheStrategy.CacheOnly || cacheStrategy === IRequestCacheOptions_1.CacheStrategy.CacheAndNetwork) {
            cachableResponse.cachedResponse = cacheProvider
                .getData(cacheKey, cacheConfiguration)
                .then(function (cacheData) { return cacheData.data; });
        }
        if (cacheStrategy === IRequestCacheOptions_1.CacheStrategy.NetworkOnly || cacheStrategy === IRequestCacheOptions_1.CacheStrategy.CacheAndNetwork) {
            cachableResponse.serverResponse = CacheManager._fetchAndUpdateCache(serverFetch, cacheKey, cacheProvider, cacheConfiguration);
        }
        return cachableResponse;
    };
    CacheManager._fetchAndUpdateCache = function (serverFetch, cacheKey /* eslint-disable-line @typescript-eslint/no-explicit-any */, cacheProvider, cacheConfiguration) {
        return serverFetch().then(function (response) {
            if (response.clone) {
                CacheManager._updateCache(cacheKey, cacheProvider, response.clone(), cacheConfiguration);
            }
            return response;
        });
    };
    CacheManager._updateCache = function (cacheKey /* eslint-disable-line @typescript-eslint/no-explicit-any */, cacheProvider, response, cacheConfiguration) {
        // Only update the cache if the server response is valid and a non-empty response
        if (response.status >= 200 && response.status < 300 && response.status !== 204) {
            response
                .json()
                .then(function (freshData) {
                if (freshData) {
                    // Update the cache when there is fresh data available from the server
                    setTimeout(function () {
                        return cacheProvider.setData(cacheKey, freshData, cacheConfiguration).catch(function () {
                            /** no-op **/
                        });
                    }, 0);
                }
            })
                .catch(function (e) {
                throw e;
            });
        }
    };
    return CacheManager;
}());
exports.CacheManager = CacheManager;
//# sourceMappingURL=CacheManager.js.map