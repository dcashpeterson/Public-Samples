"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseCardView = void 0;
var tslib_1 = require("tslib");
var BaseView_1 = require("../base/BaseView");
/**
 * Primitive base class for Card views.
 *
 * @remarks No third-party Card views should inherit from this class.
 *
 * @public
 * @sealed
 */
var BaseCardView = /** @class */ (function (_super) {
    tslib_1.__extends(BaseCardView, _super);
    function BaseCardView() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(BaseCardView.prototype, "cardSize", {
        /**
         * See {@link BaseAdaptiveCardExtension.cardSize}.
         */
        get: function () {
            return this._getCardSize();
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Sets visibility to false and rerenders the card.
     * See {@link BaseAdaptiveCardExtension.isVisible}.
     */
    BaseCardView.prototype.setVisibility = function (isVisible) {
        this._ace.isVisible = isVisible;
    };
    Object.defineProperty(BaseCardView.prototype, "onCardSelection", {
        /**
         * Action to invoke when the card is selected.
         *
         * @virtual
         */
        get: function () {
            return undefined;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseCardView.prototype, "isCacheEnabled", {
        /**
         * If true, this Card view will be cached and rendered at next load.
         *
         * @virtual
         */
        get: function () {
            return true;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Action handler for Adaptive Card Actions.
     *
     * @param action - The {@link IActionArguments} for the current event.
     *
     * @virtual
     */
    BaseCardView.prototype.onAction = function (action) {
        // no-op
    };
    /**
     * @beta
     *
     * Error handler for Adaptive Card Actions.
     *
     * @param error - The {@link IActionErrorArguments} for the current event.
     *
     * @virtual
     */
    BaseCardView.prototype.onActionError = function (error) {
        // no-op
    };
    return BaseCardView;
}(BaseView_1.BaseView));
exports.BaseCardView = BaseCardView;
//# sourceMappingURL=BaseCardView.js.map