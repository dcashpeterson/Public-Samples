"use strict";
/**
 * The wrapper of the SPExperiment modules in \@ms/sp-experiment.
 * see https://onedrive.visualstudio.com/OneDriveWeb/_git/odsp-common?path=%2Fsp-experiments%2FREADME.md&version=GBmaster&_a=preview
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SPExperiment = void 0;
var tslib_1 = require("tslib");
var odsp_core_bundle_1 = require("@ms/odsp-core-bundle");
var SPFlight_1 = tslib_1.__importDefault(require("./SPFlight"));
var Environment_1 = tslib_1.__importStar(require("./Environment"));
// Debug flight id. This flight is only enabled for internal Microsoft tenants like the eDog tenant. This flight
// is used for debug level testing and should not be enabled for PROD customer tenants due security reasons.
// Enabling this flight on PROD customer tenants can deem them vulnerable to script injection.
var SPFX_DEBUG_EXPERIMENT_ID = 466;
/**
 * The wrapper of sp-experiment to check experiment status in sp-client.
 *
 * @internal
 */
var SPExperiment = /** @class */ (function () {
    function SPExperiment() {
    }
    /**
     * Initialize/Re-initialize experiments with latest page context info.
     * @param experimentContext - The context to identify the experiment environment.
     */
    SPExperiment.initialize = function (experimentContext) {
        SPExperiment._experimentContext = experimentContext;
        this._isInitialized = true;
    };
    /**
     * @internal
     * Retrieves the variant assignment for the given Flights on Rails experiment from the given page context.
     * This method automatically logs the assignment data to the experiment stream, so it is crucial that
     * this method is called only when the differences between variants would become visible to the end user.
     * If the assignment must be retrieved earlier, call getExperiment to get an ISpExperiment
     * object and use variantToDisplay and logExposure() at the appropriate times.
     * @param experimentId - The automatically generated experiment id in Flights on Rails.
     *  Check the flighting page at aka.ms/flightsui to find this value.
     * @returns The variant to display to the end user. A value of 0 indicates that the original, control
     *  experience should be shown, whereas a value of n greater than 0 indicates that the nth treatment
     *  group should be shown.
     */
    SPExperiment.getVariantAndLogExposure = function (experimentId) {
        if (!this._isInitialized && !DEPRECATED_UNIT_TEST) {
            throw new Error("Experiments are not initialized. Requested for experiment id: ".concat(experimentId));
        }
        if (DEPRECATED_UNIT_TEST) {
            return 0;
        }
        var experimentOverrides = SPExperiment.experimentOverrides;
        if (experimentOverrides && experimentOverrides.has(experimentId)) {
            return experimentOverrides.get(experimentId);
        }
        return (0, odsp_core_bundle_1.getVariantAndLogExposure)(experimentId, SPExperiment._experimentContext);
    };
    /**
     * RESERVED FOR INTERNAL USAGE.  This method is invoked automatically by the system shell.
     * The application code should not call it directly.
     *
     * @param expOverrides - The experiment overrides string.
     * e.g. '[[90023,1],[90034,0]]' which means experiment 90023 will be forced on treatment experience and
     *  experiment 90034 will be forced on control experience.
     */
    SPExperiment.setDebugExperiments = function (expOverrides) {
        // Initialize debug flights and killswitches from the query params
        var allowDebugQueryParameter = SPFlight_1.default.isEnabled(SPFX_DEBUG_EXPERIMENT_ID) || Environment_1.default.type === Environment_1.EnvironmentType.Local;
        if (!expOverrides || !allowDebugQueryParameter) {
            return;
        }
        if (!this._isInitialized) {
            throw new Error("SPPerfExperiment is not initialized. Can't set debug experiments");
        }
        try {
            SPExperiment.experimentOverrides = new Map();
            var overrides = JSON.parse(expOverrides);
            for (var _i = 0, overrides_1 = overrides; _i < overrides_1.length; _i++) {
                var override = overrides_1[_i];
                if (override && override.length === 2) {
                    SPExperiment.experimentOverrides.set(override[0], override[1]);
                }
            }
        }
        catch (error) {
            SPExperiment.experimentOverrides = undefined;
        }
    };
    /**
     * @internal
     * DO NOT USE UNLESS THERE IS NO NEED FOR SCORECARDS - this API will not log exposure to the experiment
     * Retrieves the variant assignment for the given Flights on Rails experiment from the given page context. This method does not log exposure
     * to the experiment, only returns the variant. This should be used only in cases where you want to retrieve the assignment, but do not want
     * the data to be logged. When using this API, the experimentation dashboard at aka.ms/odspexp and the automated SRM detection would
     * also be unavailable.
     * @param experimentId - The automatically generated experiment id in Flights on Rails. Check the flighting page at aka.ms/flightsui to find
     * this value.
     * @returns The variant to display to the end user. A value of 0 indicates that the original, control experience should be shown, whereas
     * a value of n \> 0 indicates that the nth treatment group should be shown.
     */
    // @ts-ignore This gets called in SPPerfExperiment, but don't want it to be called anywhere else, see IPrivateSPExperiment
    SPExperiment._getVariantWithoutLogging = function (experimentId) {
        if (!this._isInitialized && !DEPRECATED_UNIT_TEST) {
            throw new Error("Experiments are not initialized. Requested for experiment id: ".concat(experimentId));
        }
        if (DEPRECATED_UNIT_TEST) {
            return 0;
        }
        var experimentOverrides = SPExperiment.experimentOverrides;
        if (experimentOverrides && experimentOverrides.has(experimentId)) {
            return experimentOverrides.get(experimentId);
        }
        return (0, odsp_core_bundle_1._getVariantWithoutLogging)(experimentId, SPExperiment._experimentContext);
    };
    SPExperiment._isInitialized = false;
    return SPExperiment;
}());
exports.SPExperiment = SPExperiment;
//# sourceMappingURL=SPExperiment.js.map