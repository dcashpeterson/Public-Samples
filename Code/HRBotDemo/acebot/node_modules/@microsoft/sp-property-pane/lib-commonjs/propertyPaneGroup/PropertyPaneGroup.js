"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = tslib_1.__importStar(require("react"));
var lodash = tslib_1.__importStar(require("@microsoft/sp-lodash-subset"));
var office_ui_fabric_react_bundle_1 = require("@ms/office-ui-fabric-react-bundle");
var Checkbox_1 = require("@fluentui/react/lib/Checkbox");
var ChoiceGroup_1 = require("@fluentui/react/lib/ChoiceGroup");
var Dropdown_1 = require("@fluentui/react/lib/Dropdown");
var Slider_1 = require("@fluentui/react/lib/Slider");
var SpinButton_1 = require("@fluentui/react/lib/SpinButton");
var Toggle_1 = require("@fluentui/react/lib/Toggle");
var Tooltip_1 = require("@fluentui/react/lib/Tooltip");
var sp_component_base_1 = require("@microsoft/sp-component-base");
var sp_diagnostics_1 = require("@microsoft/sp-diagnostics");
var IPropertyPaneButton_1 = require("../propertyPaneFields/propertyPaneButton/IPropertyPaneButton");
var PropertyPaneCustomFieldHost_1 = tslib_1.__importDefault(require("../propertyPaneFields/propertyPaneCustomField/PropertyPaneCustomFieldHost"));
var IPropertyPaneField_1 = require("../propertyPaneFields/propertyPaneField/IPropertyPaneField");
var PropertyPaneGroup_module_scss_1 = tslib_1.__importDefault(require("./PropertyPaneGroup.module.scss"));
var propertyPaneIconPicker_1 = require("../propertyPaneFields/propertyPaneIconPicker");
var propertyPaneThumbnailPicker_1 = require("../propertyPaneFields/propertyPaneThumbnailPicker");
var Strings_resx_1 = tslib_1.__importDefault(require("../loc/Strings.resx"));
var PropertyPaneChoiceGroup_module_scss_1 = tslib_1.__importDefault(require("./PropertyPaneChoiceGroup.module.scss"));
var PropertyPaneGroupHelper_1 = require("./PropertyPaneGroupHelper");
var DynamicDataWidget_1 = tslib_1.__importDefault(require("../propertyPaneDynamicData/dynamicDataWidget/DynamicDataWidget"));
var KillSwitches_1 = require("../common/KillSwitches");
var propertyPaneGroupInstance = 0;
var isBrowserEdge;
/**
 * This is a workaround for fixing breaking changes in TextField in fabric 6 and 7.
 * In the workaround, even you provide a value, TextField still will maintain the state.
 * When value changed, the state will update according to new value.
 * This is same as the TextField in fabric 6.
 */
function WorkaroundTextField(props) {
    var _a = React.useState(props.value), value = _a[0], setValue = _a[1];
    var lastPropsValue = React.useRef(props.value);
    // eslint-disable-next-line react-hooks/exhaustive-deps
    React.useEffect(function () {
        if (props.value !== lastPropsValue.current) {
            setValue(props.value);
            lastPropsValue.current = props.value;
        }
    });
    return (React.createElement(office_ui_fabric_react_bundle_1.TextField, tslib_1.__assign({}, props, { className: 'contrastRatio-overwrite', value: value, 
        // eslint-disable-next-line react/jsx-no-bind
        onChange: function (event, newValue) {
            setValue(newValue);
            if (props.onChange) {
                props.onChange(event, newValue);
            }
        }, 
        // eslint-disable-next-line react/jsx-no-bind
        onBlur: function (event) {
            var _a, _b;
            if (props.onGetErrorMessage) {
                var errorMessage = props.onGetErrorMessage(((_a = event.target) === null || _a === void 0 ? void 0 : _a.value) || '');
                if (errorMessage !== undefined) {
                    if (typeof errorMessage === 'string' || !('then' in errorMessage)) {
                        if (props.onNotifyValidationResult) {
                            props.onNotifyValidationResult(errorMessage, (_b = event.target) === null || _b === void 0 ? void 0 : _b.value);
                        }
                    }
                    else {
                        event.persist();
                        void errorMessage.then(function (message) {
                            var _a;
                            if (props.onNotifyValidationResult) {
                                props.onNotifyValidationResult(message, (_a = event.target) === null || _a === void 0 ? void 0 : _a.value);
                            }
                        });
                    }
                }
            }
            if (props.onBlur) {
                props.onBlur(event);
            }
        } })));
}
/**
 * LogSource for PropertyPaneGroup
 */
var LOG_SOURCE = sp_diagnostics_1._LogSource.create('PropertyPaneGroup');
/**
 * Regex for the dynamic property if it takes the form as in below example:
 * [PageContext:User:Email]
 */
var DYNAMICPROPERTY_DEFAULT_REGEX = /^\[(\w+:\w+(?::\w+)?)\]$/;
/**
 * Regex for the dynamic property if it takes the form as in below example:
 * `${component.manifest.componentType}.${component.manifest.id}.${component.instanceId}`
 */
var DYNAMICPROPERTY_COMPONENT_REGEX = /^\[([a-zA-Z]+\.([0-9A-Fa-f]{8}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{12})\.([0-9A-Fa-f]{8}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{12}):\w+(?::\w+)?)\]$/;
/**
 * React Component: PropertyPaneGroup.
 *
 * @internal
 */
var PropertyPaneGroup = /** @class */ (function (_super) {
    tslib_1.__extends(PropertyPaneGroup, _super);
    /**
     * constructor
     */
    function PropertyPaneGroup(props) {
        var _this = _super.call(this, props) || this;
        /**
         * Initial value of TextFieldPropertyPane.
         */
        _this._initialValue = '';
        _this._onCustomFieldChanged = function (targetProperty, value) {
            // enable/disable Save button
            if (_this.props.setEntryState) {
                _this.props.setEntryState(targetProperty, true);
            }
            if (_this.props.onChange) {
                _this.props.onChange(targetProperty, value, IPropertyPaneField_1.PropertyPaneFieldType.Custom);
            }
        };
        _this.state = {
            isDetailsShown: true,
            id: "PropertyPaneGroup-".concat(propertyPaneGroupInstance++)
        };
        // method bindings.
        _this._onHeaderClicked = _this._onHeaderClicked.bind(_this);
        return _this;
    }
    /**
     * Returns the checked status of the incoming groupfield.
     * Today this method expects checkbox and toggle fields.
     * @param propValue - value of the group field from the property bag.
     * @param groupField - actual group field.
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    PropertyPaneGroup._getCheckedStatus = function (propValue, groupField) {
        return propValue !== undefined && propValue !== null ? propValue : groupField.properties.checked;
    };
    // eslint-disable-next-line @typescript-eslint/naming-convention
    PropertyPaneGroup.prototype.UNSAFE_componentWillMount = function () {
        this.setState({
            isDetailsShown: this._isDetailsShown(this.props)
        });
    };
    // eslint-disable-next-line @typescript-eslint/naming-convention
    PropertyPaneGroup.prototype.UNSAFE_componentWillReceiveProps = function (props) {
        if (props.groupFields &&
            props.groupFields.some(function (groupField) { return groupField.shouldFocus || false; })) {
            // The group which contains the next focus control should be expanded.
            this.setState({
                isDetailsShown: true
            });
        }
        else {
            this.setState({
                isDetailsShown: this._isDetailsShown(props)
            });
        }
    };
    PropertyPaneGroup.prototype.componentDidMount = function () {
        this._setFocus();
    };
    PropertyPaneGroup.prototype.componentDidUpdate = function () {
        this._setFocus();
    };
    /**
     * render: renders the PropertyPaneGroup component.
     */
    PropertyPaneGroup.prototype.render = function () {
        this._keys = {}; // Reset to ensure consistency and predictable order.
        this._elementRefs = {}; // Reset to ensure consistency.
        return (React.createElement(React.Fragment, null,
            this._renderGroupName(),
            this._renderGroupContent()));
    };
    /**
     * Returns true if the property pane group should be extended (false if collapsed)
     * @param props - Props to use for calculating the result
     */
    PropertyPaneGroup.prototype._isDetailsShown = function (props) {
        /**
         * Here we are making sure that state of the group is decided by the user actions.
         *  a) If user manually makes any changes to the accordion group's state then those changes are recorded
         *     in the 'propertyPaneGroupsState' dictionary and these recordings will be used for future renderings
         *     of the group.
         *
         *  b) IF there are no changes made by the user to the state of the accordion group then we infer the state
         *     from the property bag which web part sent.
         *
         */
        var isDetailsShown = undefined;
        if (props.propertyPanePagesStateMap[props.pageNumber] && props.groupName) {
            isDetailsShown = props.propertyPanePagesStateMap[props.pageNumber][props.groupName];
        }
        return isDetailsShown !== undefined ? isDetailsShown : !props.isCollapsed;
    };
    PropertyPaneGroup.prototype._setFocus = function () {
        var _this = this;
        // This is the hack to workaround a react bug that doesn't set the focus in componentDidMount properly.
        setTimeout(function () {
            if (_this._focusElementKey) {
                var nextFocusedElement = _this._elementRefs[_this._focusElementKey];
                if (nextFocusedElement && nextFocusedElement.focus) {
                    nextFocusedElement.focus();
                    _this._focusElementKey = undefined;
                }
            }
        }, 0);
    };
    PropertyPaneGroup.prototype._renderGroupName = function () {
        var groupNameElem;
        if (!this.props.isGroupNameHidden || this.props.groupName) {
            if (!this.props.displayGroupsAsAccordion) {
                if (this.props.groupName) {
                    groupNameElem = !(0, KillSwitches_1.isPropertyPaneGroupNameAndContentA11yKSActivated)() ? (React.createElement("div", { className: PropertyPaneGroup_module_scss_1.default.propertyPaneGroupHeaderNoAccordion, id: this.state.id }, this.props.groupName)) : (React.createElement("div", { className: PropertyPaneGroup_module_scss_1.default.propertyPaneGroupHeaderNoAccordion }, this.props.groupName));
                }
            }
            else {
                var chevronIcon = this.state.isDetailsShown ? 'ChevronUp' : 'ChevronDown';
                var propertyPaneGroupButtonClassName = (0, office_ui_fabric_react_bundle_1.css)(PropertyPaneGroup_module_scss_1.default.propertyPaneGroupHeader, this.state.isDetailsShown && PropertyPaneGroup_module_scss_1.default.propertyPaneGroupExpanded, PropertyPaneGroup_module_scss_1.default.highContrastFocusState);
                groupNameElem = (React.createElement("button", { className: propertyPaneGroupButtonClassName, "aria-expanded": this.state.isDetailsShown, onClick: this._onHeaderClicked },
                    !(0, KillSwitches_1.isPropertyPaneGroupNameAndContentA11yKSActivated)() ? (React.createElement("span", { className: PropertyPaneGroup_module_scss_1.default.propertyPaneGroupHeaderText, id: this.state.id }, this.props.groupName)) : (React.createElement("span", { className: PropertyPaneGroup_module_scss_1.default.propertyPaneGroupHeaderText }, this.props.groupName)),
                    React.createElement(office_ui_fabric_react_bundle_1.Icon, { className: PropertyPaneGroup_module_scss_1.default.propertyPaneGroupHeaderIcon, "data-automation-state": this.state.isDetailsShown ? 'expanded' : 'collapsed', iconName: chevronIcon })));
            }
        }
        return groupNameElem;
    };
    PropertyPaneGroup.prototype._renderGroupContent = function () {
        var _this = this;
        if (this.state.isDetailsShown) {
            return !(0, KillSwitches_1.isPropertyPaneGroupNameAndContentA11yKSActivated)() ? (React.createElement("div", { className: PropertyPaneGroup_module_scss_1.default.propertyPaneGroupContent, "data-automation-id": 'propertyPaneGroupContent', "aria-labelledby": this.state.id }, this.props.groupFields.map(function (groupField) { return _this._renderGroupField(groupField); }))) : (React.createElement("div", { className: PropertyPaneGroup_module_scss_1.default.propertyPaneGroupContent, "data-automation-id": 'propertyPaneGroupContent' }, this.props.groupFields.map(function (groupField) { return _this._renderGroupField(groupField); })));
        }
        return undefined;
    };
    /**
     * _renderGroupField: renders the individual groupField based on the field type.
     */
    PropertyPaneGroup.prototype._renderGroupField = function (groupField) {
        var _a;
        var _this = this;
        var key = (0, PropertyPaneGroupHelper_1.generateGroupFieldKey)(this._keys, groupField);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var propValue = (0, PropertyPaneGroupHelper_1.getFixedUpPropValue)(groupField, this.props.properties, this.props.dynamicConfiguration);
        if (groupField.shouldFocus) {
            this._focusElementKey = key;
        }
        // If group field has explicitly set its own ref function, pass the instance to that ref function.
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var setRef = function (instance) {
            _this._elementRefs[key] = instance; // Key must be a string at this point
            if (typeof groupField.properties.ref === 'function') {
                groupField.properties.ref(instance);
            }
        };
        var groupFieldElement;
        switch (groupField.type) {
            /* CUSTOM FIELD */
            case IPropertyPaneField_1.PropertyPaneFieldType.Custom:
                groupFieldElement = (React.createElement(PropertyPaneCustomFieldHost_1.default, tslib_1.__assign({}, groupField.properties, { onChanged: this._onCustomFieldChanged })));
                break;
            /* TOGGLE */
            case IPropertyPaneField_1.PropertyPaneFieldType.Toggle:
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                var toggleProps = groupField.properties;
                if (groupField.properties['_label']) {
                    toggleProps.label = groupField.properties['_label'];
                }
                else if (groupField.properties.label && typeof groupField.properties.label !== 'string') {
                    toggleProps = (0, office_ui_fabric_react_bundle_1.omit)(toggleProps, ['label']);
                    sp_diagnostics_1._EngagementLogger.logEventWithLogEntry(new sp_diagnostics_1._LogEntry(LOG_SOURCE.id, 'TryAddReactElementAsLabelToToggle'));
                }
                groupFieldElement = (React.createElement(Toggle_1.Toggle, tslib_1.__assign({}, toggleProps, { 
                    // eslint-disable-next-line react/jsx-no-bind
                    componentRef: setRef, checked: PropertyPaneGroup._getCheckedStatus(propValue, groupField), onText: groupField.properties.onText || Strings_resx_1.default.ToggleOnText, offText: groupField.properties.offText || Strings_resx_1.default.ToggleOffText, 
                    // eslint-disable-next-line react/jsx-no-bind
                    onChanged: function (value) {
                        _this._onChange(groupField, value);
                    }, "data-automation-id": groupField.properties.dataAutomationId })));
                break;
            /* TEXTFIELD */
            case IPropertyPaneField_1.PropertyPaneFieldType.TextField:
                /**
                 * OUIFR doesn't respect undefined value and hence it was not clearing the text field value.
                 * So, explicitly setting the value to an empty string if propValue and groupField.properties.value
                 * are empty/undefined.
                 */
                var textFieldValue = propValue || groupField.properties.value || '';
                groupFieldElement = (React.createElement(WorkaroundTextField, tslib_1.__assign({}, groupField.properties, { validateOnLoad: false, 
                    // eslint-disable-next-line react/jsx-no-bind
                    componentRef: setRef, value: textFieldValue, 
                    // eslint-disable-next-line react/jsx-no-bind
                    onChange: function (event, value) {
                        // If no validation method, we use onChanged to notify input changed.
                        if (!groupField.properties.onGetErrorMessage) {
                            _this._onChange(groupField, value);
                        }
                    }, 
                    // eslint-disable-next-line react/jsx-no-bind
                    onNotifyValidationResult: function (errorMessage, value) {
                        return _this._onNotifyValidationResult(errorMessage, value, groupField, _this.props.setEntryState);
                    }, 
                    // eslint-disable-next-line react/jsx-no-bind
                    onFocus: function (ev) { return _this._onFocusTextFieldPropertyPane(ev, groupField.properties); }, 
                    // eslint-disable-next-line react/jsx-no-bind
                    onBlur: function (ev) { return _this._onBlurTextFieldPropertyPane(ev, groupField.properties); } })));
                break;
            /* DROPDOWN */
            case IPropertyPaneField_1.PropertyPaneFieldType.Dropdown:
                var dropdownOptions = groupField.properties.options
                    ? groupField.properties.options.map(function (option) { return ({
                        key: option.key,
                        index: option.index,
                        text: option.text,
                        itemType: option.type || Dropdown_1.DropdownMenuItemType.Normal
                    }); })
                    : [];
                var onRenderLabel = groupField.properties
                    .tooltipProps
                    ? function (props) {
                        return (React.createElement("div", { className: PropertyPaneGroup_module_scss_1.default.labelWithTooltipButton },
                            React.createElement(office_ui_fabric_react_bundle_1.Label, null, props.label),
                            React.createElement(office_ui_fabric_react_bundle_1.TooltipHost, { content: groupField.properties.tooltipProps.tooltipText },
                                React.createElement(office_ui_fabric_react_bundle_1.IconButton, { ariaLabel: groupField.properties.tooltipProps.tooltipText, iconProps: { iconName: 'info' }, href: groupField.properties.tooltipProps.link, target: '_blank' }))));
                    }
                    : undefined;
                groupFieldElement = (React.createElement(Dropdown_1.Dropdown, tslib_1.__assign({}, groupField.properties, { 
                    // eslint-disable-next-line react/jsx-no-bind
                    componentRef: setRef, selectedKey: propValue || groupField.properties.selectedKey, disabled: groupField.properties.isDisabled || groupField.properties.disabled, ariaLabel: groupField.properties.ariaLabel, "aria-posinset": groupField.properties.ariaPositionInSet, "aria-setsize": groupField.properties.ariaSetSize, label: groupField.properties.label, options: dropdownOptions, calloutProps: groupField.properties.calloutProps, 
                    // eslint-disable-next-line react/jsx-no-bind
                    onChanged: function (option, index) {
                        _this._onDropDownChange(groupField, option, index);
                    }, "data-automation-id": groupField.properties.dataAutomationId, 
                    // eslint-disable-next-line react/jsx-no-bind
                    onRenderLabel: onRenderLabel })));
                break;
            /* CHECKBOX */
            case IPropertyPaneField_1.PropertyPaneFieldType.CheckBox:
                groupFieldElement = (React.createElement(Checkbox_1.Checkbox, tslib_1.__assign({}, groupField.properties, { 
                    // eslint-disable-next-line react/jsx-no-bind
                    componentRef: setRef, label: groupField.properties.text, checked: PropertyPaneGroup._getCheckedStatus(propValue, groupField), disabled: this._isDisabled(groupField), 
                    // eslint-disable-next-line react/jsx-no-bind
                    onChange: function (ev, isChecked) {
                        _this._onChange(groupField, isChecked);
                    } })));
                break;
            /* LABEL */
            // (SOX VSO bug #203642)
            // Accessibility doesn't work in PropertyPane, it need change code in fabric-react.
            case IPropertyPaneField_1.PropertyPaneFieldType.Label:
                groupFieldElement = React.createElement(office_ui_fabric_react_bundle_1.Label, tslib_1.__assign({}, groupField.properties), groupField.properties.text);
                break;
            /* SLIDER */
            case IPropertyPaneField_1.PropertyPaneFieldType.Slider:
                groupFieldElement = (React.createElement(Slider_1.Slider, tslib_1.__assign({}, groupField.properties, { 
                    // eslint-disable-next-line react/jsx-no-bind
                    componentRef: setRef, value: propValue || groupField.properties.value, 
                    // eslint-disable-next-line react/jsx-no-bind
                    onChange: function (value) {
                        _this._onChange(groupField, value);
                    } })));
                break;
            /* CHOICEGROUP */
            case IPropertyPaneField_1.PropertyPaneFieldType.ChoiceGroup:
                var selectedKey = void 0;
                /**
                 * In the below cases, we would like to retain the value of the checked option.
                 * 1. propValue can be undefined in the cases of non-webparts like the canvas where
                 *    they do not have properties bag.
                 * 2. propValue can be empty/null in both webpart/non-webpart cases.
                 */
                if (propValue !== undefined && propValue !== '' && propValue !== null) {
                    selectedKey = propValue;
                }
                groupField.properties.options.forEach(function (option) {
                    // Adding the tooltip only for the image and icon choicegroup options. Adding tooltiphost
                    // to the default choicegroup option(we don't need tooltip here) has an issue where the
                    // text goes behind the input element.
                    if (!option.onRenderLabel && (option.imageSrc || option.iconProps)) {
                        option.onRenderLabel = function (choice) {
                            return (React.createElement(office_ui_fabric_react_bundle_1.TooltipHost, { overflowMode: Tooltip_1.TooltipOverflowMode.Parent, calloutProps: { gapSpace: 65 }, content: choice === null || choice === void 0 ? void 0 : choice.text },
                                React.createElement("span", { id: choice === null || choice === void 0 ? void 0 : choice.labelId, className: !(0, KillSwitches_1.styleChoiceGroupUsingCustomCSSKSActivated)() ? 'ms-Label' : 'ms-label' }, choice === null || choice === void 0 ? void 0 : choice.text)));
                        };
                    }
                });
                var options = groupField.properties.options.map(function (option) {
                    var propertyPaneChoiceGroupOptionIconProps = option.iconProps, otherOptions = tslib_1.__rest(option, ["iconProps"]);
                    var iconOption;
                    if (propertyPaneChoiceGroupOptionIconProps) {
                        var iconName = propertyPaneChoiceGroupOptionIconProps.officeFabricIconFontName, otherIconProps = tslib_1.__rest(propertyPaneChoiceGroupOptionIconProps, ["officeFabricIconFontName"]);
                        iconOption = {
                            iconProps: tslib_1.__assign({ iconName: iconName }, otherIconProps)
                        };
                    }
                    var themableSvg = option.themableSvg;
                    var renderOption = themableSvg
                        ? {
                            onRenderField: _this._renderChoiceGroupWithSvg
                        }
                        : undefined;
                    var dataAutomationIdOption = {
                        'data-automation-id': "PropertyPaneChoiceGroup-".concat(option.key)
                    };
                    var styles = {
                        styles: { labelWrapper: { height: 'auto', 'min-height': 32, lineHeight: 16 } }
                    };
                    /**
                     * https://onedrive.visualstudio.com/WEX!/_workitems/edit/1532710
                     * isIncludeChoiceGroupLabelWithRadioButtonAriaLabelKSActivated
                     *
                     * This is a temporary work around. A11y narrator does not read
                     * choice group label with browsers that generate IA2 A11y tree, Chrome and Firefox.
                     * Include label with radio button aria-label to ensure it is read out in narrator.
                     *
                     * When graduating the killswitch remove ariaOptions variable.
                     */
                    if (isBrowserEdge === undefined) {
                        isBrowserEdge = navigator.userAgent.indexOf('Edg') > -1;
                    }
                    var ariaOptions = { ariaLabel: "".concat(groupField.properties.label, " ").concat(option.text) };
                    return !(0, KillSwitches_1.isIncludeChoiceGroupLabelWithRadioButtonAriaLabelKSActivated)() && !isBrowserEdge
                        ? lodash.merge({}, otherOptions, iconOption, renderOption, dataAutomationIdOption, styles, ariaOptions)
                        : lodash.merge({}, otherOptions, iconOption, renderOption, dataAutomationIdOption, styles);
                });
                groupFieldElement = (React.createElement(ChoiceGroup_1.ChoiceGroup, tslib_1.__assign({}, groupField.properties, { 
                    // eslint-disable-next-line react/jsx-no-bind
                    componentRef: setRef, options: options, className: !(0, KillSwitches_1.styleChoiceGroupUsingCustomCSSKSActivated)()
                        ? (0, office_ui_fabric_react_bundle_1.css)(PropertyPaneGroup_module_scss_1.default.propertyPaneChoiceGroupNew, (_a = {},
                            _a[PropertyPaneGroup_module_scss_1.default.choiceGroupContainsIconOrImage] = options.some(function (option) {
                                return Boolean(option.iconProps || option.imageSrc);
                            }),
                            _a))
                        : undefined, selectedKey: selectedKey, 
                    // eslint-disable-next-line react/jsx-no-bind
                    onChange: function (ev, checkedOption) {
                        if (checkedOption) {
                            _this._onChoiceGroupChange(groupField, checkedOption);
                        }
                    } })));
                break;
            /* BUTTON */
            case IPropertyPaneField_1.PropertyPaneFieldType.Button:
                var handleClick = function () {
                    var newValue = groupField.properties.onClick(propValue);
                    _this._onChange(groupField, newValue, IPropertyPaneField_1.PropertyPaneFieldType.Button);
                };
                var iconProps = groupField.properties.icon
                    ? { iconName: groupField.properties.icon }
                    : undefined;
                var buttonType = groupField.properties.buttonType;
                var buttonProps = tslib_1.__assign(tslib_1.__assign({}, groupField.properties), { ariaLabel: groupField.properties.ariaLabel || groupField.properties.text, componentRef: setRef, iconProps: iconProps, onClick: handleClick, text: groupField.properties.text });
                if (buttonType) {
                    delete buttonProps.buttonType; // remove since fully removed from Fabric as of 5
                }
                switch (buttonType) {
                    case IPropertyPaneButton_1.PropertyPaneButtonType.Primary:
                        groupFieldElement = React.createElement(office_ui_fabric_react_bundle_1.PrimaryButton, tslib_1.__assign({}, buttonProps));
                        break;
                    case IPropertyPaneButton_1.PropertyPaneButtonType.Compound:
                        groupFieldElement = React.createElement(office_ui_fabric_react_bundle_1.CompoundButton, tslib_1.__assign({}, buttonProps));
                        break;
                    case IPropertyPaneButton_1.PropertyPaneButtonType.Command:
                        groupFieldElement = React.createElement(office_ui_fabric_react_bundle_1.ActionButton, tslib_1.__assign({}, buttonProps));
                        break;
                    case IPropertyPaneButton_1.PropertyPaneButtonType.Icon:
                        groupFieldElement = React.createElement(office_ui_fabric_react_bundle_1.IconButton, tslib_1.__assign({}, buttonProps));
                        break;
                    default:
                        groupFieldElement = React.createElement(office_ui_fabric_react_bundle_1.Button, tslib_1.__assign({}, buttonProps));
                        break;
                }
                break;
            /* HORIZONTAL RULE */
            case IPropertyPaneField_1.PropertyPaneFieldType.HorizontalRule:
                groupFieldElement = React.createElement("hr", tslib_1.__assign({}, groupField.properties));
                break;
            /* LINK */
            case IPropertyPaneField_1.PropertyPaneFieldType.Link:
                var _b = groupField.properties, ariaLabel = _b.ariaLabel, groupProperties = tslib_1.__rest(_b, ["ariaLabel"]);
                var groupFieldProperties = !(0, KillSwitches_1.isLearnMoreAriaLabelKSActivated)()
                    ? tslib_1.__assign(tslib_1.__assign({}, groupProperties), { 'aria-label': ariaLabel ? ariaLabel : Strings_resx_1.default.LearnMoreLabel // We use this because 'aria-label' is the DOM appropriate attribute
                     }) : groupField.properties;
                groupFieldElement = (React.createElement(office_ui_fabric_react_bundle_1.Link
                // eslint-disable-next-line react/jsx-no-bind
                , tslib_1.__assign({ 
                    // eslint-disable-next-line react/jsx-no-bind
                    componentRef: setRef }, groupFieldProperties, { "data-interception": groupField.properties.target === '_blank' ? 'off' : undefined }), groupField.properties.text));
                break;
            case IPropertyPaneField_1.PropertyPaneFieldType.DynamicField:
                groupFieldElement = (React.createElement(DynamicDataWidget_1.default, { parentKey: key, type: IPropertyPaneField_1.PropertyPaneFieldType.DynamicField, fieldProperties: groupField.properties, entries: [propValue], dynamicDataProvider: this.props.dynamicConfiguration.dynamicDataProvider, 
                    // eslint-disable-next-line react/jsx-no-bind
                    onChange: this._onDynamicDataChanged.bind(this, groupField) }));
                break;
            case IPropertyPaneField_1.PropertyPaneFieldType.DynamicFieldSet:
                groupFieldElement = (React.createElement(DynamicDataWidget_1.default, { parentKey: key, type: IPropertyPaneField_1.PropertyPaneFieldType.DynamicFieldSet, fieldProperties: groupField.properties, entries: propValue, dynamicDataProvider: this.props.dynamicConfiguration.dynamicDataProvider, 
                    // eslint-disable-next-line react/jsx-no-bind
                    onChange: this._onDynamicDataChanged.bind(this, groupField) }));
                break;
            case IPropertyPaneField_1.PropertyPaneFieldType.DynamicTextField:
                groupFieldElement = this._getDynamicTextField(groupField, propValue, setRef);
                break;
            case IPropertyPaneField_1.PropertyPaneFieldType.SpinButton:
                groupFieldElement = (React.createElement(SpinButton_1.SpinButton, tslib_1.__assign({}, groupField.properties, { 
                    // eslint-disable-next-line react/jsx-no-bind
                    componentRef: setRef, value: propValue || groupField.properties.defaultValue, 
                    // eslint-disable-next-line react/jsx-no-bind
                    onIncrement: function (value) { return _this._onChange(groupField, Number(value) + 1); }, 
                    // eslint-disable-next-line react/jsx-no-bind
                    onDecrement: function (value) { return _this._onChange(groupField, Number(value) - 1); } })));
                break;
            case IPropertyPaneField_1.PropertyPaneFieldType.ThumbnailPicker:
                groupFieldElement = (React.createElement(propertyPaneThumbnailPicker_1.DeferredThumbnailPickerPreview, tslib_1.__assign({}, groupField.properties, { 
                    // eslint-disable-next-line react/jsx-no-bind
                    onItemChanged: function (newUrl, guidSet) {
                        var urlToReturn = groupField.properties.forceFullUrl
                            ? new URL(newUrl, window.location.origin).href
                            : newUrl;
                        if (groupField.properties.onItemChanged) {
                            groupField.properties.onItemChanged(urlToReturn, guidSet);
                        }
                        _this._onChange(groupField, urlToReturn);
                    }, 
                    // eslint-disable-next-line react/jsx-no-bind
                    onItemDeleted: function () {
                        if (groupField.properties.onItemDeleted) {
                            groupField.properties.onItemDeleted();
                        }
                        _this._onChange(groupField, undefined);
                    } })));
                break;
            case IPropertyPaneField_1.PropertyPaneFieldType.IconPicker:
                groupFieldElement = (React.createElement(propertyPaneIconPicker_1.DeferredIconPickerPreview, tslib_1.__assign({}, groupField.properties, { 
                    // eslint-disable-next-line react/jsx-no-bind
                    onItemChanged: function (iconName) {
                        if (groupField.properties.onItemChanged) {
                            groupField.properties.onItemChanged(iconName);
                        }
                        _this._onChange(groupField, iconName);
                    }, 
                    // eslint-disable-next-line react/jsx-no-bind
                    onItemDeleted: function () {
                        if (groupField.properties.onItemDeleted) {
                            groupField.properties.onItemDeleted();
                        }
                        _this._onChange(groupField, undefined);
                    } })));
                break;
            case IPropertyPaneField_1.PropertyPaneFieldType.Heading:
                groupFieldElement = React.createElement(groupField.properties.headingLevel || 'h3', null, groupField.properties.text);
                break;
            default:
                groupFieldElement = null;
        }
        return (React.createElement("div", { key: key, className: PropertyPaneGroup_module_scss_1.default.propertyPaneGroupField, "data-automation-id": 'propertyPaneGroupField' }, groupFieldElement));
    };
    PropertyPaneGroup.prototype._getDynamicTextField = function (groupField, dataPath, setRef) {
        var _this = this;
        var textFieldValue = dataPath.reference
            ? '[' + dataPath.reference + ']'
            : dataPath.value || groupField.properties.value || '';
        return (React.createElement(WorkaroundTextField, tslib_1.__assign({}, groupField.properties, { componentRef: setRef, validateOnLoad: false, value: textFieldValue, 
            // eslint-disable-next-line react/jsx-no-bind
            onGetErrorMessage: this._validateDynamicDataPath.bind(this, groupField), 
            // eslint-disable-next-line react/jsx-no-bind
            onNotifyValidationResult: function (errorMessage, value) {
                return _this._onNotifyValidationResult(errorMessage, _this._getDynamicProperty(value, groupField), groupField, _this.props.setEntryState);
            } })));
    };
    PropertyPaneGroup.prototype._renderChoiceGroupWithSvg = function (props) {
        var _a, _b, _c;
        var isChecked = props.checked;
        var themableSvg = props.themableSvg;
        return (React.createElement("label", { htmlFor: props.id, className: (0, office_ui_fabric_react_bundle_1.css)('ms-ChoiceField-field', PropertyPaneChoiceGroup_module_scss_1.default.field, (_a = {},
                _a['ms-ChoiceField-field--image ' + PropertyPaneChoiceGroup_module_scss_1.default.fieldIsImage] = !!props.imageSrc,
                _a['ms-ChoiceField--icon ' + PropertyPaneChoiceGroup_module_scss_1.default.fieldIsIcon] = !!props.iconProps,
                _a['is-checked ' + PropertyPaneChoiceGroup_module_scss_1.default.fieldIsChecked] = isChecked,
                _a['is-disabled ' + PropertyPaneChoiceGroup_module_scss_1.default.fieldIsDisabled] = props.disabled,
                _a[PropertyPaneChoiceGroup_module_scss_1.default.RTLEnabled] = true,
                _a)) },
            props.imageSrc && (React.createElement("div", { className: (0, office_ui_fabric_react_bundle_1.css)('ms-ChoiceField-innerField', PropertyPaneChoiceGroup_module_scss_1.default.innerField) },
                React.createElement("div", { className: (0, office_ui_fabric_react_bundle_1.css)('ms-ChoiceField-imageWrapper', PropertyPaneChoiceGroup_module_scss_1.default.imageWrapper, (_b = {},
                        _b['is-hidden ' + PropertyPaneChoiceGroup_module_scss_1.default.imageWrapperIsHidden] = isChecked,
                        _b)) },
                    React.createElement("div", { className: (0, office_ui_fabric_react_bundle_1.css)('ms-Image', PropertyPaneChoiceGroup_module_scss_1.default.imageRoot), style: {
                            width: props.imageSize ? props.imageSize.width : undefined,
                            height: props.imageSize ? props.imageSize.height : undefined
                        } }, themableSvg)),
                React.createElement("div", { className: (0, office_ui_fabric_react_bundle_1.css)('ms-ChoiceField-imageWrapper', PropertyPaneChoiceGroup_module_scss_1.default.imageWrapper, (_c = {},
                        _c['is-hidden ' + PropertyPaneChoiceGroup_module_scss_1.default.imageWrapperIsHidden] = !isChecked,
                        _c)) },
                    React.createElement("div", { className: (0, office_ui_fabric_react_bundle_1.css)('ms-Image', PropertyPaneChoiceGroup_module_scss_1.default.imageRoot), style: {
                            width: props.imageSize ? props.imageSize.width : undefined,
                            height: props.imageSize ? props.imageSize.height : undefined
                        } }, themableSvg)))),
            props.iconProps && (React.createElement("div", { className: (0, office_ui_fabric_react_bundle_1.css)('ms-ChoiceField-innerField', PropertyPaneChoiceGroup_module_scss_1.default.innerField) },
                React.createElement("div", { className: (0, office_ui_fabric_react_bundle_1.css)('ms-ChoiceField-iconWrapper', PropertyPaneChoiceGroup_module_scss_1.default.iconWrapper) },
                    React.createElement(office_ui_fabric_react_bundle_1.Icon, tslib_1.__assign({}, props.iconProps))))),
            props.imageSrc || props.iconProps ? (React.createElement("div", { className: (0, office_ui_fabric_react_bundle_1.css)('ms-ChoiceField-labelWrapper', PropertyPaneChoiceGroup_module_scss_1.default.labelWrapper, PropertyPaneChoiceGroup_module_scss_1.default.labelWrapperTextOverflow) },
                React.createElement("span", { id: props.labelId, className: 'ms-Label' }, props.text))) : (React.createElement("span", { id: props.labelId, className: 'ms-Label' }, props.text))));
    };
    PropertyPaneGroup.prototype._onNotifyValidationResult = function (errorMessage, value, groupField, setEntryState) {
        if (setEntryState) {
            setEntryState(groupField.targetProperty, !errorMessage);
        }
        this._onChange(groupField, value);
    };
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    PropertyPaneGroup.prototype._validateDynamicDataPath = function (groupField, value) {
        var errorMessage = '';
        // Call the web part's onGetErrorMessage before the framework validation.
        if (groupField.properties.onGetErrorMessage) {
            errorMessage = groupField.properties.onGetErrorMessage(value);
        }
        // Error message will be null in two cases:
        //  1. When web part's validation returns no error
        //  2. When web part's onGetErrorMessage is not defined
        // In either of the cases framework validation should happen.
        if (!errorMessage) {
            if (!!value.match(DYNAMICPROPERTY_DEFAULT_REGEX) || !!value.match(DYNAMICPROPERTY_COMPONENT_REGEX)) {
                var dynamicProperty = this._getDynamicProperty(value, groupField);
                if (!dynamicProperty.tryGetValue()) {
                    // entered string does not return any dynamic data
                    errorMessage = Strings_resx_1.default.NoDynamicDataReturnedErrorText;
                }
            }
        }
        return errorMessage;
    };
    /**
     * Returns the dynamic property object if any, for the given value.
     *
     * @param value - value of property pane dynamic text field.
     * @param groupField - property pane dyanmic text field.
     */
    PropertyPaneGroup.prototype._getDynamicProperty = function (value, groupField) {
        var dynamicProperty = new sp_component_base_1.DynamicProperty(groupField.properties.dynamicDataProvider, groupField.properties.changeCallback);
        // if the entered string conforms to the dynamic data resource path,
        // then set the reference, else set it as a static value.
        var matches = value
            ? DYNAMICPROPERTY_DEFAULT_REGEX.exec(value) || DYNAMICPROPERTY_COMPONENT_REGEX.exec(value)
            : undefined;
        if (matches) {
            dynamicProperty.setReference(matches[1]); // The captured group is at index 1, always.
        }
        else {
            dynamicProperty.setValue(value);
        }
        return dynamicProperty;
    };
    PropertyPaneGroup.prototype._onFocusTextFieldPropertyPane = function (ev, props) {
        /**
         * Record the initial text content when focus entered text field.
         * It is used in blur event handler to compare the content.
         */
        if (props.logName) {
            this._initialValue = ev.target.value;
        }
    };
    PropertyPaneGroup.prototype._onBlurTextFieldPropertyPane = function (ev, props) {
        /**
         * Scenario name:
         * 1. Number of time text field in property pane is entered in edit mode.
         * 2. Distribution of character number added in text field after one edition.
         * 3. Type of edition user take. E.g. Clear, Add or Edit.
         * Signal: Log the value of text area when focus goes out. Seen it as user finished edit.
         * It will not be logged if user doesn't make change.
         */
        if (props.logName) {
            var action = void 0;
            var currentText = ev.target.value;
            var defaultValue = props.value || '';
            if (this._initialValue !== currentText) {
                if (currentText === defaultValue || currentText === '') {
                    action = 'Clear';
                }
                else if (this._initialValue === defaultValue) {
                    action = 'Add';
                }
                else {
                    action = 'Edit';
                }
                sp_diagnostics_1._EngagementLogger.logEventWithLogEntry(new sp_diagnostics_1._LogEntry(props.logName.moduleName, props.logName.controlName, sp_diagnostics_1._LogType.Event, {
                    action: action,
                    length: currentText.length.toString()
                }));
            }
        }
    };
    /**
     * Event handler for a ChoiceGroup's onChange event.
     *
     * @param groupField - the property pane control which has just invoked onChanged event.
     * @param checkedOption - the option representing the field which is checked now.
     */
    PropertyPaneGroup.prototype._onChoiceGroupChange = function (groupField, checkedOption) {
        // Maintain the choice group props before EVERYTHING happens.
        // It is needed because the design flaw of Fabric-React ChoiceGroup. Discussions in PR:
        // https://aka.ms/fociu0
        groupField.properties.options.forEach(function (option) { return (option.checked = option.key === checkedOption.key); });
        this._onChange(groupField, checkedOption.key);
    };
    /**
     * Event handler for a DropDown's onChange event.
     * todo (SPPPLAT VSO#169096) Change fabric controls to send in a common type for all the events.
     * Then change this method to use the common type.
     */
    PropertyPaneGroup.prototype._onDropDownChange = function (groupField, selectedItem, selectedIndex) {
        // invoke onPropertyChange event
        if (this.props.onChange) {
            this.props.onChange(groupField.targetProperty, selectedItem.key);
        }
    };
    /**
     * Event handler for a group field's onChange event.
     */
    PropertyPaneGroup.prototype._onChange = function (
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    groupField, value, fieldType) {
        if (this.props.onChange) {
            this.props.onChange(groupField.targetProperty, value, fieldType);
        }
        // enable/disable Save button
        if (!groupField.properties.onGetErrorMessage && this.props.setEntryState) {
            this.props.setEntryState(groupField.targetProperty, true);
        }
    };
    /**
     * Event handler for header click.
     */
    PropertyPaneGroup.prototype._onHeaderClicked = function () {
        // We maintain the state of the propertypane group only if the user assigns a name to it.
        if (this.props.groupName && this.props.groupName.length > 0) {
            this.props.propertyPaneGroupStateChanged(this.props.pageNumber, this.props.groupName, !this.state.isDetailsShown);
        }
        this.setState({
            isDetailsShown: !this.state.isDetailsShown
        });
    };
    /**
     * Method to check if the passed in groupfield is disabled or not.
     *
     * To support backward compatibility we are checking for 'isDisabled', 'enabled' and 'isEnabled'
     * property values.
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    PropertyPaneGroup.prototype._isDisabled = function (groupField) {
        var disabled = groupField.properties.disabled;
        /**
         * This is to support backward compatibility.
         * If the 'disabled' property is undefined then we check for the old properties if any and take their
         * value.
         */
        if (disabled === undefined) {
            if (groupField.properties.hasOwnProperty('isDisabled') &&
                groupField.properties.isDisabled !== undefined) {
                disabled = groupField.properties.isDisabled;
            }
            else if (groupField.properties.hasOwnProperty('enabled') &&
                groupField.properties.enabled !== undefined) {
                disabled = !groupField.properties.enabled;
            }
            else if (groupField.properties.hasOwnProperty('isEnabled') &&
                groupField.properties.isEnabled !== undefined) {
                disabled = !groupField.properties.isEnabled;
            }
        }
        return disabled;
    };
    PropertyPaneGroup.prototype._onDynamicDataChanged = function (groupField, targetProperty, newPropValue) {
        // For dynamic fields, target property is not set at the top level.
        // It is at the entry level. Hence re-assigning the targetProperty here,
        // which is used in for example, BaseWebPart to notify the web part of the change.
        groupField.targetProperty = targetProperty;
        this._onChange(groupField, newPropValue);
    };
    tslib_1.__decorate([
        office_ui_fabric_react_bundle_1.autobind
    ], PropertyPaneGroup.prototype, "_renderGroupField", null);
    tslib_1.__decorate([
        office_ui_fabric_react_bundle_1.autobind
    ], PropertyPaneGroup.prototype, "_renderChoiceGroupWithSvg", null);
    tslib_1.__decorate([
        office_ui_fabric_react_bundle_1.autobind
    ], PropertyPaneGroup.prototype, "_onDynamicDataChanged", null);
    return PropertyPaneGroup;
}(React.Component));
exports.default = PropertyPaneGroup;
//# sourceMappingURL=PropertyPaneGroup.js.map