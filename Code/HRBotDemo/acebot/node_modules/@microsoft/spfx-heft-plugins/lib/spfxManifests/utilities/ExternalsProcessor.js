"use strict";
// This class does not really belong in this package.
// TODO: Move this class to a different package.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getVersionFromPackageJson = exports.getNonStandardExternals = exports.includeNonStandardExternal = void 0;
const path = __importStar(require("path"));
const node_core_library_1 = require("@rushstack/node-core-library");
let _nonStandardExternalMapIsInitialized = false;
const _nonStandardExternalMap = {
    react: {
        name: 'react',
        version: undefined,
        id: '0d910c1c-13b9-4e1c-9aa4-b008c5e42d7d',
        getFailoverPath: (packageRoot) => path.join(packageRoot, 'index.js'),
        getVersion: getVersionFromPackageJson('react')
    },
    'react-dom': {
        name: 'react-dom',
        version: undefined,
        id: 'aa0a46ec-1505-43cd-a44a-93f3a5aa460a',
        getFailoverPath: (packageRoot) => path.join(packageRoot, 'index.js'),
        getVersion: getVersionFromPackageJson('react-dom')
    },
    '@microsoft/microsoft-graph-client': {
        name: '@microsoft/microsoft-graph-client',
        version: undefined,
        id: '32b9363b-09ff-4959-929a-cab2663fb223',
        getFailoverPath: (packageRoot) => `${packageRoot}/lib/index.js`,
        getVersion: getVersionFromPackageJson('@microsoft/microsoft-graph-client')
    }
};
/**
 * @internal
 */
function includeNonStandardExternal(name, external) {
    if (_nonStandardExternalMapIsInitialized) {
        throw new Error("The non-standard external map has already been initialized, which means it's probably already " +
            'been used. Adding an additional non-standard external is likely to not have any effect.');
    }
    _nonStandardExternalMap[name] = external;
}
exports.includeNonStandardExternal = includeNonStandardExternal;
/**
 * This is a temporary function that will soon be replaced by something more robust. It
 *  currently serves to include linked externals referenced in projects that don't have manifests.
 */
function getNonStandardExternals(projectRootPath, referencedProjects) {
    const result = {};
    _initializeNonStandardExternalMap(projectRootPath, referencedProjects);
    for (const dependency in _nonStandardExternalMap) {
        if (_nonStandardExternalMap.hasOwnProperty(dependency)) {
            _tryFillFailoverPath(projectRootPath, _nonStandardExternalMap[dependency]);
            result[dependency] = _nonStandardExternalMap[dependency];
        }
    }
    return result;
}
exports.getNonStandardExternals = getNonStandardExternals;
function _initializeNonStandardExternalMap(projectRootPath, referencedProjects) {
    if (!_nonStandardExternalMapIsInitialized) {
        for (const packageName in _nonStandardExternalMap) {
            if (_nonStandardExternalMap.hasOwnProperty(packageName)) {
                const project = _nonStandardExternalMap[packageName];
                project.version = project.getVersion
                    ? project.getVersion(projectRootPath, referencedProjects)
                    : undefined;
            }
        }
        _nonStandardExternalMapIsInitialized = true;
    }
}
/**
 * @internal
 */
function getVersionFromPackageJson(packageName) {
    return (projectRootPath) => {
        try {
            const resolvedPath = node_core_library_1.Import.resolvePackage({
                packageName: packageName,
                baseFolderPath: projectRootPath
            });
            if (resolvedPath) {
                const packageJson = node_core_library_1.PackageJsonLookup.instance.loadPackageJson(`${resolvedPath}/package.json`);
                const version = packageJson.version;
                const matches = version.match(/([^-]*)(?:.*)/);
                const matchIndex = 1;
                if (!matches || matches.length < matchIndex + 1) {
                    return undefined;
                }
                return matches[matchIndex];
            }
        }
        catch (e) {
            return undefined;
        }
    };
}
exports.getVersionFromPackageJson = getVersionFromPackageJson;
function _tryFillFailoverPath(projectRootPath, dependency) {
    if (!dependency.failoverPath && dependency.getFailoverPath) {
        try {
            const resolvedPath = node_core_library_1.Import.resolvePackage({
                packageName: dependency.name,
                baseFolderPath: projectRootPath
            });
            dependency.failoverPath = dependency.getFailoverPath(resolvedPath);
        }
        catch (e) {
            /* no-op */
        }
    }
}
//# sourceMappingURL=ExternalsProcessor.js.map