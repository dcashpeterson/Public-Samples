"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const glob_1 = __importDefault(require("glob"));
const heft_config_file_1 = require("@rushstack/heft-config-file");
const node_core_library_1 = require("@rushstack/node-core-library");
const PluginNames_1 = require("../PluginNames");
const AzureUploader_1 = require("../../utilities/AzureUploader");
const devDeployUtilities_1 = require("../../utilities/devDeployUtilities");
const deploy_azure_storage_schema_json_1 = __importDefault(require("./deploy-azure-storage.schema.json"));
const configFile = new heft_config_file_1.ConfigurationFile({
    projectRelativeFilePath: 'config/deploy-azure-storage.json',
    jsonSchemaObject: deploy_azure_storage_schema_json_1.default
});
/**
 * @internal
 */
class DeployAzureStoragePlugin {
    static async deployToAzureAsync({ terminal, buildFolder, emitError, rigConfig, tryCreateContainer }) {
        const config = (await configFile.tryLoadConfigurationFileForProjectAsync(terminal, buildFolder, rigConfig)) ||
            {};
        if (!config.workingDir) {
            config.workingDir = `${buildFolder}/release/assets`;
        }
        else {
            // Trim trailing slashes
            config.workingDir = config.workingDir.replace(/[\/\\]+$/, '');
        }
        if (!config.uploadPath) {
            config.uploadPath = '**/*';
        }
        if (!config.container) {
            emitError(new Error('Config file missing container name.'));
            return;
        }
        if (!config.account) {
            emitError(new Error('Config file missing Azure account name.'));
            return;
        }
        if (!config.accessKey) {
            emitError(new Error('Config file missing Azure access key.'));
            return;
        }
        terminal.writeLine(`Uploading files '${config.uploadPath}' from directory '${config.workingDir}' to Azure`);
        const files = await node_core_library_1.LegacyAdapters.convertCallbackToPromise(glob_1.default, config.uploadPath, {
            cwd: config.workingDir
        });
        const filesToUpload = files.map((filename) => {
            return {
                azurePath: filename,
                localPath: `${config.workingDir}/${filename}`
            };
        });
        const azureUploader = new AzureUploader_1.AzureUploader({
            storageAccountName: config.account,
            containerName: config.container,
            storageKey: config.accessKey
        });
        try {
            if (tryCreateContainer) {
                await azureUploader.ensureContainerExistsAsync(terminal);
            }
            await azureUploader.uploadFilesToAzureAsync(terminal, filesToUpload);
        }
        catch (e) {
            emitError(e);
        }
        terminal.writeLine(node_core_library_1.Colors.green('Upload complete!\n'));
        terminal.writeLine(`Access your files at: ${(0, devDeployUtilities_1.getStorageAccountUrl)(config.account)}/${config.container}\n`);
    }
    apply(taskSession, heftConfiguration) {
        const scopedLogger = taskSession.logger;
        const skipTryCreateContainerParameter = taskSession.parameters.getFlagParameter('--skip-try-create-container');
        // TODO: Add incremental upload support
        taskSession.hooks.run.tapPromise(PluginNames_1.DeployAzureStoragePlugin, async () => {
            await DeployAzureStoragePlugin.deployToAzureAsync({
                terminal: heftConfiguration.globalTerminal,
                emitError: scopedLogger.emitError.bind(scopedLogger),
                buildFolder: heftConfiguration.buildFolderPath,
                // TODO: Update this to use an interface instead of a class
                rigConfig: heftConfiguration.rigConfig,
                tryCreateContainer: !skipTryCreateContainerParameter.value
            });
        });
    }
}
exports.default = DeployAzureStoragePlugin;
//# sourceMappingURL=DeployAzureStoragePlugin.js.map