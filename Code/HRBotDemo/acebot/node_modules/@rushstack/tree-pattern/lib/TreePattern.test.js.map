{"version":3,"file":"TreePattern.test.js","sourceRoot":"","sources":["../src/TreePattern.test.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,+CAAsD;AAMtD,MAAM,QAAQ,GAAgB,IAAI,yBAAW,CAAC;IAC5C,CAAC,EAAE;QACD,CAAC;QACD,CAAC;QACD,yBAAW,CAAC,GAAG,CAAC,QAAQ,EAAE;YACxB,CAAC,EAAE,EAAE;SACN,CAAC;KACH;CACF,CAAC,CAAC;AAEH,MAAM,QAAQ,GAAgB,IAAI,yBAAW,CAAC;IAC5C,CAAC,EAAE,yBAAW,CAAC,KAAK,CAAC;QACnB,GAAG;QACH;YACE,CAAC,EAAE,CAAC;SACL;KACF,CAAC;CACH,CAAC,CAAC;AAEH,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;IAC3B,IAAI,CAAC,qBAAqB,EAAE,GAAG,EAAE;QAC/B,MAAM,KAAK,GAAa;YACtB,CAAC,EAAE;gBACD,CAAC;gBACD,CAAC;gBACD;oBACE,CAAC,EAAE,EAAE;oBACL,KAAK,EAAE,IAAI;iBACZ;aACF;YACD,CAAC,EAAE,GAAG;SACP,CAAC;QAEF,MAAM,QAAQ,GAAe,EAAE,CAAC;QAChC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACnD,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,aAAa,CAAC;YACpC,CAAC,EAAE,EAAE;YACL,KAAK,EAAE,IAAI;SACZ,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,sBAAsB,EAAE,GAAG,EAAE;QAChC,MAAM,MAAM,GAAa;YACvB,CAAC,EAAE,GAAG;SACP,CAAC;QACF,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAE1C,MAAM,MAAM,GAAa;YACvB,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE;SACZ,CAAC;QACF,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAE1C,MAAM,MAAM,GAAa;YACvB,CAAC,EAAE,GAAG;SACP,CAAC;QACF,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { TreePattern, TreeNode } from './TreePattern';\r\n\r\nexport interface IMyPattern {\r\n  branch?: string;\r\n}\r\n\r\nconst pattern1: TreePattern = new TreePattern({\r\n  a: [\r\n    1,\r\n    2,\r\n    TreePattern.tag('branch', {\r\n      b: []\r\n    })\r\n  ]\r\n});\r\n\r\nconst pattern2: TreePattern = new TreePattern({\r\n  c: TreePattern.oneOf([\r\n    123,\r\n    {\r\n      d: 1\r\n    }\r\n  ])\r\n});\r\n\r\ndescribe('TreePattern', () => {\r\n  test('matches using a tag', () => {\r\n    const tree1: TreeNode = {\r\n      a: [\r\n        1,\r\n        2,\r\n        {\r\n          b: [],\r\n          extra: 'hi'\r\n        }\r\n      ],\r\n      b: 123\r\n    };\r\n\r\n    const captures: IMyPattern = {};\r\n    expect(pattern1.match(tree1, captures)).toBe(true);\r\n    expect(captures.branch).toMatchObject({\r\n      b: [],\r\n      extra: 'hi'\r\n    });\r\n  });\r\n\r\n  test('matches alternatives', () => {\r\n    const tree2a: TreeNode = {\r\n      c: 123\r\n    };\r\n    expect(pattern2.match(tree2a)).toBe(true);\r\n\r\n    const tree2b: TreeNode = {\r\n      c: { d: 1 }\r\n    };\r\n    expect(pattern2.match(tree2b)).toBe(true);\r\n\r\n    const tree2c: TreeNode = {\r\n      c: 321\r\n    };\r\n    expect(pattern2.match(tree2c)).toBe(false);\r\n  });\r\n});\r\n"]}