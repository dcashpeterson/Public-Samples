/// <reference types="node" />
/**
 * Type of {@link ISdkCallbackEvent.logMessage}
 * @public
 */
export interface IProgressBarCallbackLogMessage {
    /**
     * A status message to print in the log window, or `undefined` if there are
     * no further messages.  This string may contain newlines.
     */
    text: string;
    /**
     * The type of message.  More message types may be added in the future.
     */
    kind: 'info' | 'debug';
}
/**
 * Event options for {@link ILoadSdkAsyncOptions.onNotifyEvent}
 * @public
 */
export interface ISdkCallbackEvent {
    /**
     * Allows the caller to display log information about the operation.
     */
    logMessage: IProgressBarCallbackLogMessage | undefined;
    /**
     * Allows the caller to display a progress bar for long-running operations.
     *
     * @remarks
     * If a long-running operation is required, then `progressPercent` will
     * start at 0.0 and count upwards and finish at 100.0 if the operation completes
     * successfully.  If the long-running operation has not yet started, or
     * is not required, then the value will be `undefined`.
     */
    progressPercent: number | undefined;
}
/**
 * Type of {@link ILoadSdkAsyncOptions.onNotifyEvent}
 * @public
 */
export type SdkNotifyEventCallback = (sdkEvent: ISdkCallbackEvent) => void;
/**
 * Options for {@link RushSdkLoader.loadAsync}
 * @public
 */
export interface ILoadSdkAsyncOptions {
    /**
     * The folder to start from when searching for the Rush workspace configuration.
     * If this folder does not contain a `rush.json` file, then each parent folder
     * will be searched.  If `rush.json` is not found, then the SDK fails to load.
     */
    rushJsonSearchFolder?: string;
    /**
     * A cancellation token that the caller can use to prematurely abort the operation.
     */
    abortSignal?: AbortSignal;
    /**
     * Allows the caller to monitor the progress of the operation.
     */
    onNotifyEvent?: SdkNotifyEventCallback;
}
/**
 * Exposes operations that control how the `@microsoft/rush-lib` engine is
 * located and loaded.
 * @public
 */
export declare class RushSdkLoader {
    /**
     * Throws an "AbortError" exception if abortSignal.aborted is true.
     */
    private static _checkForCancel;
    /**
     * Returns true if the Rush engine has already been loaded.
     */
    static get isLoaded(): boolean;
    /**
     * Manually load the Rush engine based on rush.json found for `rushJsonSearchFolder`.
     * Throws an exception if {@link RushSdkLoader.isLoaded} is already `true`.
     *
     * @remarks
     * This API supports an callback that can be used display a progress bar,
     * log of operations, and allow the operation to be canceled prematurely.
     */
    static loadAsync(options?: ILoadSdkAsyncOptions): Promise<void>;
}
//# sourceMappingURL=loader.d.ts.map