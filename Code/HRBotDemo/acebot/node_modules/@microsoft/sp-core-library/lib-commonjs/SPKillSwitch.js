"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Guid_1 = tslib_1.__importDefault(require("./Guid"));
var Validate_1 = tslib_1.__importDefault(require("./Validate"));
var DISABLED_KILLSWITCH_PREFIX = '!';
/**
 * This class supports Microsoft's internal deployment workflow.
 *
 * @internal
 */
var SPKillSwitch = /** @class */ (function () {
    function SPKillSwitch() {
    }
    /**
     * RESERVED FOR INTERNAL USAGE.  This method is invoked automatically by the system shell.
     * The application code should not call it directly.
     */
    SPKillSwitch.initialize = function (killSwitchGuids) {
        SPKillSwitch._isInitialized = true;
        SPKillSwitch._activatedKillSwitches = new Map();
        if (killSwitchGuids) {
            for (var _i = 0, _a = Object.keys(killSwitchGuids); _i < _a.length; _i++) {
                var killSwitchGuid = _a[_i];
                var normalizedKillSwitchGuid = Guid_1.default.tryParse(killSwitchGuid);
                if (normalizedKillSwitchGuid) {
                    SPKillSwitch._activatedKillSwitches.set(normalizedKillSwitchGuid.toString(), true);
                }
            }
        }
    };
    /**
     * RESERVED FOR INTERNAL USAGE.  This method is invoked automatically by the system shell.
     * The application code should not call it directly.
     */
    SPKillSwitch.setDebugKillswitches = function (debugKillswitches) {
        if (!SPKillSwitch._isInitialized && !DEPRECATED_UNIT_TEST) {
            throw new Error("Killswitches are not initialized. Can't set debug killswitched.");
        }
        // 'debugKillSwitches' value is expected to be a comma separated guid list.
        if (debugKillswitches && debugKillswitches.length) {
            try {
                for (var _i = 0, _a = debugKillswitches.split(','); _i < _a.length; _i++) {
                    var killSwitchValue = _a[_i];
                    var deactivated = killSwitchValue[0] === DISABLED_KILLSWITCH_PREFIX;
                    var guid = Guid_1.default.tryParse(deactivated ? killSwitchValue.slice(1) : killSwitchValue);
                    if (guid) {
                        SPKillSwitch._activatedKillSwitches.set(guid.toString(), !deactivated);
                    }
                }
            }
            catch (error) {
                // If an exception is thrown, we'll log the error
                // eslint-disable-next-line no-console
                console.log("Error parsing killSwitches query string parameter: ".concat(error));
            }
        }
    };
    /**
     * Returns true if the switch is activated.
     * @param killSwitchGuid - identifier for the kill switch
     * @param date - @deprecated This parameter does not impact return value of the function.  It
     *        documents the date when the kill switch was introduced, to facilitate bulk cleanup.
     *        The date should be updated if additional fixes are made inside the block.
     * @param featureName - @deprecated This parameter does not impact return value of the function.
     *        It is an informational tag to facilitate bulk cleanup, e.g. by allowing teams
     *        to search for switches related to their feature.
     * @returns true if the switch is activated, i.e. we should revert to the old behavior
     */
    SPKillSwitch.isActivated = function (killSwitchGuid, date, featureName) {
        if (!SPKillSwitch._isInitialized && !DEPRECATED_UNIT_TEST) {
            throw new Error("Killswitches are not initialized. Killswitch requested: ".concat(killSwitchGuid));
        }
        if (DEBUG) {
            Validate_1.default.isNotNullOrUndefined(killSwitchGuid, 'killSwitchGuid');
            if (typeof killSwitchGuid === 'string') {
                var parsedKillSwitchGuid = Guid_1.default.parse(killSwitchGuid);
                if (parsedKillSwitchGuid.toString() !== killSwitchGuid) {
                    throw new Error("Kill Switch GUID must be formatted as ".concat(parsedKillSwitchGuid.toString(), " not ").concat(killSwitchGuid));
                }
                killSwitchGuid = parsedKillSwitchGuid;
            }
        }
        if (!killSwitchGuid) {
            return false;
        }
        return !!SPKillSwitch._activatedKillSwitches.get(killSwitchGuid.toString());
    };
    SPKillSwitch._isInitialized = false;
    SPKillSwitch._activatedKillSwitches = new Map();
    return SPKillSwitch;
}());
exports.default = SPKillSwitch;
//# sourceMappingURL=SPKillSwitch.js.map