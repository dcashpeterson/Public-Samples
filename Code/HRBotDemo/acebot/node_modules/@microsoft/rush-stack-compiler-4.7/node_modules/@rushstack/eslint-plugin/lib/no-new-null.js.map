{"version":3,"file":"no-new-null.js","sourceRoot":"","sources":["../src/no-new-null.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport type { TSESLint, TSESTree } from '@typescript-eslint/experimental-utils';\nimport { AST_NODE_TYPES } from '@typescript-eslint/experimental-utils';\n\ntype MessageIds = 'error-new-usage-of-null';\ntype Options = [];\n\ntype Accessible = {\n  accessibility?: TSESTree.Accessibility;\n};\n\nconst noNewNullRule: TSESLint.RuleModule<MessageIds, Options> = {\n  meta: {\n    type: 'problem',\n    messages: {\n      'error-new-usage-of-null':\n        'Usage of \"null\" is deprecated except when describing legacy APIs; use \"undefined\" instead'\n    },\n    schema: [\n      {\n        type: 'object',\n        additionalProperties: false\n      }\n    ],\n    docs: {\n      description:\n        'Prevent usage of JavaScript\\'s \"null\" keyword in new type declarations. To avoid hampering usage' +\n        ' of preexisting APIs that require \"null\", the rule ignores declarations that are local variables,' +\n        ' private members, or types that are not exported.',\n      // Deprecated in ESLint v8; Keep for backwards compatibility\n      category: 'Stylistic Issues',\n      recommended: 'error',\n      url: 'https://www.npmjs.com/package/@rushstack/eslint-plugin'\n    } as TSESLint.RuleMetaDataDocs\n  },\n\n  create: (context: TSESLint.RuleContext<MessageIds, Options>) => {\n    /**\n     * Returns true if the accessibility is not explicitly set to private or protected, e.g. class properties, methods.\n     */\n    function isPubliclyAccessible(node?: Accessible): boolean {\n      const accessibility = node?.accessibility;\n      return !(accessibility === 'private' || accessibility === 'protected');\n    }\n\n    /**\n     * Let's us check the accessibility field of certain types of nodes\n     */\n    function isAccessible(node?: unknown): node is Accessible {\n      if (!node) {\n        return false;\n      }\n      switch ((node as TSESTree.Node).type) {\n        case AST_NODE_TYPES.MethodDefinition:\n          return true;\n        case AST_NODE_TYPES.PropertyDefinition:\n          return true;\n        case AST_NODE_TYPES.TSIndexSignature:\n          return true;\n        case AST_NODE_TYPES.TSParameterProperty:\n          return true;\n        default:\n          return false;\n      }\n    }\n\n    /**\n     * Checks if the type declaration is lifted to be exportable to others\n     */\n    function isDefinitionExportable(node?: TSESTree.Node): boolean {\n      switch (node?.type) {\n        case undefined: // base case\n          return false;\n        case AST_NODE_TYPES.BlockStatement: // we are an inline function, scope is not exportable\n          return false;\n        case AST_NODE_TYPES.ExportNamedDeclaration: // our definition is being exported\n          return true;\n        case AST_NODE_TYPES.Program: // our definition can be exported\n          return true;\n        default:\n          if (isAccessible(node)) {\n            // only fail when class method/constructor is accessible publicly\n            return isPubliclyAccessible(node);\n          }\n          return isDefinitionExportable(node?.parent);\n      }\n    }\n\n    /**\n     * Returns true if this type definition exposes a null type\n     */\n    function isNewNull(node?: TSESTree.Node): boolean {\n      switch (node?.type) {\n        case undefined:\n          return false;\n        case AST_NODE_TYPES.TSTypeAnnotation:\n          return isDefinitionExportable(node.parent);\n        case AST_NODE_TYPES.TSTypeAliasDeclaration:\n          return isDefinitionExportable(node.parent);\n        default:\n          return isNewNull(node?.parent);\n      }\n    }\n\n    return {\n      TSNullKeyword(node): void {\n        if (isNewNull(node.parent)) {\n          context.report({ node, messageId: 'error-new-usage-of-null' });\n        }\n      }\n    };\n  }\n};\n\nexport { noNewNullRule };\n"]}