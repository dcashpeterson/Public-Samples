"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const node_core_library_1 = require("@rushstack/node-core-library");
const PluginNames_1 = require("../PluginNames");
const WebpackConfigurationGenerator_1 = require("../webpackConfigurationPlugin/WebpackConfigurationGenerator");
const LegacyExternals_1 = require("./LegacyExternals");
const WEBPACK4_PLUGIN_NAME = 'webpack4-plugin';
/**
 * @internal
 */
class ThirdPartyExternalsPlugin {
    apply(taskSession, heftConfiguration) {
        const scopedLogger = taskSession.logger;
        taskSession.requestAccessToPluginByName('@rushstack/heft-webpack4-plugin', WEBPACK4_PLUGIN_NAME, (accessor) => {
            accessor.hooks.onConfigure.tapPromise({
                name: PluginNames_1.ThirdPartyExternalsPlugin,
                // Make sure this runs after the webpack configuration. Avoid using the onAfterConfigure hook
                // since it is possible that we will update the configuration.
                stage: Number.MAX_SAFE_INTEGER
            }, async (webpackConfiguration) => {
                // Webpack Dev Server will only consider the first config if multiple are defined.
                if (Array.isArray(webpackConfiguration)) {
                    webpackConfiguration = webpackConfiguration[0];
                }
                const config = webpackConfiguration;
                if (!(config === null || config === void 0 ? void 0 : config[WebpackConfigurationGenerator_1.IS_SPFX_WEBPACK_CONFIGURATION_SYMBOL])) {
                    const thisPackageJson = node_core_library_1.PackageJsonLookup.loadOwnPackageJson(__dirname);
                    scopedLogger.emitError(new Error('A SPFx webpack configuration must have already been generated. Has ' +
                        `${PluginNames_1.SpfxWebpackConfigurationPlugin} in ${thisPackageJson.name} been applied?`));
                }
                else {
                    const configJson = config[WebpackConfigurationGenerator_1.CONFIG_JSON_SYMBOL];
                    const legacyExternals = new LegacyExternals_1.LegacyExternals({
                        configJson: configJson,
                        terminal: scopedLogger.terminal,
                        selectedLocales: Array.from(taskSession.parameters.locales),
                        buildFolder: heftConfiguration.buildFolderPath,
                        serveMode: taskSession.parameters.watch && accessor.parameters.isServeMode,
                        production: taskSession.parameters.production
                    });
                    legacyExternals.updateWebpackConfiguration(config);
                }
                return config;
            });
        });
    }
}
exports.default = ThirdPartyExternalsPlugin;
//# sourceMappingURL=ThirdPartyExternalsPlugin.js.map