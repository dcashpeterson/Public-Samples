"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AadErrorHandler = void 0;
var tslib_1 = require("tslib");
var AadTokenProvider_1 = tslib_1.__importStar(require("./AadTokenProvider"));
var AadConstants_1 = tslib_1.__importDefault(require("./AadConstants"));
var sp_core_library_1 = require("@microsoft/sp-core-library");
var SPHttpBaseStrings_resx_1 = tslib_1.__importDefault(require("../SPHttpBaseStrings.resx"));
var AadErrorHandler = /** @class */ (function () {
    function AadErrorHandler() {
    }
    /**
     * This function will fire an event if the AAD error code can be resolved with a full page redirect.
     */
    AadErrorHandler._handleInteractionRequiredFailures = function (authContext, errorMessage, resource) {
        // Don't prompt for interaction if the end user cannot resolve this failure.
        if (!AadErrorHandler._doesAadErrorCodeExist(errorMessage, AadConstants_1.default.UNRESOLVABLE_AAD_ERROR_CODES)) {
            AadConstants_1.default.RESOLVABLE_ERROR_CODES.forEach(function (errorCode) {
                if (errorMessage.indexOf(errorCode) > -1) {
                    var urlNavigate = authContext._getNavigateUrl(authContext.RESPONSE_TYPE.TOKEN, resource) + '&prompt=select_account';
                    sp_core_library_1._SPEventManager.instance.raiseEvent(AadTokenProvider_1.default._tokenAcquisitionEventId, new AadTokenProvider_1.TokenAcquisitionEventArgs(SPHttpBaseStrings_resx_1.default.additionalCredentialsWarning, urlNavigate));
                }
            });
        }
    };
    /**
     * This function will fire an event if the AAD error code can be resolved with a full page redirect.
     */
    AadErrorHandler._isInteractionRequired = function (errorMessage, errorCode) {
        if (!AadErrorHandler._doesAadErrorCodeExist(errorMessage, AadConstants_1.default.UNRESOLVABLE_AAD_ERROR_CODES)) {
            return AadConstants_1.default.RESOLVABLE_ERROR_CODES.has(errorCode);
        }
        return false;
    };
    AadErrorHandler._isTokenRenewalTimeout = function (errorCode) {
        return errorCode === AadConstants_1.default.TOKEN_RENEWAL_TIMEOUT;
    };
    AadErrorHandler._isEndpointsResolutionError = function (errorCode) {
        return errorCode === AadConstants_1.default.ENDPOINTS_RESOLUTION_ERROR;
    };
    AadErrorHandler._isSessionDoesNotExistError = function (errorMessage, errorCode) {
        return (errorMessage.indexOf(AadConstants_1.default.SESSION_DOES_NOT_EXIST_ERROR) > -1 ||
            errorCode.indexOf(AadConstants_1.default.SESSION_DOES_NOT_EXIST_ERROR) > -1);
    };
    /**
     * Returns true if an AAD Error Code exists in the error message.
     */
    AadErrorHandler._doesAadErrorCodeExist = function (errorMessage, setOfErrorCodes) {
        // AAD error messages use the following pattern. 'ErrorCode: ErrorMessage'. AAD errors can have multiple
        // error codes.
        var errorCodes = errorMessage.match(/(AADSTS)[0-9]+/g) || [];
        for (var _i = 0, errorCodes_1 = errorCodes; _i < errorCodes_1.length; _i++) {
            var errorCode = errorCodes_1[_i];
            if (setOfErrorCodes.has(errorCode)) {
                return true;
            }
        }
        return false;
    };
    return AadErrorHandler;
}());
exports.AadErrorHandler = AadErrorHandler;
//# sourceMappingURL=AadErrorHandler.js.map