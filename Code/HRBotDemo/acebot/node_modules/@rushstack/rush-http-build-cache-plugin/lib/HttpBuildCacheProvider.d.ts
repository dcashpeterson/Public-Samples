/// <reference types="node" />
import { ITerminal } from '@rushstack/node-core-library';
import { ICloudBuildCacheProvider, RushSession } from '@rushstack/rush-sdk';
export interface IHttpBuildCacheTokenHandler {
    exec: string;
    args?: string[];
}
/**
 * @public
 */
export interface IHttpBuildCacheProviderOptions {
    url: string;
    tokenHandler?: IHttpBuildCacheTokenHandler;
    uploadMethod?: string;
    minHttpRetryDelayMs?: number;
    headers?: Record<string, string>;
    cacheKeyPrefix?: string;
    isCacheWriteAllowed: boolean;
    pluginName: string;
    rushProjectRoot: string;
}
export declare class HttpBuildCacheProvider implements ICloudBuildCacheProvider {
    private readonly _pluginName;
    private readonly _rushSession;
    private readonly _rushProjectRoot;
    private readonly _environmentCredential;
    private readonly _isCacheWriteAllowedByConfiguration;
    private readonly _url;
    private readonly _uploadMethod;
    private readonly _headers;
    private readonly _cacheKeyPrefix;
    private readonly _tokenHandler;
    private readonly _minHttpRetryDelayMs;
    private __credentialCacheId;
    get isCacheWriteAllowed(): boolean;
    constructor(options: IHttpBuildCacheProviderOptions, rushSession: RushSession);
    tryGetCacheEntryBufferByIdAsync(terminal: ITerminal, cacheId: string): Promise<Buffer | undefined>;
    trySetCacheEntryBufferAsync(terminal: ITerminal, cacheId: string, objectBuffer: Buffer): Promise<boolean>;
    updateCachedCredentialAsync(terminal: ITerminal, credential: string): Promise<void>;
    updateCachedCredentialInteractiveAsync(terminal: ITerminal): Promise<void>;
    deleteCachedCredentialsAsync(terminal: ITerminal): Promise<void>;
    private get _credentialCacheId();
    private _http;
    private _tryGetCredentials;
    private _tryGetCredentialsFromCache;
    private _getFailureType;
    private _reportFailure;
}
//# sourceMappingURL=HttpBuildCacheProvider.d.ts.map