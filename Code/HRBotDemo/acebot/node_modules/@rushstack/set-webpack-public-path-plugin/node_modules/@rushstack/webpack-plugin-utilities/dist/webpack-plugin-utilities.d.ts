/**
 * Utility package which provides a set of tools for working in
 * webpack plugins, loaders, and other integrations.
 * @packageDocumentation
 */

import type { Configuration } from 'webpack';
import { IFs } from 'memfs';
import type { MultiStats } from 'webpack';
import type { Stats } from 'webpack';
import type * as Webpack from 'webpack';

/**
 * @public
 * This function generates a webpack compiler with default configuration and the output filesystem mapped to
 * a memory filesystem. This is useful for testing webpack plugins/loaders where we do not need to write to disk (which can be costly).
 * @param entry - The entry point for the webpack compiler
 * @param additionalConfig - Any additional configuration that should be merged with the default configuration
 * @param memFs - The memory filesystem to use for the output filesystem. Use this option if you want to _inspect_, analyze, or read the output
 * files generated by the webpack compiler. If you do not need to do this, you can omit this parameter and the output files.
 *
 * @returns - A webpack compiler with the output filesystem mapped to a memory filesystem
 *
 * @example
 * ```typescript
 * import Testing from '@rushstack/webpack-plugin-utilities';
 *
 * describe('MyPlugin', () => {
 it('should run', async () => {
 const stats = await Testing.getTestingWebpackCompiler(
 `./src/index.ts`,
 );

 expect(stats).toBeDefined();
 });
 * });
 * ```
 *
 * @remarks
 * If you want to be able to read, analyze, access the files written to the memory filesystem,
 * you can pass in a memory filesystem instance to the `memFs` parameter.
 *
 * @example
 * ```typescript
 * import Testing from '@rushstack/webpack-plugin-utilities';
 * import { createFsFromVolume, Volume, IFs } from 'memfs';
 * import path from 'path';
 *
 * describe('MyPlugin', () => {
 *  it('should run', async () => {
 *    const virtualFileSystem: IFs = createFsFromVolume(new Volume());
 *    const stats = await Testing.getTestingWebpackCompiler(
 *      `./src/index.ts`,
 *      {},
 *      virtualFileSystem
 *    );
 *
 *    expect(stats).toBeDefined();
 *    expect(virtualFileSystem.existsSync(path.join(__dirname, 'dist', 'index.js'))).toBe(true);
 *  });
 * });
 * ```
 */
declare function getTestingWebpackCompilerAsync(entry: string, additionalConfig?: Configuration, memFs?: IFs): Promise<(Stats | MultiStats) | undefined>;

/**
 * We do not have quality API detection between webpack major versions 1-3.
 * We can detect the absence of hooks which was a version 3 feature.
 *
 * @public
 */
declare function isWebpack3OrEarlier(compiler: Webpack.Compiler): boolean;

/**
 * Detects whether or not we are using webpack 4
 *
 * @public
 */
declare function isWebpack4(compiler: Webpack.Compiler): boolean;

/**
 * Detects whether or not we are using webpack 5
 *
 * @public
 */
declare function isWebpack5(compiler: Webpack.Compiler): boolean;

declare namespace Testing {
    export {
        getTestingWebpackCompilerAsync
    }
}
export { Testing }

declare namespace VersionDetection {
    export {
        isWebpack3OrEarlier,
        isWebpack4,
        isWebpack5
    }
}
export { VersionDetection }

export { }
