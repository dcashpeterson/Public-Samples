{"version":3,"file":"readme.js","sourceRoot":"","sources":["../src/readme.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as path from 'path';\nimport * as fs from 'fs';\nimport type { TSESLint, TSESTree } from '@typescript-eslint/experimental-utils';\nimport { ESLintUtils } from '@typescript-eslint/experimental-utils';\n\nimport { PackletAnalyzer } from './PackletAnalyzer';\n\nexport type MessageIds = 'missing-readme' | 'error-reading-file' | 'readme-too-short';\ntype Options = [\n  {\n    minimumReadmeWords?: number;\n  }\n];\n\nconst readme: TSESLint.RuleModule<MessageIds, Options> = {\n  meta: {\n    type: 'problem',\n    messages: {\n      'missing-readme':\n        'The ESLint configuration requires each packlet to provide a README.md file summarizing' +\n        ' its purpose and usage: {{readmePath}}',\n      'readme-too-short':\n        'The ESLint configuration requires at least {{minimumReadmeWords}} words of documentation in the' +\n        ' README.md file: {{readmePath}}',\n      'error-reading-file': 'Error reading input file {{readmePath}}:\\n{{errorMessage}}'\n    },\n    schema: [\n      {\n        type: 'object',\n        properties: {\n          minimumReadmeWords: {\n            type: 'number'\n          }\n        },\n        additionalProperties: false\n      }\n    ],\n\n    docs: {\n      description: 'Require each packlet folder to have a README.md file summarizing its purpose and usage',\n      // Deprecated in ESLint v8; Keep for backwards compatibility\n      category: 'Best Practices',\n      // Too strict to be recommended in the default configuration\n      recommended: false,\n      url: 'https://www.npmjs.com/package/@rushstack/eslint-plugin-packlets'\n    } as TSESLint.RuleMetaDataDocs\n  },\n\n  create: (context: TSESLint.RuleContext<MessageIds, Options>) => {\n    const minimumReadmeWords: number = context.options[0]?.minimumReadmeWords || 10;\n\n    // Example: /path/to/my-project/src/packlets/my-packlet/index.ts\n    const inputFilePath: string = context.getFilename();\n\n    // Example: /path/to/my-project/tsconfig.json\n    const tsconfigFilePath: string | undefined = ESLintUtils.getParserServices(\n      context\n    ).program.getCompilerOptions()['configFilePath'] as string;\n\n    const packletAnalyzer: PackletAnalyzer = PackletAnalyzer.analyzeInputFile(\n      inputFilePath,\n      tsconfigFilePath\n    );\n\n    if (!packletAnalyzer.nothingToDo && !packletAnalyzer.error) {\n      if (packletAnalyzer.isEntryPoint) {\n        return {\n          Program: (node: TSESTree.Node): void => {\n            const readmePath: string = path.join(\n              packletAnalyzer.packletsFolderPath!,\n              packletAnalyzer.inputFilePackletName!,\n              'README.md'\n            );\n            try {\n              if (!fs.existsSync(readmePath)) {\n                context.report({\n                  node: node,\n                  messageId: 'missing-readme',\n                  data: { readmePath }\n                });\n              } else {\n                if (minimumReadmeWords > 0) {\n                  const readmeContent: string = fs.readFileSync(readmePath).toString();\n                  const words: string[] = readmeContent.split(/[^a-z'\"]+/i).filter((x) => x.length > 0);\n                  if (words.length < minimumReadmeWords) {\n                    context.report({\n                      node: node,\n                      messageId: 'readme-too-short',\n                      data: { readmePath, minimumReadmeWords }\n                    });\n                  }\n                }\n              }\n            } catch (error) {\n              context.report({\n                node: node,\n                messageId: 'error-reading-file',\n                data: { readmePath, errorMessage: (error as Error).toString() }\n              });\n            }\n          }\n        };\n      }\n    }\n\n    return {};\n  }\n};\n\nexport { readme };\n"]}