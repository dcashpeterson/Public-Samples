"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var sp_diagnostics_1 = require("@microsoft/sp-diagnostics");
var ms_graph_v3_bundle_1 = require("@ms/ms-graph-v3-bundle");
var sp_http_base_1 = require("@microsoft/sp-http-base");
var Killswitches_1 = require("./common/Killswitches");
var MSGraphAuthenticationProvider_1 = require("./MSGraphAuthenticationProvider");
/**
 * MSGraphClient is used to perform REST calls against Microsoft Graph.
 *
 * @remarks The Microsoft Graph JavaScript client library is a lightweight wrapper around the
 * Microsoft Graph API. This class allows developers to start making REST calls to MSGraph without
 * needing to initialize the the MSGraph client library. If a custom configuration is desired,
 * the MSGraphClient api function needs to be provided with that custom configuration for
 * every request.
 *
 * For more information: {@link https://github.com/microsoftgraph/msgraph-sdk-javascript}
 *
 * @public
 */
var MSGraphClientV3 = /** @class */ (function () {
    /**
     * @param serviceScope - Provides services for the MSGraphClient to consume.
     *
     * @internal
     */
    function MSGraphClientV3(serviceScope, options, clientOptions, internalClient) {
        var _this = this;
        this._isInternal = false;
        serviceScope.whenFinished(function () {
            if (!MSGraphClientV3._graphBaseUrl) {
                MSGraphClientV3._graphBaseUrl = serviceScope
                    .consume(sp_http_base_1._GraphHttpClientContext.serviceKey)
                    .getGraphEndpointUrl();
            }
            //
            // TODO: when graduating the isUseSeparateInternalInstanceKSActivated it should become:
            // if (internalClient) {
            //   if (!MSGraphClientV3._internalInstance) {
            //     MSGraphClientV3._internalInstance = this._createInternalGraphClientInstance(
            //       _AadTokenProviders.configurable as AadTokenProvider,
            //       options
            //     );
            //   }
            // }
            // else if (!MSGraphClientV3._instance) {
            //   if (clientOptions !== undefined) {
            //     MSGraphClientV3._instance = this._createGraphClientInstanceWithMiddleware(
            //       _AadTokenProviders.configurable,
            //       clientOptions
            //     );
            //   } else {
            //     MSGraphClientV3._instance = this._createGraphClientInstance(
            //       _AadTokenProviders.configurable,
            //       options
            //     );
            //   }
            // }
            //
            if (internalClient) {
                _this._isInternal = true;
                if (!(0, Killswitches_1.isUseSeparateInternalInstanceKSActivated)() && !MSGraphClientV3._internalInstance) {
                    MSGraphClientV3._internalInstance = _this._createInternalGraphClientInstance(sp_http_base_1._AadTokenProviders.configurable, options);
                }
                else if ((0, Killswitches_1.isUseSeparateInternalInstanceKSActivated)() && !MSGraphClientV3._instance) {
                    MSGraphClientV3._instance = _this._createInternalGraphClientInstance(sp_http_base_1._AadTokenProviders.configurable, options);
                }
            }
            else if (!MSGraphClientV3._instance) {
                if (clientOptions !== undefined) {
                    MSGraphClientV3._instance = _this._createGraphClientInstanceWithMiddleware(sp_http_base_1._AadTokenProviders.configurable, clientOptions);
                }
                else {
                    MSGraphClientV3._instance = _this._createGraphClientInstance(sp_http_base_1._AadTokenProviders.configurable, options);
                }
            }
        });
    }
    /**
     * All calls to Microsoft Graph are chained together starting with the api function.
     *
     * @remarks Path supports the following formats:
     * * me
     * * /me
     * * https://graph.microsoft.com/v1.0/me
     * * https://graph.microsoft.com/beta/me
     * * me/events?$filter=startswith(subject, 'ship')
     *
     * The authProvider and baseUrl option should not be used, as they have already been
     * provided by the framework. See the official documentation here:
     * https://github.com/microsoftgraph/msgraph-sdk-javascript
     *
     * @param path - The path for the request to MSGraph.
     */
    MSGraphClientV3.prototype.api = function (path) {
        sp_core_library_1.Validate.isNonemptyString(path, 'path');
        if (!(0, Killswitches_1.isUseSeparateInternalInstanceKSActivated)() && this._isInternal) {
            return MSGraphClientV3._internalInstance.api(path);
        }
        return MSGraphClientV3._instance.api(path);
    };
    Object.defineProperty(MSGraphClientV3.prototype, "client", {
        /**
         * Gets the instance of the instantiated Client object from Microsoft Graph SDK.
         */
        get: function () {
            if (!(0, Killswitches_1.isUseSeparateInternalInstanceKSActivated)() && this._isInternal) {
                return MSGraphClientV3._internalInstance;
            }
            return MSGraphClientV3._instance;
        },
        enumerable: false,
        configurable: true
    });
    MSGraphClientV3.prototype._createGraphClientInstance = function (tokenProvider, options) {
        var _this = this;
        var qosMonitor = new sp_diagnostics_1._QosMonitor('MSGraphClientV3.CreateGraphClientInstance');
        var graphClient;
        if ((0, Killswitches_1.isUseAuthProviderClassInDefaultInitKSActivated)()) {
            graphClient = ms_graph_v3_bundle_1.Client.init(tslib_1.__assign({ authProvider: function (done) {
                    _this._getOAuthToken(tokenProvider)
                        .then(function (token) {
                        done(undefined /** error object */, token);
                        qosMonitor.writeSuccess();
                    })
                        .catch(function (e) {
                        // The functions will return a rejected promise if it fails to get an OAuth2Token.
                        done(e, '');
                        qosMonitor.writeExpectedFailure(e.message);
                    });
                }, baseUrl: MSGraphClientV3._graphBaseUrl }, options // with this, the user can override the baseUrl and authProvider too
            ));
        }
        else {
            try {
                graphClient = this._createClientInstance(tslib_1.__assign(tslib_1.__assign({}, options), { authProvider: undefined }), tokenProvider, false);
            }
            catch (e) {
                qosMonitor.writeUnexpectedFailure(e.message, e);
                throw e;
            }
        }
        return graphClient;
    };
    MSGraphClientV3.prototype._createGraphClientInstanceWithMiddleware = function (tokenProvider, options) {
        var _this = this;
        var qosMonitor = new sp_diagnostics_1._QosMonitor('MSGraphClientV3.CreateGraphClientInstanceWithMiddleware');
        var graphClient;
        try {
            if ((0, Killswitches_1.isUseAuthProviderAsMiddlewareKSActivated)()) {
                graphClient = ms_graph_v3_bundle_1.Client.initWithMiddleware(tslib_1.__assign({ authProvider: {
                        getAccessToken: function (authenticationProviderOptions) {
                            return _this._getOAuthToken(tokenProvider);
                        }
                    }, baseUrl: MSGraphClientV3._graphBaseUrl }, options // with this, the user can override the baseUrl and authProvider too
                ));
            }
            else {
                graphClient = this._createClientInstance(options, tokenProvider, false);
            }
            qosMonitor.writeSuccess();
            return graphClient;
        }
        catch (e) {
            qosMonitor.writeUnexpectedFailure(e.message, e);
            throw e;
        }
    };
    MSGraphClientV3.prototype._createInternalGraphClientInstance = function (tokenProvider, options) {
        var _this = this;
        var qosMonitor = new sp_diagnostics_1._QosMonitor('MSGraphClientV3.CreateInternalGraphClientInstance');
        var graphClient;
        if ((0, Killswitches_1.isUseAuthProviderClassInDefaultInitKSActivated)()) {
            graphClient = ms_graph_v3_bundle_1.Client.init(tslib_1.__assign({ authProvider: function (done) {
                    _this._getInternalToken(tokenProvider)
                        .then(function (token) {
                        done(undefined /** error object */, token);
                        qosMonitor.writeSuccess();
                    })
                        .catch(function (e) {
                        // The functions will return a rejected promise if it fails to get an OAuth2Token.
                        done(e, '');
                        qosMonitor.writeExpectedFailure(e.message);
                    });
                }, baseUrl: MSGraphClientV3._graphBaseUrl }, options // with this, the user can override the baseUrl and authProvider too
            ));
        }
        else {
            try {
                graphClient = this._createClientInstance(tslib_1.__assign(tslib_1.__assign({}, options), { authProvider: undefined }), tokenProvider, true);
            }
            catch (e) {
                qosMonitor.writeUnexpectedFailure(e.message, e);
                throw e;
            }
        }
        return graphClient;
    };
    MSGraphClientV3.prototype._createClientInstance = function (options, tokenProvider, isInternal) {
        var clientOptions = options || {};
        clientOptions.baseUrl = MSGraphClientV3._graphBaseUrl;
        var middlewareChain;
        if (!clientOptions.middleware) {
            // creating default chain
            middlewareChain = ms_graph_v3_bundle_1.MiddlewareFactory.getDefaultMiddlewareChain(new MSGraphAuthenticationProvider_1.MSGraphAuthenticationProvider(tokenProvider, MSGraphClientV3._graphBaseUrl, isInternal));
        }
        else {
            // a developer has provided middleware(s)
            var authMiddleware = new ms_graph_v3_bundle_1.AuthenticationHandler(new MSGraphAuthenticationProvider_1.MSGraphAuthenticationProvider(tokenProvider, MSGraphClientV3._graphBaseUrl, isInternal));
            middlewareChain = [authMiddleware];
            if (Array.isArray(clientOptions.middleware)) {
                middlewareChain.push.apply(middlewareChain, clientOptions.middleware);
            }
            else {
                middlewareChain.push(clientOptions.middleware);
            }
        }
        // we can add more middleware to the end of the chain here
        clientOptions.middleware = middlewareChain;
        return ms_graph_v3_bundle_1.Client.initWithMiddleware(clientOptions);
    };
    MSGraphClientV3.prototype._getOAuthToken = function (tokenProvider) {
        var qosMonitor = new sp_diagnostics_1._QosMonitor('MSGraphClient.FetchGraphToken');
        return tokenProvider
            .getToken(MSGraphClientV3._graphBaseUrl)
            .then(function (response) {
            qosMonitor.writeSuccess();
            return response;
        })
            .catch(function (error) {
            qosMonitor.writeUnexpectedFailure(error.message, error);
            throw error;
        });
    };
    MSGraphClientV3.prototype._getInternalToken = function (tokenProvider) {
        var qosMonitor = new sp_diagnostics_1._QosMonitor('MSGraphClient.FetchInternalGraphToken');
        return tokenProvider
            ._getTokenInternal(MSGraphClientV3._graphBaseUrl, sp_http_base_1._AadTokenProviders.preAuthorizedConfiguration)
            .then(function (response) {
            qosMonitor.writeSuccess();
            return response;
        })
            .catch(function (error) {
            qosMonitor.writeUnexpectedFailure(error.message, error);
            throw error;
        });
    };
    return MSGraphClientV3;
}());
exports.default = MSGraphClientV3;
//# sourceMappingURL=MSGraphClientV3.js.map