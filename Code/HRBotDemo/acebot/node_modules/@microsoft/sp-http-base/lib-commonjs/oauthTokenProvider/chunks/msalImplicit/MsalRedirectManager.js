"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsalRedirectManager = void 0;
var AadKillSwitches_1 = require("../../AadKillSwitches");
/**
 * This class is used to manage session storage states needed for redirects when using MSAL.js.
 *
 * Each MSAL.js client, v1 or v2, should create an instance of MsalRedirectManager and:
 *  - Check the result of isAllowedToRedirect() to see if you are allowed to redirect.
 *  - Call prepareForRedirect() before redirecting.
 *  - Call cancelRedirect() if the redirect will be cancelled and prepareRedirect() has already been called.
 * Note that a maximum of 13 redirect attempts may be tried in 1 minute.
 *
 * The session storage information written by this class is expected by spfxsinglesignon.aspx.
 * Any changes to keys or behaviour here should be accompanied with changes to spfxsinglesignon.aspx.
 *
 * @internal
 */
var MsalRedirectManager = /** @class */ (function () {
    /**
     * Creates an MsalRedirectManager to manage the necessary state for redirects.
     *
     * @param authority - The authority string to be used on spfxsinglesignon.aspx when instantiating msal.
     * @param clientId - The client id string to be used on spfxsignlesignon.aspx when instantiating msal.
     * @param shouldUseMsalBrowser - Whether or not spfxsinglesignon.aspx should use msal-browser.
     */
    function MsalRedirectManager(authority, clientId, shouldUseMsalBrowser) {
        this._STORAGE_KEYS = {
            AUTHORITY: 'spfx.msal.authority',
            CLIENT_ID: 'spfx.msal.clientId',
            CURRENT_REDIRECT_ATTEMPT: 'spfx.msal.redirectAttemptNumber',
            FIRST_REDIRECT_TIME: 'spfx.msal.firstRedirectTime',
            IS_REDIRECT_IN_PROGRESS: 'spfx.msal.isRedirectInProgress',
            IS_SSO_SILENT: 'spfx.msal.isSsoSillent',
            REDIRECTED_FROM: 'spfx.msal.redirectedFrom',
            SHOULD_USE_MSAL_BROWSER: 'spfx.msal.shouldUseMsalBrowser'
        };
        this._authority = authority;
        this._clientId = clientId;
        this._shouldUseMsalBrowser = shouldUseMsalBrowser;
    }
    /**
     * Determines if the caller may attempt a redirect and invoke prepareForRedirect(). Redirects can
     * be attempted if:
     *  - There have not been more than ALLOWED_REDIRECT_ATTEMPTS in the last 60 seconds.
     *  - There is no redirect currently in progress.
     *
     * @returns True if the caller can call prepareForRedirect().
     */
    MsalRedirectManager.prototype.isAllowedToRedirect = function () {
        return this.hasRedirectAttemptsLeft() && !this.isRedirectInProgress();
    };
    /**
     * This method determines whether or not there are any redirect attempts left.
     * There can be a maximum of ALLOWED_REDIRECT_ATTEMPTS in 60 seconds.
     *
     * @returns True if thre are any redirect attempts left.
     */
    MsalRedirectManager.prototype.hasRedirectAttemptsLeft = function () {
        return this.getCurrentNumberOfRedirectAttempts() < MsalRedirectManager._ALLOWED_REDIRECT_ATTEMPTS;
    };
    /**
     * Determines whether or not a redirect is already in progress. The caller should not attempt
     * to redirect if there is a redirect in progress.
     *
     * @returns True if there is currently a redirect in progress.
     */
    MsalRedirectManager.prototype.isRedirectInProgress = function () {
        var isRedirectInProgressSet = window.sessionStorage.getItem(this._STORAGE_KEYS.IS_REDIRECT_IN_PROGRESS) === 'true';
        var isRedirectAttemptInLastMinute = this.getCurrentNumberOfRedirectAttempts() > 0;
        return isRedirectAttemptInLastMinute && isRedirectInProgressSet;
    };
    /**
     * Should be called before attempting to redirect. This method prepares the browser for a redirect by
     * saving necessary state data in session storage.
     *
     * The items saved are:
     *  - authority: Used to configure MSAL on spfxsinglesignon.aspx
     *  - clientId: Used to configure MSAL on spfxsinglesignon.aspx
     *  - redirectUri: Used to determine where to redirect back to on spfxsinglesignon.aspx
     *  - shouldUseMsalBrowser: Used to determine whether to instantiate MSAL.js v1 or v2 on
     *                          spfxsinglesignon.aspx
     *  - isRedirectInProgress: Indicates whether or not a redirect is in progress for either MSAL.js v1 or v2.
     *                          We will not proceed with a redirect if one is in progress.
     *  - isSsoSilent: Used to determine whether or not to instantiate MSAL.js on spfxsinglesignon.aspx.
     *                 This is different than shouldUseMsalBrowser as no instances of MSAL.js v1 or v2 are
     *                 created.
     *
     * These items are deleted from session storage on spfxsinglesignon.aspx before returning to the current
     * page.
     *
     * This method also updates the first redirect time and current redirect attempt count in session storage.
     */
    MsalRedirectManager.prototype.prepareForRedirect = function () {
        window.sessionStorage.setItem(this._STORAGE_KEYS.IS_REDIRECT_IN_PROGRESS, 'true');
        this._incrementRedirectAttempts();
        window.sessionStorage.setItem(this._STORAGE_KEYS.AUTHORITY, this._authority);
        window.sessionStorage.setItem(this._STORAGE_KEYS.CLIENT_ID, this._clientId);
        window.sessionStorage.setItem(this._STORAGE_KEYS.REDIRECTED_FROM, window.location.href);
        this._setIsSsoSilent(false);
        window.sessionStorage.setItem(this._STORAGE_KEYS.SHOULD_USE_MSAL_BROWSER, this._shouldUseMsalBrowser.toString());
    };
    /**
     * Should be called to cancel a redirect after prepareForRedirect() has already been called.
     * This method clears all the states saved by prepareForRedirect().
     */
    MsalRedirectManager.prototype.cancelRedirect = function () {
        window.sessionStorage.removeItem(this._STORAGE_KEYS.AUTHORITY);
        window.sessionStorage.removeItem(this._STORAGE_KEYS.CLIENT_ID);
        window.sessionStorage.removeItem(this._STORAGE_KEYS.REDIRECTED_FROM);
        window.sessionStorage.removeItem(this._STORAGE_KEYS.SHOULD_USE_MSAL_BROWSER);
        window.sessionStorage.removeItem(this._STORAGE_KEYS.IS_REDIRECT_IN_PROGRESS);
    };
    /**
     * Should be called before attempting to ssoSilent. This method prepares the browser for an ssoSilent by
     * saving necessary state data in session storage.
     */
    MsalRedirectManager.prototype.prepareForSsoSilent = function () {
        this._setIsSsoSilent(true);
        this._setShouldUseMsalBrowser(true);
        window.sessionStorage.setItem(this._STORAGE_KEYS.AUTHORITY, this._authority);
        window.sessionStorage.setItem(this._STORAGE_KEYS.CLIENT_ID, this._clientId);
    };
    /**
     * Should be called once an ssoSilent attempt is complete. This resets necessary state.
     */
    MsalRedirectManager.prototype.completeSsoSilent = function () {
        this._setIsSsoSilent(false);
    };
    /**
     * Determines the number of redirect attempts in the last 2 minutes using storage states.
     *
     * @returns The number of redirects in the 2 minutes.
     */
    MsalRedirectManager.prototype.getCurrentNumberOfRedirectAttempts = function () {
        var numberOfRedirectAttempts = 0;
        var oneMinInMs = 60 * 1000;
        var maxRedirectTimeInMs;
        if (!(0, AadKillSwitches_1.isMsalTwoMinuteMaxRedirectKsActivated)()) {
            maxRedirectTimeInMs = MsalRedirectManager._MAX_REDIRECT_TIME_IN_MIN * oneMinInMs;
        }
        else {
            maxRedirectTimeInMs = oneMinInMs;
        }
        var firstRedirectTime = this._getFirstRedirectTimeFromSessionStorage();
        if (firstRedirectTime) {
            var now = new Date();
            var firstRedirectDate = new Date(firstRedirectTime);
            var hasTimeSpanNotExpired = now.getTime() - firstRedirectDate.getTime() < maxRedirectTimeInMs;
            if (hasTimeSpanNotExpired) {
                numberOfRedirectAttempts = this._getRedirectAttemptNumberFromSessionStorage();
            }
        }
        return numberOfRedirectAttempts;
    };
    /**
     * Increments the number of redirect attempts in session storage. If this is the first redirect attempt,
     * this method will also write to the first redirect key.
     */
    MsalRedirectManager.prototype._incrementRedirectAttempts = function () {
        var currentRedirectAttempt = this.getCurrentNumberOfRedirectAttempts() + 1;
        var isFirstRedirectAttempt = currentRedirectAttempt === 1;
        if (isFirstRedirectAttempt) {
            this._setFirstRedirectTimeInSessionStorage();
        }
        this._setRedirectAttemptNumberInSessionStorage(currentRedirectAttempt);
    };
    /**
     * This method gets the current number of previous redirect attempts saved in session storage.
     * This does not account for how old the previous redirect attempts are.
     *
     * @returns The current number of previous redirect attempts saved in session storage.
     */
    MsalRedirectManager.prototype._getRedirectAttemptNumberFromSessionStorage = function () {
        var attemptCountString = window.sessionStorage.getItem(this._STORAGE_KEYS.CURRENT_REDIRECT_ATTEMPT) || '0';
        var attemptCount = parseInt(attemptCountString, 10);
        return attemptCount;
    };
    /**
     * Given an attempt number, this method will update the current redirect attempt number in session storage.
     * The number is saved as a string.
     *
     * @param attempt - Current attempt number to write to session storage.
     */
    MsalRedirectManager.prototype._setRedirectAttemptNumberInSessionStorage = function (attempt) {
        window.sessionStorage.setItem(this._STORAGE_KEYS.CURRENT_REDIRECT_ATTEMPT, attempt.toString());
    };
    /**
     * Returns the first time a redirect was attempted as a date string. This string can be used in the
     * constructor of a Date object, but only if it is not null.
     *
     * @returns The first attempted redirect time or null if the key is not found.
     */
    MsalRedirectManager.prototype._getFirstRedirectTimeFromSessionStorage = function () {
        return window.sessionStorage.getItem(this._STORAGE_KEYS.FIRST_REDIRECT_TIME);
    };
    /**
     * Creates a date object capturing the current time and saves it to session storage as the first redirect
     * time.
     */
    MsalRedirectManager.prototype._setFirstRedirectTimeInSessionStorage = function () {
        var currentDate = new Date();
        window.sessionStorage.setItem(this._STORAGE_KEYS.FIRST_REDIRECT_TIME, currentDate.toString());
    };
    /**
     * Sets the isSsoSilent flag in the session storage to the given boolean input.
     */
    MsalRedirectManager.prototype._setIsSsoSilent = function (isSsoSillent) {
        window.sessionStorage.setItem(this._STORAGE_KEYS.IS_SSO_SILENT, isSsoSillent.toString());
    };
    /**
     * Sets the shouldUseMsalBrowser flag in the session storage to the given boolean input.
     */
    MsalRedirectManager.prototype._setShouldUseMsalBrowser = function (shouldUseMsalBrowser) {
        window.sessionStorage.setItem(this._STORAGE_KEYS.SHOULD_USE_MSAL_BROWSER, shouldUseMsalBrowser.toString());
    };
    MsalRedirectManager._ALLOWED_REDIRECT_ATTEMPTS = 13;
    MsalRedirectManager._MAX_REDIRECT_TIME_IN_MIN = 2;
    return MsalRedirectManager;
}());
exports.MsalRedirectManager = MsalRedirectManager;
//# sourceMappingURL=MsalRedirectManager.js.map