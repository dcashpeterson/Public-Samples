/// <reference types="node" />
import type * as webpack from 'webpack';
import { type ILocalization } from '@microsoft/spfx-heft-plugins';
import type { WebpackTask } from '@microsoft/gulp-core-build-webpack';
import { OdspGulpTask } from '../OdspGulpTask';
export interface IConfigureWebpackTaskConfig {
    webpack?: WebpackTask;
    libraryName?: string;
    libraryTarget?: 'amd' | 'var' | 'this' | 'commonjs' | 'commonjs2' | 'umd' | 'window' | 'assign' | 'jsonp';
    /**
     * An optional callback can be provided that allows the generated webpack configuration to be modified.
     */
    additionalConfiguration?: (generatedConfig: webpack.Configuration) => webpack.Configuration;
    /**
     * An optional list of linked externals to include. For example, if you want to bundle react, list "react" in this
     * array. This is only designed to be used in very special cases and is not intended to be used regularly.
     */
    linkedExternalsToBundle?: string[];
    /**
     * Optionally only build a specified locale (in addition to the default locale and the pseudolocales)
     */
    singleLocale?: string;
    /**
     * Optionally get an instance of the Localization package
     *
     * @internal
     */
    getLocalization?: () => ILocalization;
    /**
     * If set to true, don't inject the async component loading code if components are only used in async chunks
     *
     * @internal
     */
    disableAsyncComponentLoading?: boolean;
    /**
     * If set to true, drop release assets in an "assets-versioned" folder instead of "assets".
     */
    assetsAreVersioned?: boolean;
    useLegacyExternals?: boolean;
    /**
     * @internal
     */
    loadThemedStylesImportPath?: string;
    /**
     * @internal
     */
    generateCssClassName?: (existingClassName: string, cssFilename: string, cssContent: string | Buffer) => string;
    /**
     * @internal
     */
    releaseManifestFolderName?: string;
}
export declare const FILE_LOADER_EXTENSIONS: string[];
/**
 * Configures the \@microsoft/gulp-core-build-webpack task with some smart defaults based on the package configuration.
 */
export declare class ConfigureWebpackTask extends OdspGulpTask<IConfigureWebpackTaskConfig> {
    constructor();
    loadSchema(): object;
    setConfig(config: IConfigureWebpackTaskConfig): void;
    executeTask(): Promise<void>;
    private _setWebpackConfig;
    private _getConfigJson;
}
//# sourceMappingURL=ConfigureWebpackTask.d.ts.map