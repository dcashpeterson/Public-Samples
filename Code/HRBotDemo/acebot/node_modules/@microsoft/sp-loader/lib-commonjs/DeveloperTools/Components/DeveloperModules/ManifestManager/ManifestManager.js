"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = tslib_1.__importStar(require("react"));
var DetailsList_1 = require("@fluentui/react/lib/DetailsList");
var ManifestStore_1 = tslib_1.__importDefault(require("../../../../stores/ManifestStore"));
var normalizeComponentId_1 = tslib_1.__importDefault(require("../../../../utilities/normalizeComponentId"));
var ManifestDetails_1 = tslib_1.__importDefault(require("./ManifestDetails/ManifestDetails"));
var ManifestManager_module_scss_1 = tslib_1.__importDefault(require("./ManifestManager.module.scss"));
var ManifestManager_resx_1 = tslib_1.__importDefault(require("./ManifestManager.resx"));
var ManifestManager = /** @class */ (function (_super) {
    tslib_1.__extends(ManifestManager, _super);
    function ManifestManager(props) {
        var _this = _super.call(this, props) || this;
        _this._selection = new DetailsList_1.Selection({
            getKey: function (item) { return item.id; },
            onSelectionChanged: function () {
                var selectedModule = _this._selection.getSelection()[0];
                if (!selectedModule) {
                    ManifestManager._selectedManifestId = undefined;
                }
                else {
                    ManifestManager._selectedManifestId = (0, normalizeComponentId_1.default)(selectedModule.id, selectedModule.version);
                }
                _this.setState(_this._getUpdatedState());
            }
        });
        _this.state = _this._getUpdatedState();
        return _this;
    }
    ManifestManager.prototype.render = function () {
        var selectedManifest = this.state.selectedManifest;
        var manifestDetailsBox = selectedManifest ? (React.createElement(ManifestDetails_1.default, { manifest: selectedManifest })) : (React.createElement("div", { className: ManifestManager_module_scss_1.default.noManifestSelectedContainer },
            React.createElement("div", null, ManifestManager_resx_1.default.noManifestSelected)));
        var columns = [
            {
                key: 'alias',
                name: 'alias',
                fieldName: 'alias',
                minWidth: 100,
                maxWidth: 150,
                onRender: function (item) { return React.createElement("span", null, (item.debugManifest || item.manifest).alias); }
            },
            {
                key: 'id',
                name: 'id',
                fieldName: 'id',
                minWidth: 300,
                maxWidth: 300
            }
        ];
        return (React.createElement("div", { className: ManifestManager_module_scss_1.default.container },
            React.createElement("div", { className: ManifestManager_module_scss_1.default.manifestListContainer },
                React.createElement(DetailsList_1.DetailsList, { items: this.state.manifests, columns: columns, isHeaderVisible: false, selectionMode: DetailsList_1.SelectionMode.single, selection: this._selection, setKey: 'set', constrainMode: DetailsList_1.ConstrainMode.unconstrained })),
            React.createElement("div", { className: ManifestManager_module_scss_1.default.manifestDetailsContainer }, manifestDetailsBox)));
    };
    ManifestManager.prototype._getUpdatedState = function () {
        var manifestMap = ManifestStore_1.default.instance._getManifestMap();
        var manifests = [];
        manifestMap.forEach(function (entry) { return manifests.push(entry); });
        return {
            manifests: manifests,
            selectedManifest: ManifestManager._selectedManifestId
                ? manifestMap.get(ManifestManager._selectedManifestId)
                : undefined
        };
    };
    ManifestManager._selectedManifestId = undefined;
    return ManifestManager;
}(React.Component));
exports.default = ManifestManager;
//# sourceMappingURL=ManifestManager.js.map