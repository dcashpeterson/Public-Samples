{"version":3,"file":"getRepoState.js","sourceRoot":"","sources":["../src/getRepoState.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport type * as child_process from 'child_process';\nimport { once } from 'events';\nimport { Readable } from 'stream';\n\nimport { Executable, FileSystem, type IExecutableSpawnOptions } from '@rushstack/node-core-library';\n\nexport interface IGitVersion {\n  major: number;\n  minor: number;\n  patch: number;\n}\n\nconst MINIMUM_GIT_VERSION: IGitVersion = {\n  major: 2,\n  minor: 20,\n  patch: 0\n};\n\nconst STANDARD_GIT_OPTIONS: readonly string[] = [\n  // Don't request any optional file locks\n  '--no-optional-locks',\n  // Ensure that commands don't run automatic maintenance, since performance of the command itself is paramount\n  '-c',\n  'maintenance.auto=false'\n];\n\ninterface IGitTreeState {\n  files: Map<string, string>; // type \"blob\"\n  submodules: Map<string, string>; // type \"commit\"\n}\n\n/**\n * Parses the output of the \"git ls-tree -r -z\" command\n * @internal\n */\nexport function parseGitLsTree(output: string): IGitTreeState {\n  const files: Map<string, string> = new Map();\n  const submodules: Map<string, string> = new Map();\n\n  // Parse the output\n  // With the -z modifier, paths are delimited by nulls\n  // A line looks like:\n  // <mode> <type> <newhash>\\t<path>\\0\n  // 100644 blob a300ccb0b36bd2c85ef18e3c619a2c747f95959e\\ttools/prettier-git/prettier-git.js\\0\n\n  let last: number = 0;\n  let index: number = output.indexOf('\\0', last);\n  while (index >= 0) {\n    const item: string = output.slice(last, index);\n\n    const tabIndex: number = item.indexOf('\\t');\n    const filePath: string = item.slice(tabIndex + 1);\n\n    // The newHash will be all zeros if the file is deleted, or a hash if it exists\n    const hash: string = item.slice(tabIndex - 40, tabIndex);\n\n    const spaceIndex: number = item.lastIndexOf(' ', tabIndex - 42);\n\n    const type: string = item.slice(spaceIndex + 1, tabIndex - 41);\n\n    switch (type) {\n      case 'commit': {\n        submodules.set(filePath, hash);\n        break;\n      }\n      case 'blob':\n      default: {\n        files.set(filePath, hash);\n        break;\n      }\n    }\n\n    last = index + 1;\n    index = output.indexOf('\\0', last);\n  }\n\n  return {\n    files,\n    submodules\n  };\n}\n\n/**\n * Parses the output of `git hash-object`\n * yields [filePath, hash] pairs.\n * @internal\n */\nexport function* parseGitHashObject(\n  output: string,\n  filePaths: ReadonlyArray<string>\n): IterableIterator<[string, string]> {\n  const expected: number = filePaths.length;\n  if (expected === 0) {\n    return;\n  }\n\n  output = output.trim();\n\n  let last: number = 0;\n  let i: number = 0;\n  let index: number = output.indexOf('\\n', last);\n  for (; i < expected && index > 0; i++) {\n    const hash: string = output.slice(last, index);\n    yield [filePaths[i], hash];\n    last = index + 1;\n    index = output.indexOf('\\n', last);\n  }\n\n  // Handle last line. Will be non-empty to due trim() call.\n  if (index < 0) {\n    const hash: string = output.slice(last);\n    yield [filePaths[i], hash];\n    i++;\n  }\n\n  if (i !== expected) {\n    throw new Error(`Expected ${expected} hashes from \"git hash-object\" but received ${i}`);\n  }\n}\n\n/**\n * Information about the changes to a file.\n * @beta\n */\nexport interface IFileDiffStatus {\n  mode: string;\n  oldhash: string;\n  newhash: string;\n  status: 'A' | 'D' | 'M';\n}\n\n/**\n * Parses the output of `git diff-index --color=never --no-renames --no-commit-id -z <REVISION> --\n * Returns a map of file path to diff\n * @internal\n */\nexport function parseGitDiffIndex(output: string): Map<string, IFileDiffStatus> {\n  const result: Map<string, IFileDiffStatus> = new Map();\n\n  // Parse the output\n  // With the -z modifier, paths are delimited by nulls\n  // A line looks like:\n  // :<oldmode> <newmode> <oldhash> <newhash> <status>\\0<path>\\0\n  // :100644 100644 a300ccb0b36bd2c85ef18e3c619a2c747f95959e 0000000000000000000000000000000000000000 M\\0tools/prettier-git/prettier-git.js\\0\n\n  let last: number = 0;\n  let index: number = output.indexOf('\\0', last);\n  while (index >= 0) {\n    const header: string = output.slice(last, index);\n    const status: IFileDiffStatus['status'] = header.slice(-1) as IFileDiffStatus['status'];\n\n    last = index + 1;\n    index = output.indexOf('\\0', last);\n    const filePath: string = output.slice(last, index);\n\n    // We passed --no-renames above, so a rename will be a delete of the old location and an add at the new.\n    // The newHash will be all zeros if the file is deleted, or a hash if it exists\n    const mode: string = header.slice(8, 14);\n    const oldhash: string = header.slice(-83, -43);\n    const newhash: string = header.slice(-42, -2);\n    result.set(filePath, {\n      mode,\n      oldhash,\n      newhash,\n      status\n    });\n\n    last = index + 1;\n    index = output.indexOf('\\0', last);\n  }\n\n  return result;\n}\n\n/**\n * Parses the output of `git status -z -u` to extract the set of files that have changed since HEAD.\n *\n * @param output - The raw output from Git\n * @returns a map of file path to if it exists\n * @internal\n */\nexport function parseGitStatus(output: string): Map<string, boolean> {\n  const result: Map<string, boolean> = new Map();\n\n  // Parse the output\n  // With the -z modifier, paths are delimited by nulls\n  // A line looks like:\n  // XY <path>\\0\n  //  M tools/prettier-git/prettier-git.js\\0\n\n  let startOfLine: number = 0;\n  let eolIndex: number = output.indexOf('\\0', startOfLine);\n  while (eolIndex >= 0) {\n    // We passed --no-renames above, so a rename will be a delete of the old location and an add at the new.\n    // charAt(startOfLine) is the index status, charAt(startOfLine + 1) is the working tree status\n    const workingTreeStatus: string = output.charAt(startOfLine + 1);\n    // Deleted in working tree, or not modified in working tree and deleted in index\n    const deleted: boolean =\n      workingTreeStatus === 'D' || (workingTreeStatus === ' ' && output.charAt(startOfLine) === 'D');\n\n    const filePath: string = output.slice(startOfLine + 3, eolIndex);\n    result.set(filePath, !deleted);\n\n    startOfLine = eolIndex + 1;\n    eolIndex = output.indexOf('\\0', startOfLine);\n  }\n\n  return result;\n}\n\nconst repoRootCache: Map<string, string> = new Map();\n\n/**\n * Finds the root of the current Git repository\n *\n * @param currentWorkingDirectory - The working directory for which to locate the repository\n * @param gitPath - The path to the Git executable\n *\n * @returns The full path to the root directory of the Git repository\n * @beta\n */\nexport function getRepoRoot(currentWorkingDirectory: string, gitPath?: string): string {\n  let cachedResult: string | undefined = repoRootCache.get(currentWorkingDirectory);\n  if (!cachedResult) {\n    const result: child_process.SpawnSyncReturns<string> = Executable.spawnSync(\n      gitPath || 'git',\n      ['--no-optional-locks', 'rev-parse', '--show-toplevel'],\n      {\n        currentWorkingDirectory\n      }\n    );\n\n    if (result.status !== 0) {\n      ensureGitMinimumVersion(gitPath);\n\n      throw new Error(`git rev-parse exited with status ${result.status}: ${result.stderr}`);\n    }\n\n    cachedResult = result.stdout.trim();\n\n    repoRootCache.set(currentWorkingDirectory, cachedResult);\n    // To ensure that calling getRepoRoot on the result is a no-op.\n    repoRootCache.set(cachedResult, cachedResult);\n  }\n\n  return cachedResult;\n}\n\n/**\n * Helper function for async process invocation with optional stdin support.\n * @param gitPath - Path to the Git executable\n * @param args - The process arguments\n * @param currentWorkingDirectory - The working directory. Should be the repository root.\n * @param stdin - An optional Readable stream to use as stdin to the process.\n */\nasync function spawnGitAsync(\n  gitPath: string | undefined,\n  args: string[],\n  currentWorkingDirectory: string,\n  stdin?: Readable\n): Promise<string> {\n  const spawnOptions: IExecutableSpawnOptions = {\n    currentWorkingDirectory,\n    stdio: ['pipe', 'pipe', 'pipe']\n  };\n\n  let stdout: string = '';\n  let stderr: string = '';\n\n  const proc: child_process.ChildProcess = Executable.spawn(gitPath || 'git', args, spawnOptions);\n  proc.stdout!.setEncoding('utf-8');\n  proc.stderr!.setEncoding('utf-8');\n\n  proc.stdout!.on('data', (chunk: string) => {\n    stdout += chunk.toString();\n  });\n  proc.stderr!.on('data', (chunk: string) => {\n    stderr += chunk.toString();\n  });\n\n  if (stdin) {\n    stdin.pipe(proc.stdin!);\n  }\n\n  const [status] = await once(proc, 'exit');\n  if (status !== 0) {\n    throw new Error(`git ${args[0]} exited with code ${status}: ${stderr}`);\n  }\n\n  return stdout;\n}\n\n/**\n * Gets the object hashes for all files in the Git repo, combining the current commit with working tree state.\n * Uses async operations and runs all primary Git calls in parallel.\n * @param rootDirectory - The root directory of the Git repository\n * @param additionalRelativePathsToHash - Root-relative file paths to have Git hash and include in the results\n * @param gitPath - The path to the Git executable\n * @beta\n */\nexport async function getRepoStateAsync(\n  rootDirectory: string,\n  additionalRelativePathsToHash?: string[],\n  gitPath?: string\n): Promise<Map<string, string>> {\n  const statePromise: Promise<IGitTreeState> = spawnGitAsync(\n    gitPath,\n    STANDARD_GIT_OPTIONS.concat([\n      'ls-tree',\n      // Recursively expand trees\n      '-r',\n      // Use NUL as the separator\n      '-z',\n      // Specify the full path to files relative to the root\n      '--full-name',\n      // As of last commit\n      'HEAD',\n      '--'\n    ]),\n    rootDirectory\n  ).then(parseGitLsTree);\n  const locallyModifiedPromise: Promise<Map<string, boolean>> = spawnGitAsync(\n    gitPath,\n    STANDARD_GIT_OPTIONS.concat([\n      'status',\n      // Use NUL as the separator\n      '-z',\n      // Include untracked files\n      '-u',\n      // Disable rename detection so that renames show up as add + delete\n      '--no-renames',\n      // Don't process submodules with this command; they'll be handled individually\n      '--ignore-submodules',\n      // Don't compare against the remote\n      '--no-ahead-behind',\n      '--'\n    ]),\n    rootDirectory\n  ).then(parseGitStatus);\n\n  const hashPaths: string[] = [];\n  async function* getFilesToHash(): AsyncIterableIterator<string> {\n    if (additionalRelativePathsToHash) {\n      for (const file of additionalRelativePathsToHash) {\n        hashPaths.push(file);\n        yield `${file}\\n`;\n      }\n    }\n\n    const [{ files }, locallyModified] = await Promise.all([statePromise, locallyModifiedPromise]);\n\n    for (const [filePath, exists] of locallyModified) {\n      if (exists) {\n        hashPaths.push(filePath);\n        yield `${filePath}\\n`;\n      } else {\n        files.delete(filePath);\n      }\n    }\n  }\n\n  const hashObjectPromise: Promise<string> = spawnGitAsync(\n    gitPath,\n    STANDARD_GIT_OPTIONS.concat(['hash-object', '--stdin-paths']),\n    rootDirectory,\n    Readable.from(getFilesToHash(), {\n      encoding: 'utf-8',\n      objectMode: false,\n      autoDestroy: true\n    })\n  );\n\n  const [{ files, submodules }, hashObject] = await Promise.all([\n    statePromise,\n    hashObjectPromise,\n    locallyModifiedPromise\n  ]);\n\n  // The result of \"git hash-object\" will be a list of file hashes delimited by newlines\n  for (const [filePath, hash] of parseGitHashObject(hashObject, hashPaths)) {\n    files.set(filePath, hash);\n  }\n\n  // Existence check for the .gitmodules file\n  const hasSubmodules: boolean = submodules.size > 0 && FileSystem.exists(`${rootDirectory}/.gitmodules`);\n\n  if (hasSubmodules) {\n    // Submodules are not the normal critical path. Accept serial performance rather than investing in complexity.\n    // Can revisit if submodules become more commonly used.\n    for (const submodulePath of submodules.keys()) {\n      const submoduleState: Map<string, string> = await getRepoStateAsync(\n        `${rootDirectory}/${submodulePath}`,\n        [],\n        gitPath\n      );\n      for (const [filePath, hash] of submoduleState) {\n        files.set(`${submodulePath}/${filePath}`, hash);\n      }\n    }\n  }\n\n  return files;\n}\n\n/**\n * Find all changed files tracked by Git, their current hashes, and the nature of the change. Only useful if all changes are staged or committed.\n * @param currentWorkingDirectory - The working directory. Only used to find the repository root.\n * @param revision - The Git revision specifier to detect changes relative to. Defaults to HEAD (i.e. will compare staged vs. committed)\n *   If comparing against a different branch, call `git merge-base` first to find the target commit.\n * @param gitPath - The path to the Git executable\n * @returns A map from the Git file path to the corresponding file change metadata\n * @beta\n */\nexport function getRepoChanges(\n  currentWorkingDirectory: string,\n  revision: string = 'HEAD',\n  gitPath?: string\n): Map<string, IFileDiffStatus> {\n  const rootDirectory: string = getRepoRoot(currentWorkingDirectory, gitPath);\n\n  const result: child_process.SpawnSyncReturns<string> = Executable.spawnSync(\n    gitPath || 'git',\n    STANDARD_GIT_OPTIONS.concat([\n      'diff-index',\n      '--color=never',\n      '--no-renames',\n      '--no-commit-id',\n      '--cached',\n      '-z',\n      revision,\n      '--'\n    ]),\n    {\n      currentWorkingDirectory: rootDirectory\n    }\n  );\n\n  if (result.status !== 0) {\n    ensureGitMinimumVersion(gitPath);\n\n    throw new Error(`git diff-index exited with status ${result.status}: ${result.stderr}`);\n  }\n\n  const changes: Map<string, IFileDiffStatus> = parseGitDiffIndex(result.stdout);\n\n  return changes;\n}\n\n/**\n * Checks the git version and throws an error if it is less than the minimum required version.\n *\n * @public\n */\nexport function ensureGitMinimumVersion(gitPath?: string): void {\n  const gitVersion: IGitVersion = getGitVersion(gitPath);\n  if (\n    gitVersion.major < MINIMUM_GIT_VERSION.major ||\n    (gitVersion.major === MINIMUM_GIT_VERSION.major && gitVersion.minor < MINIMUM_GIT_VERSION.minor) ||\n    (gitVersion.major === MINIMUM_GIT_VERSION.major &&\n      gitVersion.minor === MINIMUM_GIT_VERSION.minor &&\n      gitVersion.patch < MINIMUM_GIT_VERSION.patch)\n  ) {\n    throw new Error(\n      `The minimum Git version required is ` +\n        `${MINIMUM_GIT_VERSION.major}.${MINIMUM_GIT_VERSION.minor}.${MINIMUM_GIT_VERSION.patch}. ` +\n        `Your version is ${gitVersion.major}.${gitVersion.minor}.${gitVersion.patch}.`\n    );\n  }\n}\n\nfunction getGitVersion(gitPath?: string): IGitVersion {\n  const result: child_process.SpawnSyncReturns<string> = Executable.spawnSync(\n    gitPath || 'git',\n    STANDARD_GIT_OPTIONS.concat(['version'])\n  );\n\n  if (result.status !== 0) {\n    throw new Error(\n      `While validating the Git installation, the \"git version\" command failed with ` +\n        `status ${result.status}: ${result.stderr}`\n    );\n  }\n\n  return parseGitVersion(result.stdout);\n}\n\nexport function parseGitVersion(gitVersionOutput: string): IGitVersion {\n  // This regexp matches output of \"git version\" that looks like `git version <number>.<number>.<number>(+whatever)`\n  // Examples:\n  // - git version 1.2.3\n  // - git version 1.2.3.4.5\n  // - git version 1.2.3windows.1\n  // - git version 1.2.3.windows.1\n  const versionRegex: RegExp = /^git version (\\d+)\\.(\\d+)\\.(\\d+)/;\n  const match: RegExpMatchArray | null = versionRegex.exec(gitVersionOutput);\n  if (!match) {\n    throw new Error(\n      `While validating the Git installation, the \"git version\" command produced ` +\n        `unexpected output: \"${gitVersionOutput}\"`\n    );\n  }\n\n  const major: number = parseInt(match[1], 10);\n  const minor: number = parseInt(match[2], 10);\n  const patch: number = parseInt(match[3], 10);\n\n  return {\n    major,\n    minor,\n    patch\n  };\n}\n"]}