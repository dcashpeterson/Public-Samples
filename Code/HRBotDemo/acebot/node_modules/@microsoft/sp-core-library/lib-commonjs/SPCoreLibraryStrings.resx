<?xml version="1.0" encoding="utf-8"?>
<root>
  <data name="$FILE_ID" xml:space="preserve">
    <value>b9a8b887-93e7-4789-ae32-8f82a21c2c68</value>
    <comment>{locked} This is the file ID for this localization file. This string value should not be used or translated.</comment>
  </data>
  <data name="invalidEnvironmentTypeError" xml:space="preserve">
    <value>EnvironmentType is invalid</value>
    <comment>{Locked}Error to show when the Environment class is initialized with an invalid EnvironmentType.</comment>
  </data>
  <data name="invalidGuidStringError" xml:space="preserve">
    <value>Invalid GUID string: "{0}"</value>
    <comment>{Locked}Error to show when the Guid class fails to parse an invalid Guid. The {0} placeholder is the input guid string.</comment>
  </data>
  <data name="isFalseValidateError" xml:space="preserve">
    <value>The value for "{0}" is false</value>
    <comment>{Locked}Error to show when the Validate.isTrue() returns false. The {0} placeholder is the input's variable name.</comment>
  </data>
  <data name="isNullValidateError" xml:space="preserve">
    <value>The value for "{0}" must not be null</value>
    <comment>{Locked}Error to show when the Validate.isNotNullOrUndefined() is called on a null value. The {0} placeholder is the input's variable name.</comment>
  </data>
  <data name="isUndefinedValidateError" xml:space="preserve">
    <value>The value for "{0}" must not be undefined</value>
    <comment>{Locked}Error to show when the Validate.isNotNullOrUndefined() is called on an undefined value. The {0} placeholder is the input's variable name.</comment>
  </data>
  <data name="isEmptyStringValidateError" xml:space="preserve">
    <value>The value for "{0}" must not be an empty string</value>
    <comment>{Locked}Error to show when the Validate.isNonemptyString() returns false. The {0} placeholder is the input's variable name.</comment>
  </data>
  <data name="isDisposedValidateError" xml:space="preserve">
    <value>The "{0}" object cannot be used because it has been disposed.</value>
    <comment>{Locked}Error to show when the Validate.isNotDisposed() returns false. The {0} placeholder is the input's class name.</comment>
  </data>
  <data name="invalidVersionStringError" xml:space="preserve">
    <value>Invalid version string: "{0}"</value>
    <comment>{Locked}Error to show when the Version class fails to parse an invalid Version string. The {0} placeholder is the input version string.</comment>
  </data>
  <data name="logVerboseLevelMessage" xml:space="preserve">
    <value>{0}: VERBOSE {1}</value>
    <comment>{Locked}Text used when logging a verbose level message. The {0} placeholder is the source of the log call. The {1} placeholder is the message to be logged. Example: "SomeComponent: VERBOSE The page finished loading"</comment>
  </data>
  <data name="logInfoLevelMessage" xml:space="preserve">
    <value>{0}: {1}</value>
    <comment>{Locked}Text used when logging a info level message. The {0} placeholder is the source of the log call. The {1} placeholder is the message to be logged. Example: "SomeComponent: The page finished loading"</comment>
  </data>
  <data name="logWarningLevelMessage" xml:space="preserve">
    <value>{0}: WARNING {1}</value>
    <comment>{Locked}Text used when logging a warning level message. The {0} placeholder is the source of the log call. The {1} placeholder is the message to be logged. Example: "SomeComponent: WARNING The page finished loading"</comment>
  </data>
  <data name="logErrorLevelMessage" xml:space="preserve">
    <value>{0}: ERROR: {1}</value>
    <comment>{Locked}Text used when logging a error level message. The {0} placeholder is the source of the log call. The {1} placeholder is the error's message. Example: "SomeComponent: ERROR The page finished loading"</comment>
  </data>
  <data name="serviceScopeConsumingBeforeFinished" xml:space="preserve">
    <value>Cannot consume services because the scope is not finished yet</value>
    <comment>{Locked}Error to show when someone attempts to consume a ServiceScope service before the finish() function has been called</comment>
  </data>
  <data name="serviceScopeConsumingDuringAutoCreation" xml:space="preserve">
    <value>Cannot consume services during ServiceScope autocreation</value>
    <comment>{Locked}The ServiceScope will automatically create a service if it hasn't been registered yet.  During this process, the ServiceScope.consume() function may not be used.  This is a safeguard to prevent errors due to a circular dependency.</comment>
  </data>
  <data name="serviceScopeAlreadyFinishedError" xml:space="preserve">
    <value>The ServiceScope is already finished</value>
    <comment>{Locked}Error to show when someone attempts to call finish on the ServiceScope after it has finished.</comment>
  </data>
  <data name="serviceScopeProvideServiceAfterFinishedError" xml:space="preserve">
    <value>Cannot register service because the scope is already finished</value>
    <comment>{Locked}After the ServiceScope.finish() function has been called, developers are no long allowed to call provide().  This is a safeguard to prevent mistakes.</comment>
  </data>
  <data name="serviceScopeProvideServiceThatAlreadyExists" xml:space="preserve">
    <value>The service key "{0}" has already been registered in this scope</value>
    <comment>{Locked}Attempts to register the same service more than once. The {0} placeholder is the service key's name.</comment>
  </data>
  <data name="spErrorInnerErrorText" xml:space="preserve">
    <value>INNERERROR:</value>
    <comment>[Tag:ODSP-SPPPLAT-WebPartInfra]{Locked}Text used to label an optional nested error object.</comment>
  </data>
  <data name="spErrorCallStackText" xml:space="preserve">
    <value>CALLSTACK:</value>
    <comment>[Tag:ODSP-SPPPLAT-WebPartInfra]{Locked}Text used to label the error's callstack.</comment>
  </data>
  <data name="spErrorLogPropertiesText" xml:space="preserve">
    <value>LOGPROPERTIES:</value>
    <comment>[Tag:ODSP-SPPPLAT-WebPartInfra]{Locked}Text used to label the error's optional log properties object.</comment>
  </data>
</root>