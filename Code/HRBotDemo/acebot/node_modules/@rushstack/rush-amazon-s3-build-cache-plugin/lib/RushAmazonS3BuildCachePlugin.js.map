{"version":3,"file":"RushAmazonS3BuildCachePlugin.js","sourceRoot":"","sources":["../src/RushAmazonS3BuildCachePlugin.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;;;;;;;;;;;;;;;;;;;;AAQ3D,MAAM,WAAW,GAAW,0BAA0B,CAAC;AAgCvD;;GAEG;AACH,MAAa,4BAA4B;IAAzC;QACS,eAAU,GAAW,WAAW,CAAC;IAqD1C,CAAC;IAnDQ,KAAK,CAAC,WAAwB,EAAE,UAA6B;QAClE,WAAW,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,WAAW,EAAE,GAAG,EAAE;YACjD,WAAW,CAAC,sCAAsC,CAAC,WAAW,EAAE,KAAK,EAAE,gBAAgB,EAAE,EAAE;gBAIzF,MAAM,EAAE,qBAAqB,EAAE,GAAG,gBAA+B,CAAC;gBAClE,IAAI,OAGS,CAAC;gBACd,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,qBAAqB,CAAC;gBACjE,MAAM,QAAQ,GAAuB,qBAAqB,CAAC,QAAQ,IAAI,SAAS,CAAC;gBACjF,MAAM,mBAAmB,GAAY,CAAC,CAAC,qBAAqB,CAAC,mBAAmB,CAAC;gBAEjF,IAAI,QAAQ,IAAI,QAAQ,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;oBACnC,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;iBACzD;gBAED,qBAAqB;gBACrB,IAAI,QAAQ,IAAI,UAAU,EAAE;oBAC1B,MAAM,IAAI,KAAK,CAAC,0DAA0D,CAAC,CAAC;iBAC7E;gBAED,IAAI,UAAU,EAAE;oBACd,OAAO,GAAG;wBACR,6CAA6C;wBAC7C,QAAQ;wBACR,UAAU;wBACV,QAAQ;wBACR,mBAAmB;qBACpB,CAAC;iBACH;gBACD,IAAI,QAAQ,EAAE;oBACZ,OAAO,GAAG;wBACR,2CAA2C;wBAC3C,QAAQ;wBACR,QAAQ;wBACR,QAAQ;wBACR,mBAAmB;qBACpB,CAAC;iBACH;gBACD,IAAI,CAAC,OAAO,EAAE;oBACZ,MAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAC;iBACtE;gBAED,MAAM,EAAE,0BAA0B,EAAE,GAAG,wDAAa,8BAA8B,GAAC,CAAC;gBACpF,OAAO,IAAI,0BAA0B,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;YAC9D,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AAtDD,oEAsDC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport type { IRushPlugin, RushSession, RushConfiguration } from '@rushstack/rush-sdk';\nimport type {\n  IAmazonS3BuildCacheProviderOptionsAdvanced,\n  IAmazonS3BuildCacheProviderOptionsSimple\n} from './AmazonS3BuildCacheProvider';\n\nconst PLUGIN_NAME: string = 'AmazonS3BuildCachePlugin';\n\n/**\n * @public\n */\nexport interface IAmazonS3ConfigurationJson {\n  /**\n   * (Required unless s3Endpoint is specified) The name of the bucket to use for build cache (e.g. \"my-bucket\").\n   */\n  s3Bucket?: string;\n\n  /**\n   * (Required unless s3Bucket is specified) The Amazon S3 endpoint of the bucket to use for build cache (e.g. \"my-bucket.s3.us-east-2.amazonaws.com\" or \"http://localhost:9000\").\n   */\n  s3Endpoint?: string;\n\n  /**\n   * The Amazon S3 region of the bucket to use for build cache (e.g. \"us-east-1\").\n   */\n  s3Region: string;\n\n  /**\n   * An optional prefix (\"folder\") for cache items.\n   */\n  s3Prefix?: string;\n\n  /**\n   * If set to true, allow writing to the cache. Defaults to false.\n   */\n  isCacheWriteAllowed?: boolean;\n}\n\n/**\n * @public\n */\nexport class RushAmazonS3BuildCachePlugin implements IRushPlugin {\n  public pluginName: string = PLUGIN_NAME;\n\n  public apply(rushSession: RushSession, rushConfig: RushConfiguration): void {\n    rushSession.hooks.initialize.tap(PLUGIN_NAME, () => {\n      rushSession.registerCloudBuildCacheProviderFactory('amazon-s3', async (buildCacheConfig) => {\n        type IBuildCache = typeof buildCacheConfig & {\n          amazonS3Configuration: IAmazonS3ConfigurationJson;\n        };\n        const { amazonS3Configuration } = buildCacheConfig as IBuildCache;\n        let options:\n          | IAmazonS3BuildCacheProviderOptionsAdvanced\n          | IAmazonS3BuildCacheProviderOptionsSimple\n          | undefined;\n        const { s3Endpoint, s3Bucket, s3Region } = amazonS3Configuration;\n        const s3Prefix: undefined | string = amazonS3Configuration.s3Prefix || undefined;\n        const isCacheWriteAllowed: boolean = !!amazonS3Configuration.isCacheWriteAllowed;\n\n        if (s3Prefix && s3Prefix[0] === '/') {\n          throw new Error('s3Prefix should not have a leading /');\n        }\n\n        // mutually exclusive\n        if (s3Bucket && s3Endpoint) {\n          throw new Error('Only one of \"s3Bucket\" or \"s3Endpoint\" must be provided.');\n        }\n\n        if (s3Endpoint) {\n          options = {\n            // IAmazonS3BuildCacheProviderOptionsAdvanced\n            s3Region,\n            s3Endpoint,\n            s3Prefix,\n            isCacheWriteAllowed\n          };\n        }\n        if (s3Bucket) {\n          options = {\n            // IAmazonS3BuildCacheProviderOptionsSimple\n            s3Region,\n            s3Bucket,\n            s3Prefix,\n            isCacheWriteAllowed\n          };\n        }\n        if (!options) {\n          throw new Error('You must provide either an s3Endpoint or s3Bucket');\n        }\n\n        const { AmazonS3BuildCacheProvider } = await import('./AmazonS3BuildCacheProvider');\n        return new AmazonS3BuildCacheProvider(options, rushSession);\n      });\n    });\n  }\n}\n"]}