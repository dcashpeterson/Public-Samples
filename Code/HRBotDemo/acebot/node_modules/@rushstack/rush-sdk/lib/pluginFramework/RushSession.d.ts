import { type ITerminalProvider } from '@rushstack/node-core-library';
import { type ILogger } from './logging/Logger';
import { RushLifecycleHooks } from './RushLifeCycle';
import type { IBuildCacheJson } from '../api/BuildCacheConfiguration';
import type { ICloudBuildCacheProvider } from '../logic/buildCache/ICloudBuildCacheProvider';
import type { ICobuildJson } from '../api/CobuildConfiguration';
import type { ICobuildLockProvider } from '../logic/cobuild/ICobuildLockProvider';
/**
 * @beta
 */
export interface IRushSessionOptions {
    terminalProvider: ITerminalProvider;
    getIsDebugMode: () => boolean;
}
/**
 * @beta
 */
export type CloudBuildCacheProviderFactory = (buildCacheJson: IBuildCacheJson) => ICloudBuildCacheProvider | Promise<ICloudBuildCacheProvider>;
/**
 * @beta
 */
export type CobuildLockProviderFactory = (cobuildJson: ICobuildJson) => ICobuildLockProvider | Promise<ICobuildLockProvider>;
/**
 * @beta
 */
export declare class RushSession {
    private readonly _options;
    private readonly _cloudBuildCacheProviderFactories;
    private readonly _cobuildLockProviderFactories;
    readonly hooks: RushLifecycleHooks;
    constructor(options: IRushSessionOptions);
    getLogger(name: string): ILogger;
    get terminalProvider(): ITerminalProvider;
    registerCloudBuildCacheProviderFactory(cacheProviderName: string, factory: CloudBuildCacheProviderFactory): void;
    getCloudBuildCacheProviderFactory(cacheProviderName: string): CloudBuildCacheProviderFactory | undefined;
    registerCobuildLockProviderFactory(cobuildLockProviderName: string, factory: CobuildLockProviderFactory): void;
    getCobuildLockProviderFactory(cobuildLockProviderName: string): CobuildLockProviderFactory | undefined;
}
//# sourceMappingURL=RushSession.d.ts.map