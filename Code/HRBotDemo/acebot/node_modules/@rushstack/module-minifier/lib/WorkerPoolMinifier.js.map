{"version":3,"file":"WorkerPoolMinifier.js","sourceRoot":"","sources":["../src/WorkerPoolMinifier.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { createHash } from 'crypto';\nimport { cpus } from 'os';\n\nimport serialize from 'serialize-javascript';\nimport type { MinifyOptions } from 'terser';\nimport { WorkerPool } from '@rushstack/worker-pool';\n\nimport type {\n  IMinifierConnection,\n  IModuleMinificationCallback,\n  IModuleMinificationResult,\n  IModuleMinificationRequest,\n  IModuleMinifier\n} from './types';\n\n/**\n * Options for configuring the WorkerPoolMinifier\n * @public\n */\nexport interface IWorkerPoolMinifierOptions {\n  /**\n   * Maximum number of worker threads to use. Will never use more than there are modules to process.\n   * Defaults to os.cpus().length\n   */\n  maxThreads?: number;\n  /**\n   * The options to forward to Terser.\n   * `output.comments` is currently not configurable and will always extract license comments to a separate file.\n   */\n  terserOptions?: MinifyOptions;\n\n  /**\n   * If true, log to the console about the minification results.\n   */\n  verbose?: boolean;\n}\n\n/**\n * Minifier implementation that uses a thread pool for minification.\n * @public\n */\nexport class WorkerPoolMinifier implements IModuleMinifier {\n  private readonly _pool: WorkerPool;\n  private readonly _verbose: boolean;\n  private readonly _configHash: string;\n\n  private _refCount: number;\n  private _deduped: number;\n  private _minified: number;\n\n  private readonly _resultCache: Map<string, IModuleMinificationResult>;\n  private readonly _activeRequests: Map<string, IModuleMinificationCallback[]>;\n\n  public constructor(options: IWorkerPoolMinifierOptions) {\n    const { maxThreads = cpus().length, terserOptions = {}, verbose = false } = options || {};\n\n    const activeRequests: Map<string, IModuleMinificationCallback[]> = new Map();\n    const resultCache: Map<string, IModuleMinificationResult> = new Map();\n    const terserPool: WorkerPool = new WorkerPool({\n      id: 'Minifier',\n      maxWorkers: maxThreads,\n      workerData: terserOptions,\n      workerScriptPath: require.resolve('./MinifierWorker')\n    });\n\n    const { version: terserVersion } = require('terser/package.json');\n\n    this._configHash = createHash('sha256')\n      .update(WorkerPoolMinifier.name, 'utf8')\n      .update(`terser@${terserVersion}`)\n      .update(serialize(terserOptions))\n      .digest('base64');\n\n    this._activeRequests = activeRequests;\n    this._refCount = 0;\n    this._resultCache = resultCache;\n    this._pool = terserPool;\n    this._verbose = verbose;\n\n    this._deduped = 0;\n    this._minified = 0;\n  }\n\n  public get maxThreads(): number {\n    return this._pool.maxWorkers;\n  }\n\n  public set maxThreads(threads: number) {\n    this._pool.maxWorkers = threads;\n  }\n\n  /**\n   * Transform code by farming it out to a worker pool.\n   * @param request - The request to process\n   * @param callback - The callback to invoke\n   */\n  public minify(request: IModuleMinificationRequest, callback: IModuleMinificationCallback): void {\n    const { hash } = request;\n\n    const cached: IModuleMinificationResult | undefined = this._resultCache.get(hash);\n    if (cached) {\n      ++this._deduped;\n      return callback(cached);\n    }\n\n    const { _activeRequests: activeRequests } = this;\n    const callbacks: IModuleMinificationCallback[] | undefined = activeRequests.get(hash);\n    if (callbacks) {\n      ++this._deduped;\n      callbacks.push(callback);\n      return;\n    }\n\n    activeRequests.set(hash, [callback]);\n    ++this._minified;\n\n    this._pool\n      .checkoutWorkerAsync(true)\n      .then((worker) => {\n        const cb: (message: IModuleMinificationResult) => void = (\n          message: IModuleMinificationResult\n        ): void => {\n          worker.off('message', cb);\n          const workerCallbacks: IModuleMinificationCallback[] | undefined = activeRequests.get(\n            message.hash\n          )!;\n          activeRequests.delete(message.hash);\n          this._resultCache.set(message.hash, message);\n          for (const workerCallback of workerCallbacks) {\n            workerCallback(message);\n          }\n          // This should always be the last thing done with the worker\n          this._pool.checkinWorker(worker);\n        };\n\n        worker.on('message', cb);\n        worker.postMessage(request);\n      })\n      .catch((error: Error) => {\n        const errorCallbacks: IModuleMinificationCallback[] = activeRequests.get(hash)!;\n        for (const errorCallback of errorCallbacks) {\n          errorCallback({\n            hash,\n            error,\n            code: undefined,\n            map: undefined\n          });\n        }\n      });\n  }\n\n  public async connect(): Promise<IMinifierConnection> {\n    if (++this._refCount === 1) {\n      this._pool.reset();\n    }\n\n    return {\n      configHash: this._configHash,\n\n      disconnect: async () => {\n        if (--this._refCount === 0) {\n          if (this._verbose) {\n            // eslint-disable-next-line no-console\n            console.log(`Shutting down minifier worker pool`);\n          }\n          await this._pool.finishAsync();\n          this._resultCache.clear();\n          this._activeRequests.clear();\n          if (this._verbose) {\n            // eslint-disable-next-line no-console\n            console.log(`Module minification: ${this._deduped} Deduped, ${this._minified} Processed`);\n          }\n        }\n        this._deduped = 0;\n        this._minified = 0;\n      }\n    };\n  }\n}\n"]}