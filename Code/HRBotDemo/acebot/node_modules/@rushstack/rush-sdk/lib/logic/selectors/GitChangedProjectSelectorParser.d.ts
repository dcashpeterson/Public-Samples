import type { RushConfiguration } from '../../api/RushConfiguration';
import type { RushConfigurationProject } from '../../api/RushConfigurationProject';
import type { IEvaluateSelectorOptions, ISelectorParser } from './ISelectorParser';
export interface IGitSelectorParserOptions {
    /**
     * If set to `true`, consider a project's external dependency installation layout as defined in the
     * package manager lockfile when determining if it has changed.
     */
    includeExternalDependencies: boolean;
    /**
     * If set to `true` apply the `incrementalBuildIgnoredGlobs` property in a project's `rush-project.json`
     * and exclude matched files from change detection.
     */
    enableFiltering: boolean;
}
export declare class GitChangedProjectSelectorParser implements ISelectorParser<RushConfigurationProject> {
    private readonly _rushConfiguration;
    private readonly _options;
    constructor(rushConfiguration: RushConfiguration, options: IGitSelectorParserOptions);
    evaluateSelectorAsync({ unscopedSelector, terminal }: IEvaluateSelectorOptions): Promise<Iterable<RushConfigurationProject>>;
    getCompletions(): Iterable<string>;
}
//# sourceMappingURL=GitChangedProjectSelectorParser.d.ts.map