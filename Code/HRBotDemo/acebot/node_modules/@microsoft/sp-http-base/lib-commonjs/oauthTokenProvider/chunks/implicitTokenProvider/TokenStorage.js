"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokenStorage = exports.EXPIRATION_KEY = exports.ACCESS_TOKEN_KEY = void 0;
exports.ACCESS_TOKEN_KEY = 'adal.access.token.key';
exports.EXPIRATION_KEY = 'adal.expiration.key';
var TOKEN_EXPIRATION_OFFSET = 10000;
var TokenStorage = /** @class */ (function () {
    function TokenStorage(tokenProviderParameters) {
        this._memoryCache = new Map();
        this._aadUserId = tokenProviderParameters.aadUserId || '';
        this._clientId = tokenProviderParameters.servicePrincipalId;
    }
    TokenStorage.getCacheKey = function (userId, clientId, typeOfResource, resourceUri) {
        return userId + '|' + clientId + '|' + typeOfResource + '|' + resourceUri;
    };
    /**
     * Calculates the expires in value in milliseconds for the acquired token
     */
    TokenStorage._getTokenExpirationInMilliseconds = function (expiration) {
        var tokenLife = parseInt(expiration, 10);
        return Date.now() + tokenLife * 1000;
    };
    TokenStorage._isExpired = function (expiration) {
        return Date.now() >= parseInt(expiration, 10) - TOKEN_EXPIRATION_OFFSET;
    };
    TokenStorage._isValid = function (token, expiration) {
        if (token && expiration) {
            return !TokenStorage._isExpired(expiration);
        }
        return false;
    };
    TokenStorage.prototype.getToken = function (resourceUri) {
        var tokenCacheKey = TokenStorage.getCacheKey(this._aadUserId, this._clientId, exports.ACCESS_TOKEN_KEY, resourceUri);
        var expirationCacheKey = TokenStorage.getCacheKey(this._aadUserId, this._clientId, exports.EXPIRATION_KEY, resourceUri);
        var tokenInfo = this._memoryCache.get(resourceUri);
        if (tokenInfo) {
            if (!TokenStorage._isValid(tokenInfo.token, tokenInfo.expiration)) {
                this._memoryCache.delete(resourceUri);
            }
            else {
                return tokenInfo.token;
            }
        }
        var token = '';
        try {
            token = sessionStorage.getItem(tokenCacheKey) || '';
            var expiration = sessionStorage.getItem(expirationCacheKey) || '';
            if (!TokenStorage._isValid(token, expiration)) {
                sessionStorage.setItem(tokenCacheKey, '');
                sessionStorage.setItem(expirationCacheKey, '');
                token = '';
            }
        }
        catch (e) {
            // Session Storage not avaliable
        }
        return token;
    };
    TokenStorage.prototype.saveToken = function (tokenResponse, resourceUri) {
        var tokenCacheKey = TokenStorage.getCacheKey(this._aadUserId, this._clientId, exports.ACCESS_TOKEN_KEY, resourceUri);
        var expirationCacheKey = TokenStorage.getCacheKey(this._aadUserId, this._clientId, exports.EXPIRATION_KEY, resourceUri);
        this._memoryCache.set(resourceUri, tokenResponse);
        try {
            sessionStorage.setItem(tokenCacheKey, tokenResponse.token);
            sessionStorage.setItem(expirationCacheKey, TokenStorage._getTokenExpirationInMilliseconds(tokenResponse.expiration).toString());
        }
        catch (e) {
            // Session Storage not avaliable. Must rely on memory cache
        }
    };
    return TokenStorage;
}());
exports.TokenStorage = TokenStorage;
//# sourceMappingURL=TokenStorage.js.map