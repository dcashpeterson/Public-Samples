{"version":3,"file":"no-new-null.test.js","sourceRoot":"","sources":["../src/no-new-null.test.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,8EAAoE;AACpE,+CAA8C;AAE9C,MAAM,EAAE,UAAU,EAAE,GAAG,gCAAW,CAAC;AACnC,MAAM,UAAU,GAAG,IAAI,UAAU,CAAC;IAChC,MAAM,EAAE,2BAA2B;CACpC,CAAC,CAAC;AAEH,UAAU,CAAC,GAAG,CAAC,aAAa,EAAE,2BAAa,EAAE;IAC3C,OAAO,EAAE;QACP;YACE,IAAI,EAAE,gDAAgD;YACtD,MAAM,EAAE,CAAC,EAAE,SAAS,EAAE,yBAAyB,EAAE,CAAC;SACnD;QACD;YACE,IAAI,EAAE,mBAAmB;YACzB,MAAM,EAAE,CAAC,EAAE,SAAS,EAAE,yBAAyB,EAAE,CAAC;SACnD;QACD;YACE,IAAI,EAAE,2CAA2C;YACjD,MAAM,EAAE,CAAC,EAAE,SAAS,EAAE,yBAAyB,EAAE,CAAC;SACnD;QACD;YACE,IAAI,EAAE,gDAAgD;YACtD,MAAM,EAAE,CAAC,EAAE,SAAS,EAAE,yBAAyB,EAAE,CAAC;SACnD;QACD;YACE,IAAI,EAAE,qDAAqD;YAC3D,MAAM,EAAE,CAAC,EAAE,SAAS,EAAE,yBAAyB,EAAE,CAAC;SACnD;QACD;YACE,IAAI,EAAE,mEAAmE;YACzE,MAAM,EAAE,CAAC,EAAE,SAAS,EAAE,yBAAyB,EAAE,CAAC;SACnD;QACD;YACE,IAAI,EAAE,0DAA0D;YAChE,MAAM,EAAE,CAAC,EAAE,SAAS,EAAE,yBAAyB,EAAE,CAAC;SACnD;QACD;YACE,IAAI,EAAE,kCAAkC;YACxC,MAAM,EAAE,CAAC,EAAE,SAAS,EAAE,yBAAyB,EAAE,CAAC;SACnD;QACD;YACE,IAAI,EAAE,8BAA8B;YACpC,MAAM,EAAE,CAAC,EAAE,SAAS,EAAE,yBAAyB,EAAE,CAAC;SACnD;QACD;YACE,IAAI,EAAE,kCAAkC;YACxC,MAAM,EAAE,CAAC,EAAE,SAAS,EAAE,yBAAyB,EAAE,CAAC;SACnD;QACD;YACE,IAAI,EAAE;gBACJ,qBAAqB;gBACrB,4BAA4B;gBAC5B,+CAA+C;gBAC/C,uDAAuD;gBACvD,8DAA8D;gBAC9D,GAAG;aACJ,CAAC,IAAI,CAAC,IAAI,CAAC;YACZ,MAAM,EAAE;gBACN;oBACE,SAAS,EAAE,yBAAyB;iBACrC;gBACD;oBACE,SAAS,EAAE,yBAAyB;iBACrC;gBACD;oBACE,SAAS,EAAE,yBAAyB;iBACrC;gBACD;oBACE,SAAS,EAAE,yBAAyB;iBACrC;aACF;SACF;KACF;IACD,KAAK,EAAE;QACL;YACE,IAAI,EAAE;gBACJ,mDAAmD;gBACnD,iFAAiF;gBACjF,+BAA+B;gBAC/B,GAAG;aACJ,CAAC,IAAI,CAAC,IAAI,CAAC;SACb;QACD;YACE,IAAI,EAAE;gBACJ,mDAAmD;gBACnD,+CAA+C;gBAC/C,GAAG;aACJ,CAAC,IAAI,CAAC,IAAI,CAAC;SACb;QACD;YACE,IAAI,EAAE;gBACJ,sBAAsB;gBACtB,qCAAqC;gBACrC,gDAAgD;gBAChD,iCAAiC;gBACjC,0CAA0C;gBAC1C,uDAAuD;gBACvD,gCAAgC;gBAChC,yBAAyB;gBACzB,KAAK;gBACL,GAAG;aACJ,CAAC,IAAI,CAAC,IAAI,CAAC;SACb;KACF;CACF,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { ESLintUtils } from '@typescript-eslint/experimental-utils';\r\nimport { noNewNullRule } from './no-new-null';\r\n\r\nconst { RuleTester } = ESLintUtils;\r\nconst ruleTester = new RuleTester({\r\n  parser: '@typescript-eslint/parser'\r\n});\r\n\r\nruleTester.run('no-new-null', noNewNullRule, {\r\n  invalid: [\r\n    {\r\n      code: 'type FuncAlias = (args: string | null) => void',\r\n      errors: [{ messageId: 'error-new-usage-of-null' }]\r\n    },\r\n    {\r\n      code: 'type Alias = null',\r\n      errors: [{ messageId: 'error-new-usage-of-null' }]\r\n    },\r\n    {\r\n      code: 'type ObjAlias = { field: string | null; }',\r\n      errors: [{ messageId: 'error-new-usage-of-null' }]\r\n    },\r\n    {\r\n      code: 'type Constructor = {new (args: string | null)}',\r\n      errors: [{ messageId: 'error-new-usage-of-null' }]\r\n    },\r\n    {\r\n      code: 'function nullTypeArgs(args: string | null): void {}',\r\n      errors: [{ messageId: 'error-new-usage-of-null' }]\r\n    },\r\n    {\r\n      code: 'function nullReturn(args: string): (err: Error | null) => void {}',\r\n      errors: [{ messageId: 'error-new-usage-of-null' }]\r\n    },\r\n    {\r\n      code: 'const functionExpression = function (arg: null): void {}',\r\n      errors: [{ messageId: 'error-new-usage-of-null' }]\r\n    },\r\n    {\r\n      code: 'const arrow = (args: null) => {}',\r\n      errors: [{ messageId: 'error-new-usage-of-null' }]\r\n    },\r\n    {\r\n      code: 'interface I { field: null; }',\r\n      errors: [{ messageId: 'error-new-usage-of-null' }]\r\n    },\r\n    {\r\n      code: 'const v: string | null = \"hello\"',\r\n      errors: [{ messageId: 'error-new-usage-of-null' }]\r\n    },\r\n    {\r\n      code: [\r\n        'class PublicNulls {',\r\n        '  property: string | null;',\r\n        '  propertyFunc: (val: string | null) => void;',\r\n        '  legacyImplicitPublic(hello: string | null): void {}',\r\n        '  public legacyExplicitPublic(hello: string | null): void {}',\r\n        '}'\r\n      ].join('\\n'),\r\n      errors: [\r\n        {\r\n          messageId: 'error-new-usage-of-null'\r\n        },\r\n        {\r\n          messageId: 'error-new-usage-of-null'\r\n        },\r\n        {\r\n          messageId: 'error-new-usage-of-null'\r\n        },\r\n        {\r\n          messageId: 'error-new-usage-of-null'\r\n        }\r\n      ]\r\n    }\r\n  ],\r\n  valid: [\r\n    {\r\n      code: [\r\n        'export function wrapLegacy(hello: string): void {',\r\n        '  const innerCallback: (err: NodeJS.ErrnoException | null) => void = (e) => {};',\r\n        '  return innerCallback(null);',\r\n        '}'\r\n      ].join('\\n')\r\n    },\r\n    {\r\n      code: [\r\n        'function functionWithLocalVariableTypes(): void {',\r\n        '  const match: RegExpExecArray | null = null;',\r\n        '}'\r\n      ].join('\\n')\r\n    },\r\n    {\r\n      code: [\r\n        'class PrivateNulls {',\r\n        '  // private pField: string | null;',\r\n        '  private pFunc: (val: string | null) => void;',\r\n        '  l = this.legacyPrivate(null);',\r\n        \"  // field = this.legacyPrivate('null');\",\r\n        '  private legacyPrivate(hello: string | null): void {',\r\n        '    // this.pFunc(this.pField)',\r\n        \"    this.pFunc('hello')\",\r\n        '  }',\r\n        '}'\r\n      ].join('\\n')\r\n    }\r\n  ]\r\n});\r\n"]}