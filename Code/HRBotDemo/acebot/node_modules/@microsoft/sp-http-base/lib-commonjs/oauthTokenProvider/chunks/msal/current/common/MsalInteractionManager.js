"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsalInteractionManager = void 0;
/**
 * This class is used to manage interactions with MSAL.js clients (UserAgentApplication and
 * PublicClientApplication).
 *
 * Before attempting to interact with an MSAL.js client, call acquireControl() and wait for the
 * promise to resolve.
 *
 * After all the interactions are complete, call releaseControl() and wait for the promise to resolve.
 *
 * All calls placed to acquireControl() are placed in a queue and only proceed once the previous call
 * is resolved via releaseControl(). The call will automatically complete in 10 seconds if releaseControl()
 * is never called.
 *
 * @internal
 */
var MsalInteractionManager = /** @class */ (function () {
    function MsalInteractionManager() {
    }
    /**
     * This method returns an empty promise and should be called before attempting
     * to interact with an MSAL.js client. You should not interact with the client until
     * the promise resolves.
     *
     * A call to acquireControl() will resolve when
     *  1. Immediately if there are no requests in the queue.
     *  2. When the previous request calls releaseControl().
     *  3. Once 10 seconds have passed.
  
    * @returns A promise that resolves when you may safely interact with the MSAL.js client.
     */
    MsalInteractionManager.acquireControl = function () {
        return new Promise(function (resolve, reject) {
            if (!MsalInteractionManager._isRequestInProgress) {
                MsalInteractionManager._isRequestInProgress = true;
                resolve();
            }
            else {
                MsalInteractionManager._requestQueue.push(resolve);
                setTimeout(function () {
                    var isCurrentRequest = resolve === MsalInteractionManager._requestQueue[0];
                    if (isCurrentRequest) {
                        MsalInteractionManager._isRequestInProgress = false;
                    }
                    resolve();
                }, MsalInteractionManager._DEFAULT_AUTO_RESOLVE_TIME);
            }
        });
    };
    /**
     * This method returns an empty promise and should be called when done interacting
     * with an MSAL.js client. Calling this method will let the next request in the queue
     * begin interacting with the MSAL.js client.
     *
     * @returns An empty promise that resolves when the next request may begin
     *          to interact with the MSAL.js client.
     */
    MsalInteractionManager.releaseControl = function () {
        MsalInteractionManager._isRequestInProgress = false;
        var nextTask = MsalInteractionManager._requestQueue.shift();
        if (nextTask) {
            nextTask();
        }
    };
    MsalInteractionManager._isRequestInProgress = false;
    MsalInteractionManager._requestQueue = [];
    // We'll wait a maximum of 10 seconds before automatically closing
    MsalInteractionManager._DEFAULT_AUTO_RESOLVE_TIME = 10000;
    return MsalInteractionManager;
}());
exports.MsalInteractionManager = MsalInteractionManager;
//# sourceMappingURL=MsalInteractionManager.js.map