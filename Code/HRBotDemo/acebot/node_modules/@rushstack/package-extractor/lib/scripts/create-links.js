"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
// THIS SCRIPT IS GENERATED BY THE "rush deploy" COMMAND.
/* eslint-disable no-console */
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
// API borrowed from @rushstack/node-core-library, since this script avoids using any
// NPM dependencies.
class FileSystem {
    static createSymbolicLinkJunction(options) {
        fs.symlinkSync(options.linkTargetPath, options.newLinkPath, 'junction');
    }
    static createSymbolicLinkFile(options) {
        fs.symlinkSync(options.linkTargetPath, options.newLinkPath, 'file');
    }
    static createSymbolicLinkFolder(options) {
        fs.symlinkSync(options.linkTargetPath, options.newLinkPath, 'dir');
    }
    static createHardLink(options) {
        fs.linkSync(options.linkTargetPath, options.newLinkPath);
    }
}
function ensureFolder(folderPath) {
    if (!folderPath) {
        return;
    }
    if (fs.existsSync(folderPath)) {
        return;
    }
    const parentPath = path.dirname(folderPath);
    if (parentPath && parentPath !== folderPath) {
        ensureFolder(parentPath);
    }
    fs.mkdirSync(folderPath);
}
function removeLinks(targetRootFolder, extractorMetadataObject) {
    for (const linkInfo of extractorMetadataObject.links) {
        // Link to the relative path for symlinks
        const newLinkPath = path.join(targetRootFolder, linkInfo.linkPath);
        if (fs.existsSync(newLinkPath)) {
            fs.unlinkSync(newLinkPath);
        }
    }
}
function createLinks(targetRootFolder, extractorMetadataObject) {
    for (const linkInfo of extractorMetadataObject.links) {
        // Link to the relative path for symlinks
        const newLinkPath = path.join(targetRootFolder, linkInfo.linkPath);
        const linkTargetPath = path.join(targetRootFolder, linkInfo.targetPath);
        // Make sure the containing folder exists
        ensureFolder(path.dirname(newLinkPath));
        // NOTE: This logic is based on NpmLinkManager._createSymlink()
        if (process.platform === 'win32') {
            if (linkInfo.kind === 'folderLink') {
                // For directories, we use a Windows "junction".  On Unix, this produces a regular symlink.
                FileSystem.createSymbolicLinkJunction({ newLinkPath, linkTargetPath });
            }
            else {
                // For files, we use a Windows "hard link", because creating a symbolic link requires
                // administrator permission.
                // NOTE: We cannot use the relative path for hard links
                FileSystem.createHardLink({ newLinkPath, linkTargetPath });
            }
        }
        else {
            // However hard links seem to cause build failures on Mac, so for all other operating systems
            // we use symbolic links for this case.
            if (linkInfo.kind === 'folderLink') {
                FileSystem.createSymbolicLinkFolder({ newLinkPath, linkTargetPath });
            }
            else {
                FileSystem.createSymbolicLinkFile({ newLinkPath, linkTargetPath });
            }
        }
    }
}
function showUsage() {
    console.log('Usage:');
    console.log('  node create-links.js create');
    console.log('  node create-links.js remove');
    console.log('\nCreates or removes the symlinks for the output folder created by "rush deploy".');
    console.log('The link information is read from "extractor-metadata.json" in the same folder.');
}
function main() {
    // Example: [ "node.exe", "create-links.js", ""create" ]
    const args = process.argv.slice(2);
    if (args.length !== 1 || (args[0] !== 'create' && args[0] !== 'remove')) {
        showUsage();
        return false;
    }
    const targetRootFolder = __dirname;
    const extractorMetadataPath = path.join(targetRootFolder, 'extractor-metadata.json');
    if (!fs.existsSync(extractorMetadataPath)) {
        throw new Error('Input file not found: ' + extractorMetadataPath);
    }
    const extractorMetadataJson = fs.readFileSync(extractorMetadataPath).toString();
    const extractorMetadataObject = JSON.parse(extractorMetadataJson);
    if (args[0] === 'create') {
        console.log(`\nCreating links for extraction at path "${targetRootFolder}"`);
        removeLinks(targetRootFolder, extractorMetadataObject);
        createLinks(targetRootFolder, extractorMetadataObject);
    }
    else {
        console.log(`\nRemoving links for extraction at path "${targetRootFolder}"`);
        removeLinks(targetRootFolder, extractorMetadataObject);
    }
    console.log('The operation completed successfully.');
    return true;
}
try {
    process.exitCode = 1;
    if (main()) {
        process.exitCode = 0;
    }
}
catch (error) {
    console.log('ERROR: ' + error);
}
//# sourceMappingURL=create-links.js.map