{"version":3,"file":"ApiExtractorRunner.js","sourceRoot":"","sources":["../src/ApiExtractorRunner.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAI3D,mEAA+F;AAC/F,mCAAuC;AACvC,yDAAsD;AAEtD;;;;;GAKG;AACH,MAAa,kBAAmB,SAAQ,6CAAqB;IAiB3D,YACE,IAAkE,EAClE,IAAyE,EACzE,IAAmD,EACnD,IAAgC,EAChC,IAAwB;QAExB,IAAI,OAAsC,CAAC;QAC3C,IAAI,eAA6C,CAAC;QAClD,IAAI,gBAAsD,CAAC;QAC3D,IAAI,QAAgB,CAAC;QACrB,IAAI,gBAAmC,CAAC;QACxC,IAAI,IAAI,YAAY,oBAAY,CAAC,eAAe,EAAE;YAChD,eAAe,GAAG,IAAI,CAAC;YACvB,gBAAgB,GAAG,IAA4C,CAAC;YAChE,QAAQ,GAAG,IAAc,CAAC;YAC1B,gBAAgB,GAAG,IAAyB,CAAC;YAC7C,MAAM,gBAAgB,GAAqB,IAAI,mCAAgB,CAAC,gBAAgB,CAAC,CAAC;YAClF,OAAO,GAAG,gBAAgB,CAAC,sCAAsC,EAAE,CAAC;SACrE;aAAM;YACL,OAAO,GAAG,IAAI,CAAC;YACf,eAAe,GAAG,IAAoC,CAAC;YACvD,gBAAgB,GAAG,IAA4C,CAAC;YAChE,QAAQ,GAAG,IAAc,CAAC;YAC1B,gBAAgB,GAAG,IAAyB,CAAC;SAC9C;QAED,KAAK,CAAC,OAAO,EAAE,QAAQ,EAAE,gBAAgB,CAAC,CAAC;QAE3C,IAAI,CAAC,gBAAgB,GAAG,eAAe,CAAC;QACxC,IAAI,CAAC,iBAAiB,GAAG,gBAAgB,CAAC;IAC5C,CAAC;IAEM,KAAK,CAAC,MAAM;QACjB,MAAM,gBAAgB,mCACjB,IAAI,CAAC,iBAAiB,KACzB,eAAe,EAAE,CAAC,OAAsC,EAAE,EAAE;gBAC1D,QAAQ,OAAO,CAAC,QAAQ,EAAE;oBACxB,uDAAyC,CAAC,CAAC;wBACzC,IAAI,OAAO,CAAC,cAAc,EAAE;4BAC1B,IAAI,CAAC,UAAU,CACb,OAAO,CAAC,cAAc,EACtB,OAAO,CAAC,cAAe,EACvB,OAAO,CAAC,gBAAiB,EACzB,OAAO,CAAC,QAAQ,EAChB,OAAO,CAAC,IAAI,CACb,CAAC;yBACH;6BAAM;4BACL,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;yBAC7C;wBAED,MAAM;qBACP;oBAED,2DAA2C,CAAC,CAAC;wBAC3C,IAAI,OAAO,CAAC,cAAc,EAAE;4BAC1B,IAAI,CAAC,YAAY,CACf,OAAO,CAAC,cAAc,EACtB,OAAO,CAAC,cAAe,EACvB,OAAO,CAAC,gBAAiB,EACzB,OAAO,CAAC,QAAQ,EAChB,OAAO,CAAC,IAAI,CACb,CAAC;yBACH;6BAAM;4BACL,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;yBAC/C;wBACD,MAAM;qBACP;oBAED,qDAAwC,CAAC,CAAC;wBACxC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;wBACvC,MAAM;qBACP;oBAED,2DAA2C,CAAC,CAAC;wBAC3C,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;wBAC9C,MAAM;qBACP;oBAED,OAAO,CAAC,CAAC;wBACP,OAAO;qBACR;iBACF;gBACD,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC;YACzB,CAAC,GAKF,CAAC;QAEF,4FAA4F;QAC5F,iDAAiD;QACjD,oBAAY,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,EAAE,gBAAgB,CAAC,CAAC;IACzE,CAAC;CACF;AAhHD,gDAgHC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { ITerminalProvider } from '@rushstack/node-core-library';\r\n\r\nimport { RushStackCompilerBase, IRushStackCompilerBaseOptions } from './RushStackCompilerBase';\r\nimport { ApiExtractor } from './index';\r\nimport { LoggingUtilities } from './LoggingUtilities';\r\n\r\n/**\r\n * The ApiExtractorTask uses the api-extractor tool to analyze a project for public APIs. api-extractor will detect\r\n * common problems and generate a report of the exported public API. The task uses the entry point of a project to\r\n * find the aliased exports of the project. An api-extractor.ts file is generated for the project in the temp folder.\r\n * @beta\r\n */\r\nexport class ApiExtractorRunner extends RushStackCompilerBase {\r\n  private _extractorConfig: ApiExtractor.ExtractorConfig;\r\n  private _extractorOptions: ApiExtractor.IExtractorInvokeOptions;\r\n\r\n  public constructor(\r\n    extractorConfig: ApiExtractor.ExtractorConfig,\r\n    extractorOptions: ApiExtractor.IExtractorInvokeOptions,\r\n    rootPath: string,\r\n    terminalProvider: ITerminalProvider\r\n  ); // Remove in the next major version\r\n  public constructor(\r\n    options: IRushStackCompilerBaseOptions,\r\n    extractorConfig: ApiExtractor.ExtractorConfig,\r\n    extractorOptions: ApiExtractor.IExtractorInvokeOptions,\r\n    rootPath: string,\r\n    terminalProvider: ITerminalProvider\r\n  );\r\n  public constructor(\r\n    arg1: IRushStackCompilerBaseOptions | ApiExtractor.ExtractorConfig,\r\n    arg2: ApiExtractor.ExtractorConfig | ApiExtractor.IExtractorInvokeOptions,\r\n    arg3: ApiExtractor.IExtractorInvokeOptions | string,\r\n    arg4: string | ITerminalProvider,\r\n    arg5?: ITerminalProvider\r\n  ) {\r\n    let options: IRushStackCompilerBaseOptions;\r\n    let extractorConfig: ApiExtractor.ExtractorConfig;\r\n    let extractorOptions: ApiExtractor.IExtractorInvokeOptions;\r\n    let rootPath: string;\r\n    let terminalProvider: ITerminalProvider;\r\n    if (arg1 instanceof ApiExtractor.ExtractorConfig) {\r\n      extractorConfig = arg1;\r\n      extractorOptions = arg2 as ApiExtractor.IExtractorInvokeOptions;\r\n      rootPath = arg3 as string;\r\n      terminalProvider = arg4 as ITerminalProvider;\r\n      const loggingUtilities: LoggingUtilities = new LoggingUtilities(terminalProvider);\r\n      options = loggingUtilities.getDefaultRushStackCompilerBaseOptions();\r\n    } else {\r\n      options = arg1;\r\n      extractorConfig = arg2 as ApiExtractor.ExtractorConfig;\r\n      extractorOptions = arg3 as ApiExtractor.IExtractorInvokeOptions;\r\n      rootPath = arg4 as string;\r\n      terminalProvider = arg5 as ITerminalProvider;\r\n    }\r\n\r\n    super(options, rootPath, terminalProvider);\r\n\r\n    this._extractorConfig = extractorConfig;\r\n    this._extractorOptions = extractorOptions;\r\n  }\r\n\r\n  public async invoke(): Promise<void> {\r\n    const extractorOptions: ApiExtractor.IExtractorInvokeOptions = {\r\n      ...this._extractorOptions,\r\n      messageCallback: (message: ApiExtractor.ExtractorMessage) => {\r\n        switch (message.logLevel) {\r\n          case ApiExtractor.ExtractorLogLevel.Error: {\r\n            if (message.sourceFilePath) {\r\n              this._fileError(\r\n                message.sourceFilePath,\r\n                message.sourceFileLine!,\r\n                message.sourceFileColumn!,\r\n                message.category,\r\n                message.text\r\n              );\r\n            } else {\r\n              this._terminal.writeErrorLine(message.text);\r\n            }\r\n\r\n            break;\r\n          }\r\n\r\n          case ApiExtractor.ExtractorLogLevel.Warning: {\r\n            if (message.sourceFilePath) {\r\n              this._fileWarning(\r\n                message.sourceFilePath,\r\n                message.sourceFileLine!,\r\n                message.sourceFileColumn!,\r\n                message.category,\r\n                message.text\r\n              );\r\n            } else {\r\n              this._terminal.writeWarningLine(message.text);\r\n            }\r\n            break;\r\n          }\r\n\r\n          case ApiExtractor.ExtractorLogLevel.Info: {\r\n            this._terminal.writeLine(message.text);\r\n            break;\r\n          }\r\n\r\n          case ApiExtractor.ExtractorLogLevel.Verbose: {\r\n            this._terminal.writeVerboseLine(message.text);\r\n            break;\r\n          }\r\n\r\n          default: {\r\n            return;\r\n          }\r\n        }\r\n        message.handled = true;\r\n      }\r\n      // In the past we configured API Extractor to use the TypeScript runtime declarations from\r\n      // the local compiler, however lately it seems to work better without this option.\r\n      //\r\n      // typescriptCompilerFolder: ToolPaths.typescriptPackagePath\r\n    };\r\n\r\n    // NOTE: ExtractorResult.succeeded indicates whether errors or warnings occurred, however we\r\n    // already handle this above via our customLogger\r\n    ApiExtractor.Extractor.invoke(this._extractorConfig, extractorOptions);\r\n  }\r\n}\r\n"]}