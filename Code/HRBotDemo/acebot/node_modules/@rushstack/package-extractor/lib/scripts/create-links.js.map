{"version":3,"file":"create-links.js","sourceRoot":"","sources":["../../src/scripts/create-links.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\n// THIS SCRIPT IS GENERATED BY THE \"rush deploy\" COMMAND.\n\n/* eslint-disable no-console */\n\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport type { IExtractorMetadataJson } from '../PackageExtractor';\nimport type { IFileSystemCreateLinkOptions } from '@rushstack/node-core-library';\n\n// API borrowed from @rushstack/node-core-library, since this script avoids using any\n// NPM dependencies.\nclass FileSystem {\n  public static createSymbolicLinkJunction(options: IFileSystemCreateLinkOptions): void {\n    fs.symlinkSync(options.linkTargetPath, options.newLinkPath, 'junction');\n  }\n\n  public static createSymbolicLinkFile(options: IFileSystemCreateLinkOptions): void {\n    fs.symlinkSync(options.linkTargetPath, options.newLinkPath, 'file');\n  }\n\n  public static createSymbolicLinkFolder(options: IFileSystemCreateLinkOptions): void {\n    fs.symlinkSync(options.linkTargetPath, options.newLinkPath, 'dir');\n  }\n\n  public static createHardLink(options: IFileSystemCreateLinkOptions): void {\n    fs.linkSync(options.linkTargetPath, options.newLinkPath);\n  }\n}\n\nfunction ensureFolder(folderPath: string): void {\n  if (!folderPath) {\n    return;\n  }\n  if (fs.existsSync(folderPath)) {\n    return;\n  }\n  const parentPath: string = path.dirname(folderPath);\n  if (parentPath && parentPath !== folderPath) {\n    ensureFolder(parentPath);\n  }\n  fs.mkdirSync(folderPath);\n}\n\nfunction removeLinks(targetRootFolder: string, extractorMetadataObject: IExtractorMetadataJson): void {\n  for (const linkInfo of extractorMetadataObject.links) {\n    // Link to the relative path for symlinks\n    const newLinkPath: string = path.join(targetRootFolder, linkInfo.linkPath);\n    if (fs.existsSync(newLinkPath)) {\n      fs.unlinkSync(newLinkPath);\n    }\n  }\n}\n\nfunction createLinks(targetRootFolder: string, extractorMetadataObject: IExtractorMetadataJson): void {\n  for (const linkInfo of extractorMetadataObject.links) {\n    // Link to the relative path for symlinks\n    const newLinkPath: string = path.join(targetRootFolder, linkInfo.linkPath);\n    const linkTargetPath: string = path.join(targetRootFolder, linkInfo.targetPath);\n\n    // Make sure the containing folder exists\n    ensureFolder(path.dirname(newLinkPath));\n\n    // NOTE: This logic is based on NpmLinkManager._createSymlink()\n    if (process.platform === 'win32') {\n      if (linkInfo.kind === 'folderLink') {\n        // For directories, we use a Windows \"junction\".  On Unix, this produces a regular symlink.\n        FileSystem.createSymbolicLinkJunction({ newLinkPath, linkTargetPath });\n      } else {\n        // For files, we use a Windows \"hard link\", because creating a symbolic link requires\n        // administrator permission.\n\n        // NOTE: We cannot use the relative path for hard links\n        FileSystem.createHardLink({ newLinkPath, linkTargetPath });\n      }\n    } else {\n      // However hard links seem to cause build failures on Mac, so for all other operating systems\n      // we use symbolic links for this case.\n      if (linkInfo.kind === 'folderLink') {\n        FileSystem.createSymbolicLinkFolder({ newLinkPath, linkTargetPath });\n      } else {\n        FileSystem.createSymbolicLinkFile({ newLinkPath, linkTargetPath });\n      }\n    }\n  }\n}\n\nfunction showUsage(): void {\n  console.log('Usage:');\n  console.log('  node create-links.js create');\n  console.log('  node create-links.js remove');\n\n  console.log('\\nCreates or removes the symlinks for the output folder created by \"rush deploy\".');\n  console.log('The link information is read from \"extractor-metadata.json\" in the same folder.');\n}\n\nfunction main(): boolean {\n  // Example: [ \"node.exe\", \"create-links.js\", \"\"create\" ]\n  const args: string[] = process.argv.slice(2);\n\n  if (args.length !== 1 || (args[0] !== 'create' && args[0] !== 'remove')) {\n    showUsage();\n    return false;\n  }\n\n  const targetRootFolder: string = __dirname;\n  const extractorMetadataPath: string = path.join(targetRootFolder, 'extractor-metadata.json');\n\n  if (!fs.existsSync(extractorMetadataPath)) {\n    throw new Error('Input file not found: ' + extractorMetadataPath);\n  }\n\n  const extractorMetadataJson: string = fs.readFileSync(extractorMetadataPath).toString();\n  const extractorMetadataObject: IExtractorMetadataJson = JSON.parse(extractorMetadataJson);\n\n  if (args[0] === 'create') {\n    console.log(`\\nCreating links for extraction at path \"${targetRootFolder}\"`);\n    removeLinks(targetRootFolder, extractorMetadataObject);\n    createLinks(targetRootFolder, extractorMetadataObject);\n  } else {\n    console.log(`\\nRemoving links for extraction at path \"${targetRootFolder}\"`);\n    removeLinks(targetRootFolder, extractorMetadataObject);\n  }\n\n  console.log('The operation completed successfully.');\n  return true;\n}\n\ntry {\n  process.exitCode = 1;\n  if (main()) {\n    process.exitCode = 0;\n  }\n} catch (error) {\n  console.log('ERROR: ' + error);\n}\n"]}