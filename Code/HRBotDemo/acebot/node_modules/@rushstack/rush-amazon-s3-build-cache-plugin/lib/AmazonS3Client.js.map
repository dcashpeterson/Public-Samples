{"version":3,"file":"AmazonS3Client.js","sourceRoot":"","sources":["../src/AmazonS3Client.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { Async, Colors, type IColorableSequence, type ITerminal } from '@rushstack/node-core-library';\nimport * as crypto from 'crypto';\nimport * as fetch from 'node-fetch';\n\nimport type { IAmazonS3BuildCacheProviderOptionsAdvanced } from './AmazonS3BuildCacheProvider';\nimport type { IGetFetchOptions, IPutFetchOptions, WebClient } from './WebClient';\nimport { type IAmazonS3Credentials, fromRushEnv } from './AmazonS3Credentials';\n\nconst CONTENT_HASH_HEADER_NAME: 'x-amz-content-sha256' = 'x-amz-content-sha256';\nconst DATE_HEADER_NAME: 'x-amz-date' = 'x-amz-date';\nconst HOST_HEADER_NAME: 'host' = 'host';\nconst SECURITY_TOKEN_HEADER_NAME: 'x-amz-security-token' = 'x-amz-security-token';\n\ninterface IIsoDateString {\n  date: string;\n  dateTime: string;\n}\n\ntype RetryableRequestResponse<T> =\n  | {\n      hasNetworkError: true;\n      error: Error;\n    }\n  | {\n      hasNetworkError: false;\n      response: T;\n    };\n\nconst protocolRegex: RegExp = /^https?:\\/\\//;\nconst portRegex: RegExp = /:(\\d{1,5})$/;\n\n// Similar to https://docs.microsoft.com/en-us/javascript/api/@azure/storage-blob/storageretrypolicytype?view=azure-node-latest\nenum StorageRetryPolicyType {\n  EXPONENTIAL = 0,\n  FIXED = 1\n}\n\n// Similar to https://docs.microsoft.com/en-us/javascript/api/@azure/storage-blob/storageretryoptions?view=azure-node-latest\ninterface IStorageRetryOptions {\n  maxRetryDelayInMs: number;\n  maxTries: number;\n  retryDelayInMs: number;\n  retryPolicyType: StorageRetryPolicyType;\n}\n\nconst storageRetryOptions: IStorageRetryOptions = {\n  maxRetryDelayInMs: 120 * 1000,\n  maxTries: 4,\n  retryDelayInMs: 4 * 1000,\n  retryPolicyType: StorageRetryPolicyType.EXPONENTIAL\n};\n\n/**\n * A helper for reading and updating objects on Amazon S3\n *\n * @public\n */\nexport class AmazonS3Client {\n  private readonly _credentials: IAmazonS3Credentials | undefined;\n  private readonly _s3Endpoint: string;\n  private readonly _s3Region: string;\n\n  private readonly _webClient: WebClient;\n\n  private readonly _terminal: ITerminal;\n\n  public constructor(\n    credentials: IAmazonS3Credentials | undefined,\n    options: IAmazonS3BuildCacheProviderOptionsAdvanced,\n    webClient: WebClient,\n    terminal: ITerminal\n  ) {\n    this._credentials = credentials;\n    this._terminal = terminal;\n\n    this._validateEndpoint(options.s3Endpoint);\n\n    this._s3Endpoint = options.s3Endpoint;\n    this._s3Region = options.s3Region;\n\n    this._webClient = webClient;\n  }\n\n  // https://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-header-based-auth.html#create-signature-presign-entire-payload\n  // We want to keep all slashes non encoded\n  public static UriEncode(input: string): string {\n    let output: string = '';\n    for (let i: number = 0; i < input.length; i += 1) {\n      const ch: string = input[i];\n      if (ch.match(/[A-Za-z0-9~._-]|\\//)) {\n        output += ch;\n      } else {\n        if (ch === ' ') {\n          output += '%20';\n        } else {\n          output += `%${ch.charCodeAt(0).toString(16).toUpperCase()}`;\n        }\n      }\n    }\n    return output;\n  }\n\n  public static tryDeserializeCredentials(\n    credentialString: string | undefined\n  ): IAmazonS3Credentials | undefined {\n    return fromRushEnv(credentialString);\n  }\n\n  public async getObjectAsync(objectName: string): Promise<Buffer | undefined> {\n    this._writeDebugLine('Reading object from S3');\n    return await this._sendCacheRequestWithRetries(async () => {\n      const response: fetch.Response = await this._makeRequestAsync('GET', objectName);\n      if (response.ok) {\n        return {\n          hasNetworkError: false,\n          response: await response.buffer()\n        };\n      } else if (response.status === 404) {\n        return {\n          hasNetworkError: false,\n          response: undefined\n        };\n      } else if (\n        (response.status === 400 || response.status === 401 || response.status === 403) &&\n        !this._credentials\n      ) {\n        // unauthorized due to not providing credentials,\n        // silence error for better DX when e.g. running locally without credentials\n        this._writeWarningLine(\n          `No credentials found and received a ${response.status}`,\n          ' response code from the cloud storage.',\n          ' Maybe run rush update-cloud-credentials',\n          ' or set the RUSH_BUILD_CACHE_CREDENTIAL env'\n        );\n        return {\n          hasNetworkError: false,\n          response: undefined\n        };\n      } else if (response.status === 400 || response.status === 401 || response.status === 403) {\n        throw await this._getS3ErrorAsync(response);\n      } else {\n        const error: Error = await this._getS3ErrorAsync(response);\n        return {\n          hasNetworkError: true,\n          error\n        };\n      }\n    });\n  }\n\n  public async uploadObjectAsync(objectName: string, objectBuffer: Buffer): Promise<void> {\n    if (!this._credentials) {\n      throw new Error('Credentials are required to upload objects to S3.');\n    }\n\n    await this._sendCacheRequestWithRetries(async () => {\n      const response: fetch.Response = await this._makeRequestAsync('PUT', objectName, objectBuffer);\n      if (!response.ok) {\n        return {\n          hasNetworkError: true,\n          error: await this._getS3ErrorAsync(response)\n        };\n      }\n      return {\n        hasNetworkError: false,\n        response: undefined\n      };\n    });\n  }\n\n  private _writeDebugLine(...messageParts: (string | IColorableSequence)[]): void {\n    // if the terminal has been closed then don't bother sending a debug message\n    try {\n      this._terminal.writeDebugLine(...messageParts);\n    } catch (err) {\n      // ignore error\n    }\n  }\n\n  private _writeWarningLine(...messageParts: (string | IColorableSequence)[]): void {\n    // if the terminal has been closed then don't bother sending a warning message\n    try {\n      this._terminal.writeWarningLine(...messageParts);\n    } catch (err) {\n      // ignore error\n    }\n  }\n\n  private async _makeRequestAsync(\n    verb: 'GET' | 'PUT',\n    objectName: string,\n    body?: Buffer\n  ): Promise<fetch.Response> {\n    const isoDateString: IIsoDateString = this._getIsoDateString();\n    const bodyHash: string = this._getSha256(body);\n    const headers: fetch.Headers = new fetch.Headers();\n    headers.set(DATE_HEADER_NAME, isoDateString.dateTime);\n    headers.set(CONTENT_HASH_HEADER_NAME, bodyHash);\n\n    // the host can be e.g. https://s3.aws.com or http://localhost:9000\n    const host: string = this._s3Endpoint.replace(protocolRegex, '');\n    const canonicalUri: string = AmazonS3Client.UriEncode(`/${objectName}`);\n    this._writeDebugLine(Colors.bold('Canonical URI: '), canonicalUri);\n\n    if (this._credentials) {\n      // Compute the authorization header. See https://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-header-based-auth.html\n      const canonicalHeaders: string[] = [\n        `${HOST_HEADER_NAME}:${host}`,\n        `${CONTENT_HASH_HEADER_NAME}:${bodyHash}`,\n        `${DATE_HEADER_NAME}:${isoDateString.dateTime}`\n      ];\n\n      // Handle signing with temporary credentials (via sts:assume-role)\n      if (this._credentials.sessionToken) {\n        canonicalHeaders.push(`${SECURITY_TOKEN_HEADER_NAME}:${this._credentials.sessionToken}`);\n      }\n\n      // the canonical headers must be sorted by header name\n      canonicalHeaders.sort((aHeader, bHeader) => {\n        const aHeaderName: string = aHeader.split(':')[0];\n        const bHeaderName: string = bHeader.split(':')[0];\n        if (aHeaderName < bHeaderName) {\n          return -1;\n        }\n        if (aHeaderName > bHeaderName) {\n          return 1;\n        }\n        return 0;\n      });\n\n      // the singed header names are derived from the canonicalHeaders\n      const signedHeaderNamesString: string = canonicalHeaders\n        .map((header) => {\n          const headerName: string = header.split(':')[0];\n          return headerName;\n        })\n        .join(';');\n\n      // The canonical request looks like this:\n      //  GET\n      // /test.txt\n      //\n      // host:examplebucket.s3.amazonaws.com\n      // range:bytes=0-9\n      // x-amz-content-sha256:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n      // x-amz-date:20130524T000000Z\n      //\n      // host;range;x-amz-content-sha256;x-amz-date\n      // e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n      const canonicalRequest: string = [\n        verb,\n        canonicalUri,\n        '', // we don't use query strings for these requests\n        ...canonicalHeaders,\n        '',\n        signedHeaderNamesString,\n        bodyHash\n      ].join('\\n');\n      const canonicalRequestHash: string = this._getSha256(canonicalRequest);\n\n      const scope: string = `${isoDateString.date}/${this._s3Region}/s3/aws4_request`;\n      // The string to sign looks like this:\n      // AWS4-HMAC-SHA256\n      // 20130524T423589Z\n      // 20130524/us-east-1/s3/aws4_request\n      // 7344ae5b7ee6c3e7e6b0fe0640412a37625d1fbfff95c48bbb2dc43964946972\n      const stringToSign: string = [\n        'AWS4-HMAC-SHA256',\n        isoDateString.dateTime,\n        scope,\n        canonicalRequestHash\n      ].join('\\n');\n\n      const dateKey: Buffer = this._getSha256Hmac(\n        `AWS4${this._credentials.secretAccessKey}`,\n        isoDateString.date\n      );\n      const dateRegionKey: Buffer = this._getSha256Hmac(dateKey, this._s3Region);\n      const dateRegionServiceKey: Buffer = this._getSha256Hmac(dateRegionKey, 's3');\n      const signingKey: Buffer = this._getSha256Hmac(dateRegionServiceKey, 'aws4_request');\n      const signature: string = this._getSha256Hmac(signingKey, stringToSign, 'hex');\n\n      const authorizationHeader: string = `AWS4-HMAC-SHA256 Credential=${this._credentials.accessKeyId}/${scope},SignedHeaders=${signedHeaderNamesString},Signature=${signature}`;\n\n      headers.set('Authorization', authorizationHeader);\n      if (this._credentials.sessionToken) {\n        // Handle signing with temporary credentials (via sts:assume-role)\n        headers.set('X-Amz-Security-Token', this._credentials.sessionToken);\n      }\n    }\n\n    const webFetchOptions: IGetFetchOptions | IPutFetchOptions = {\n      verb,\n      headers\n    };\n    if (verb === 'PUT') {\n      (webFetchOptions as IPutFetchOptions).body = body;\n    }\n\n    const url: string = `${this._s3Endpoint}${canonicalUri}`;\n\n    this._writeDebugLine(Colors.bold(Colors.underline('Sending request to S3')));\n    this._writeDebugLine(Colors.bold('HOST: '), url);\n    this._writeDebugLine(Colors.bold('Headers: '));\n    headers.forEach((value, name) => {\n      this._writeDebugLine(Colors.cyan(`\\t${name}: ${value}`));\n    });\n\n    const response: fetch.Response = await this._webClient.fetchAsync(url, webFetchOptions);\n\n    return response;\n  }\n\n  public _getSha256Hmac(key: string | Buffer, data: string): Buffer;\n  public _getSha256Hmac(key: string | Buffer, data: string, encoding: 'hex'): string;\n  public _getSha256Hmac(key: string | Buffer, data: string, encoding?: 'hex'): Buffer | string {\n    const hash: crypto.Hmac = crypto.createHmac('sha256', key);\n    hash.update(data);\n    if (encoding) {\n      return hash.digest(encoding);\n    } else {\n      return hash.digest();\n    }\n  }\n\n  private _getSha256(data?: string | Buffer): string {\n    if (data) {\n      const hash: crypto.Hash = crypto.createHash('sha256');\n      hash.update(data);\n      return hash.digest('hex');\n    } else {\n      // This is the null SHA256 hash\n      return 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855';\n    }\n  }\n\n  private _getIsoDateString(date: Date = new Date()): IIsoDateString {\n    let dateString: string = date.toISOString();\n    dateString = dateString.replace(/[-:]/g, ''); // Remove separator characters\n    dateString = dateString.substring(0, 15); // Drop milliseconds\n\n    // dateTime is an ISO8601 date. It looks like \"20130524T423589\"\n    // date is an ISO date. It looks like \"20130524\"\n    return {\n      dateTime: `${dateString}Z`,\n      date: dateString.substring(0, 8)\n    };\n  }\n\n  private async _safeReadResponseText(response: fetch.Response): Promise<string | undefined> {\n    try {\n      return await response.text();\n    } catch (err) {\n      // ignore the error\n    }\n    return undefined;\n  }\n\n  private async _getS3ErrorAsync(response: fetch.Response): Promise<Error> {\n    const text: string | undefined = await this._safeReadResponseText(response);\n    return new Error(\n      `Amazon S3 responded with status code ${response.status} (${response.statusText})${\n        text ? `\\n${text}` : ''\n      }`\n    );\n  }\n\n  /**\n   * Validates a S3 endpoint which is http(s):// + hostname + port. Hostname validated according to RFC 1123\n   * {@link https://docs.aws.amazon.com/general/latest/gr/s3.html}\n   */\n  private _validateEndpoint(s3Endpoint: string): void {\n    let host: string = s3Endpoint;\n\n    if (!s3Endpoint) {\n      throw new Error('A S3 endpoint must be provided');\n    }\n\n    if (!s3Endpoint.match(protocolRegex)) {\n      throw new Error('The S3 endpoint must start with https:// or http://');\n    }\n\n    host = host.replace(protocolRegex, '');\n\n    if (host.match(/\\//)) {\n      throw new Error('The path should be omitted from the endpoint. Use s3Prefix to specify a path');\n    }\n\n    const portMatch: RegExpMatchArray | null = s3Endpoint.match(portRegex);\n    if (portMatch) {\n      const port: number = Number(portMatch[1]);\n      if (Number.isNaN(port) || port > 65535) {\n        throw new Error(`Port: ${port} is an invalid port number`);\n      }\n      host = host.replace(portRegex, '');\n    }\n\n    if (host.endsWith('.')) {\n      host = host.slice(0, host.length - 1);\n    }\n\n    if (host.length > 253) {\n      throw new Error(\n        'The S3 endpoint is too long. RFC 1123 specifies a hostname should be no longer than 253 characters.'\n      );\n    }\n\n    const subDomains: string[] = host.split('.');\n\n    const subDomainRegex: RegExp = /^[a-zA-Z0-9-]+$/;\n    const isValid: boolean = subDomains.every((subDomain) => {\n      return (\n        subDomainRegex.test(subDomain) &&\n        subDomain.length < 64 &&\n        !subDomain.startsWith('-') &&\n        !subDomain.endsWith('-')\n      );\n    });\n\n    if (!isValid) {\n      throw new Error(\n        'Invalid S3 endpoint. Some part of the hostname contains invalid characters or is too long'\n      );\n    }\n  }\n\n  private async _sendCacheRequestWithRetries<T>(\n    sendRequest: () => Promise<RetryableRequestResponse<T>>\n  ): Promise<T> {\n    const response: RetryableRequestResponse<T> = await sendRequest();\n\n    const log: (...messageParts: (string | IColorableSequence)[]) => void = this._writeDebugLine.bind(this);\n\n    if (response.hasNetworkError) {\n      if (storageRetryOptions && storageRetryOptions.maxTries > 1) {\n        log('Network request failed. Will retry request as specified in storageRetryOptions');\n        async function retry(retryAttempt: number): Promise<T> {\n          const { retryDelayInMs, retryPolicyType, maxTries, maxRetryDelayInMs } = storageRetryOptions;\n          let delay: number = retryDelayInMs;\n          if (retryPolicyType === StorageRetryPolicyType.EXPONENTIAL) {\n            delay = retryDelayInMs * Math.pow(2, retryAttempt - 1);\n          }\n          delay = Math.min(maxRetryDelayInMs, delay);\n\n          log(`Will retry request in ${delay}s...`);\n          await Async.sleep(delay);\n          const retryResponse: RetryableRequestResponse<T> = await sendRequest();\n\n          if (retryResponse.hasNetworkError) {\n            if (retryAttempt < maxTries - 1) {\n              log('The retried request failed, will try again');\n              return retry(retryAttempt + 1);\n            } else {\n              log('The retried request failed and has reached the maxTries limit');\n              throw retryResponse.error;\n            }\n          }\n\n          return retryResponse.response;\n        }\n        return retry(1);\n      } else {\n        log('Network request failed and storageRetryOptions is not specified');\n        throw response.error;\n      }\n    }\n\n    return response.response;\n  }\n}\n"]}