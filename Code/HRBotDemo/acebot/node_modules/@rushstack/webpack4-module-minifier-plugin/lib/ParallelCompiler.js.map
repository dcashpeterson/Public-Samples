{"version":3,"file":"ParallelCompiler.js","sourceRoot":"","sources":["../src/ParallelCompiler.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { cpus } from 'os';\nimport { resolve } from 'path';\nimport type { Worker } from 'worker_threads';\n\nimport type { Configuration } from 'webpack';\n\nimport type {\n  IMinifierConnection,\n  IModuleMinificationRequest,\n  IModuleMinificationResult,\n  MinifyOptions\n} from '@rushstack/module-minifier';\nimport { WorkerPoolMinifier } from '@rushstack/module-minifier';\nimport { WorkerPool } from '@rushstack/worker-pool';\n\nexport interface IParallelWebpackOptions {\n  cacheDirectory?: string;\n  configFilePath: string;\n  maxCompilationThreads?: number;\n  sourceMap?: boolean | undefined;\n  terserOptions?: MinifyOptions;\n  usePortableModules?: boolean;\n}\n\nconst ZERO: bigint = BigInt(0);\nconst THOUSAND: bigint = BigInt(1e3);\n\n/**\n * Formats a delta of `process.hrtime.bigint()` values as a string\n * @param timeNs\n */\nfunction formatTime(timeNs: bigint): string {\n  let unit: string = 'ns';\n  let fraction: bigint = ZERO;\n  if (timeNs > THOUSAND) {\n    unit = 'us';\n    fraction = timeNs % THOUSAND;\n    timeNs /= THOUSAND;\n  }\n  if (timeNs > THOUSAND) {\n    unit = 'ms';\n    fraction = timeNs % THOUSAND;\n    timeNs /= THOUSAND;\n  }\n  if (timeNs > THOUSAND) {\n    unit = 's';\n    fraction = timeNs % THOUSAND;\n    timeNs /= THOUSAND;\n  }\n\n  return `${timeNs}.${('000' + fraction).slice(-3, -1)} ${unit}`;\n}\n\nexport async function runParallel(options: IParallelWebpackOptions): Promise<void> {\n  const resolvedPath: string = resolve(options.configFilePath);\n\n  const rawConfig: Configuration | Configuration[] = require(resolvedPath); // eslint-disable-line @typescript-eslint/no-var-requires\n  const configArray: Configuration[] = Array.isArray(rawConfig) ? rawConfig : [rawConfig];\n  const configCount: number = configArray.length;\n\n  const totalCpus: number = cpus().length;\n\n  // TODO: Use all cores if not minifying\n  const {\n    maxCompilationThreads: maxConfiguredCompilationThreads = Math.max(\n      totalCpus > 8 ? (totalCpus * 3) >> 2 : totalCpus >> 1,\n      1\n    ),\n    sourceMap,\n    usePortableModules\n  } = options;\n\n  const maxCompilationThreads: number = Math.min(configCount, maxConfiguredCompilationThreads);\n\n  const maxCompressionThreads: number = Math.max(1, totalCpus - maxCompilationThreads);\n\n  const minifier: WorkerPoolMinifier = new WorkerPoolMinifier({\n    terserOptions: options.terserOptions,\n    maxThreads: maxCompressionThreads\n  });\n\n  const minifierConnection: IMinifierConnection = await minifier.connect();\n\n  const webpackPool: WorkerPool = new WorkerPool({\n    id: 'Webpack',\n    maxWorkers: maxCompilationThreads,\n    onWorkerDestroyed: (): void => {\n      // Allocate the webpack worker to terser\n      minifier.maxThreads++;\n    },\n    workerScriptPath: require.resolve('./workerPool/WebpackWorker'),\n    workerData: {\n      configFilePath: resolvedPath,\n      sourceMap,\n      usePortableModules\n    }\n  });\n\n  let processed: number = 0;\n  const startTime: bigint = process.hrtime.bigint();\n\n  for (let i: number = 0; i < configCount; i++) {\n    const webpackWorker: Worker = await webpackPool.checkoutWorkerAsync(true);\n\n    const sendMinifierResult: (result: IModuleMinificationResult) => void = (\n      result: IModuleMinificationResult\n    ): void => {\n      webpackWorker.postMessage(result);\n    };\n\n    const workerOnMessage: (message: IModuleMinificationRequest | number) => void = (\n      message: IModuleMinificationRequest | string | number\n    ): void => {\n      if (message === 'getConfigHash') {\n        webpackWorker.postMessage(minifierConnection.configHash);\n        return;\n      }\n\n      if (typeof message === 'object') {\n        return minifier.minify(message, sendMinifierResult);\n      }\n\n      ++processed;\n      // eslint-disable-next-line no-console\n      console.log(\n        `${processed}/${configCount} complete (${formatTime(process.hrtime.bigint() - startTime)})`\n      );\n\n      webpackWorker.off('message', workerOnMessage);\n      webpackPool.checkinWorker(webpackWorker);\n    };\n\n    webpackWorker.on('message', workerOnMessage);\n    webpackWorker.postMessage(i);\n  }\n\n  await webpackPool.finishAsync();\n\n  await minifierConnection.disconnect();\n}\n"]}