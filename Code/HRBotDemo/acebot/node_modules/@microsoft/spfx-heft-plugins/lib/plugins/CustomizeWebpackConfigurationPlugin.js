"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = __importStar(require("path"));
const node_core_library_1 = require("@rushstack/node-core-library");
const PluginNames_1 = require("./PluginNames");
const WEBPACK4_PLUGIN_NAME = 'webpack4-plugin';
/**
 * @internal
 */
class CustomizeWebpackConfigurationPlugin {
    apply(taskSession, heftConfiguration, options) {
        taskSession.requestAccessToPluginByName('@rushstack/heft-webpack4-plugin', WEBPACK4_PLUGIN_NAME, (accessor) => {
            accessor.hooks.onConfigure.tapPromise({
                name: PluginNames_1.CustomizeWebpackConfigPlugin,
                stage: Number.MAX_SAFE_INTEGER // Make sure this runs last
            }, async (webpackConfiguration) => {
                await this._updateWebpackConfigurationAsync(taskSession, heftConfiguration, webpackConfiguration, options.customizationFilename);
            });
        });
    }
    async _updateWebpackConfigurationAsync(taskSession, heftConfiguration, webpackConfiguration, customizationFilename) {
        const scopedLogger = taskSession.logger;
        const customizeConfigFilePath = path.join(heftConfiguration.projectConfigFolderPath, customizationFilename);
        const customizeConfigFileExists = await node_core_library_1.FileSystem.existsAsync(customizeConfigFilePath);
        if (customizeConfigFileExists) {
            if (!webpackConfiguration) {
                scopedLogger.emitError(new Error('A webpack configuration must be provided.'));
            }
            else {
                let scriptExport;
                try {
                    scriptExport = require(customizeConfigFilePath);
                }
                catch (e) {
                    scopedLogger.emitError(new Error(`Error importing webpack customization script "${customizeConfigFilePath}": ${e}`));
                    return;
                }
                const scriptExportNotDefault = scriptExport;
                const scriptExportAsDefault = scriptExport.default;
                if (typeof scriptExport !== 'function' && typeof scriptExportAsDefault !== 'function') {
                    scopedLogger.emitError(new Error('A webpack configuration customization script must export a function ' +
                        'that takes a webpack configuration to tweak.'));
                    return;
                }
                const functionToExecute = scriptExportAsDefault || scriptExportNotDefault;
                try {
                    functionToExecute(webpackConfiguration, taskSession, heftConfiguration);
                }
                catch (e) {
                    scopedLogger.emitError(new Error(`An error occurred during webpack configuration customization: ${e}`));
                }
            }
        }
    }
}
exports.default = CustomizeWebpackConfigurationPlugin;
//# sourceMappingURL=CustomizeWebpackConfigurationPlugin.js.map