"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
exports.ToolPaths = void 0;
const node_core_library_1 = require("@rushstack/node-core-library");
const path = require("path");
/**
 * @beta
 */
class ToolPaths {
    static get typescriptPackagePath() {
        if (!ToolPaths._typescriptPackagePath) {
            ToolPaths._typescriptPackagePath = ToolPaths._getPackagePath('typescript');
            if (!ToolPaths._typescriptPackagePath) {
                throw new Error('Unable to find "typescript" package.');
            }
        }
        return ToolPaths._typescriptPackagePath;
    }
    static get typescriptPackageJson() {
        if (!ToolPaths._typescriptPackageJson) {
            ToolPaths._typescriptPackageJson = node_core_library_1.PackageJsonLookup.instance.loadPackageJson(path.join(ToolPaths.typescriptPackagePath, 'package.json'));
        }
        return ToolPaths._typescriptPackageJson;
    }
    static get eslintPackagePath() {
        if (!ToolPaths._eslintPackagePath) {
            ToolPaths._eslintPackagePath = ToolPaths._getPackagePath('eslint');
            if (!ToolPaths._eslintPackagePath) {
                throw new Error('Unable to find "eslint" package.');
            }
        }
        return ToolPaths._eslintPackagePath;
    }
    static get eslintPackageJson() {
        if (!ToolPaths._eslintPackageJson) {
            ToolPaths._eslintPackageJson = node_core_library_1.PackageJsonLookup.instance.loadPackageJson(path.join(ToolPaths.eslintPackagePath, 'package.json'));
        }
        return ToolPaths._eslintPackageJson;
    }
    static get tslintPackagePath() {
        if (!ToolPaths._tslintPackagePath) {
            ToolPaths._tslintPackagePath = ToolPaths._getPackagePath('tslint');
            if (!ToolPaths._tslintPackagePath) {
                const typeScriptPackageVersion = this.typescriptPackageJson.version;
                const typeScriptMajorVersion = Number(typeScriptPackageVersion.substr(0, typeScriptPackageVersion.indexOf('.')));
                if (typeScriptMajorVersion >= 4) {
                    throw new Error('TSLint is not supported for rush-stack-compiler-4.X packages.');
                }
                else {
                    throw new Error('Unable to find "tslint" package.');
                }
            }
        }
        return ToolPaths._tslintPackagePath;
    }
    static get tslintPackageJson() {
        if (!ToolPaths._tslintPackageJson) {
            ToolPaths._tslintPackageJson = node_core_library_1.PackageJsonLookup.instance.loadPackageJson(path.join(ToolPaths.tslintPackagePath, 'package.json'));
        }
        return ToolPaths._tslintPackageJson;
    }
    static get apiExtractorPackagePath() {
        if (!ToolPaths._apiExtractorPackagePath) {
            ToolPaths._apiExtractorPackagePath = ToolPaths._getPackagePath('@microsoft/api-extractor');
            if (!ToolPaths._apiExtractorPackagePath) {
                throw new Error('Unable to find "@microsoft/api-extractor" package.');
            }
        }
        return ToolPaths._apiExtractorPackagePath;
    }
    static get apiExtractorPackageJson() {
        if (!ToolPaths._apiExtractorPackageJson) {
            ToolPaths._apiExtractorPackageJson = node_core_library_1.PackageJsonLookup.instance.loadPackageJson(path.join(ToolPaths.apiExtractorPackagePath, 'package.json'));
        }
        return ToolPaths._apiExtractorPackageJson;
    }
    static _getPackagePath(packageName) {
        const packageJsonPath = ToolPaths._getPackageJsonPath(packageName);
        return packageJsonPath ? path.dirname(packageJsonPath) : undefined;
    }
    static _getPackageJsonPath(packageName) {
        const lookup = new node_core_library_1.PackageJsonLookup();
        const mainEntryPath = require.resolve(packageName);
        return lookup.tryGetPackageJsonFilePathFor(mainEntryPath);
    }
}
exports.ToolPaths = ToolPaths;
//# sourceMappingURL=ToolPaths.js.map