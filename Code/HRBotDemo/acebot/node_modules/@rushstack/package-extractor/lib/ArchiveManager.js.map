{"version":3,"file":"ArchiveManager.js","sourceRoot":"","sources":["../src/ArchiveManager.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;AAE3D,kDAA0B;AAC1B,oEAAsF;AAEtF,2GAA2G;AAC3G,MAAM,wBAAwB,GAAW,KAAK,CAAC;AAC/C,0EAA0E;AAC1E,yFAAyF;AACzF,6GAA6G;AAC7G,sCAAsC;AACtC,MAAM,yBAAyB,GAAW,QAAQ,GAAG,wBAAwB,CAAC;AAS9E,MAAa,cAAc;IAA3B;QACU,SAAI,GAAU,IAAI,eAAK,EAAE,CAAC;IAwCpC,CAAC;IAtCQ,KAAK,CAAC,iBAAiB,CAAC,OAA6B;;QAC1D,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,WAAW,EAAE,GAAG,OAAO,CAAC;QAEpD,IAAI,IAAqB,CAAC;QAC1B,IAAI,WAAmB,CAAC;QACxB,IAAI,QAAQ,EAAE;YACZ,MAAM,KAAK,GAAoB,MAAA,OAAO,CAAC,KAAK,mCAAI,CAAC,MAAM,8BAAU,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC,CAAC;YACpG,IAAI,KAAK,CAAC,cAAc,EAAE,EAAE;gBAC1B,IAAI,GAAG,MAAM,8BAAU,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;gBAChD,WAAW,GAAG,yBAAyB,CAAC;aACzC;iBAAM,IAAI,KAAK,CAAC,WAAW,EAAE,EAAE;gBAC9B,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;aAC/D;iBAAM;gBACL,IAAI,GAAG,MAAM,8BAAU,CAAC,qBAAqB,CAAC,QAAQ,CAAC,CAAC;gBACxD,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC;aAC1B;SACF;aAAM,IAAI,QAAQ,EAAE;YACnB,IAAI,GAAG,QAAQ,CAAC;YAChB,WAAW,GAAG,wBAAwB,CAAC;SACxC;aAAM;YACL,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;SACjE;QAED,sCAAsC;QACtC,MAAM,OAAO,GAAW,wBAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;QAC3D,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE;YAC5B,eAAe,EAAE,WAAW;YAC5B,GAAG,EAAE,KAAK;SACX,CAAC,CAAC;IACL,CAAC;IAEM,KAAK,CAAC,kBAAkB,CAAC,eAAuB;QACrD,MAAM,UAAU,GAAW,MAAM,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC;YACvD,IAAI,EAAE,YAAY;YAClB,QAAQ,EAAE,MAAM;SACjB,CAAC,CAAC;QACH,MAAM,8BAAU,CAAC,cAAc,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC;IAC/D,CAAC;CACF;AAzCD,wCAyCC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport JSZip from 'jszip';\nimport { FileSystem, type FileSystemStats, Path } from '@rushstack/node-core-library';\n\n// 755 are default permissions to allow read/write/execute for owner and read/execute for group and others.\nconst DEFAULT_FILE_PERMISSIONS: number = 0o755;\n// This value sets the allowed permissions when preserving symbolic links.\n// 120000 is the symbolic link identifier, and is OR'd with the default file permissions.\n// See: https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/include/uapi/linux/stat.h#n10\n// eslint-disable-next-line no-bitwise\nconst SYMBOLIC_LINK_PERMISSIONS: number = 0o120000 | DEFAULT_FILE_PERMISSIONS;\n\nexport interface IAddToArchiveOptions {\n  filePath?: string;\n  fileData?: Buffer | string;\n  archivePath: string;\n  stats?: FileSystemStats;\n}\n\nexport class ArchiveManager {\n  private _zip: JSZip = new JSZip();\n\n  public async addToArchiveAsync(options: IAddToArchiveOptions): Promise<void> {\n    const { filePath, fileData, archivePath } = options;\n\n    let data: Buffer | string;\n    let permissions: number;\n    if (filePath) {\n      const stats: FileSystemStats = options.stats ?? (await FileSystem.getLinkStatisticsAsync(filePath));\n      if (stats.isSymbolicLink()) {\n        data = await FileSystem.readLinkAsync(filePath);\n        permissions = SYMBOLIC_LINK_PERMISSIONS;\n      } else if (stats.isDirectory()) {\n        throw new Error('Directories cannot be added to the archive');\n      } else {\n        data = await FileSystem.readFileToBufferAsync(filePath);\n        permissions = stats.mode;\n      }\n    } else if (fileData) {\n      data = fileData;\n      permissions = DEFAULT_FILE_PERMISSIONS;\n    } else {\n      throw new Error('Either filePath or fileData must be provided');\n    }\n\n    // Replace backslashes for Unix compat\n    const addPath: string = Path.convertToSlashes(archivePath);\n    this._zip.file(addPath, data, {\n      unixPermissions: permissions,\n      dir: false\n    });\n  }\n\n  public async createArchiveAsync(archiveFilePath: string): Promise<void> {\n    const zipContent: Buffer = await this._zip.generateAsync({\n      type: 'nodebuffer',\n      platform: 'UNIX'\n    });\n    await FileSystem.writeFileAsync(archiveFilePath, zipContent);\n  }\n}\n"]}