{"version":3,"file":"typedef-var.test.js","sourceRoot":"","sources":["../src/typedef-var.test.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,8EAAoE;AACpE,+CAA2C;AAE3C,MAAM,EAAE,UAAU,EAAE,GAAG,gCAAW,CAAC;AACnC,MAAM,UAAU,GAAG,IAAI,UAAU,CAAC;IAChC,MAAM,EAAE,2BAA2B;CACpC,CAAC,CAAC;AAEH,UAAU,CAAC,GAAG,CAAC,aAAa,EAAE,wBAAU,EAAE;IACxC,OAAO,EAAE;QACP;YACE,IAAI,EAAE,gBAAgB;YACtB,MAAM,EAAE,CAAC,EAAE,SAAS,EAAE,wBAAwB,EAAE,CAAC;SAClD;QACD;YACE,IAAI,EAAE,cAAc;YACpB,MAAM,EAAE,CAAC,EAAE,SAAS,EAAE,wBAAwB,EAAE,CAAC;SAClD;QACD;YACE,IAAI,EAAE,cAAc;YACpB,MAAM,EAAE,CAAC,EAAE,SAAS,EAAE,wBAAwB,EAAE,CAAC;SAClD;QACD;YACE,IAAI,EAAE,oBAAoB;YAC1B,MAAM,EAAE,CAAC,EAAE,SAAS,EAAE,wBAAwB,EAAE,CAAC;SAClD;KACF;IACD,KAAK,EAAE;QACL;YACE,IAAI,EAAE,iCAAiC;SACxC;QACD;YACE,IAAI,EAAE,qCAAqC;SAC5C;QACD;YACE,IAAI,EAAE,yCAAyC;SAChD;QACD;YACE,IAAI,EAAE,yBAAyB;SAChC;QACD;YACE,kBAAkB;YAClB,IAAI,EAAE;gBACJ,mBAAmB;gBACnB,WAAW;gBACX,UAAU;gBACV,GAAG;aACJ,CAAC,IAAI,CAAC,IAAI,CAAC;SACb;QACD;YACE,kBAAkB;YAClB,IAAI,EAAE;gBACJ,WAAW;gBACX,sBAAsB;gBACtB,oBAAoB;gBACpB,KAAK;gBACL,GAAG;aACJ,CAAC,IAAI,CAAC,IAAI,CAAC;SACb;QACD;YACE,kBAAkB;YAClB,IAAI,EAAE;gBACJ,WAAW;gBACX,4BAA4B;gBAC5B,oBAAoB;gBACpB,KAAK;gBACL,GAAG;aACJ,CAAC,IAAI,CAAC,IAAI,CAAC;SACb;KACF;CACF,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { ESLintUtils } from '@typescript-eslint/experimental-utils';\r\nimport { typedefVar } from './typedef-var';\r\n\r\nconst { RuleTester } = ESLintUtils;\r\nconst ruleTester = new RuleTester({\r\n  parser: '@typescript-eslint/parser'\r\n});\r\n\r\nruleTester.run('typedef-var', typedefVar, {\r\n  invalid: [\r\n    {\r\n      code: 'const x = 123;',\r\n      errors: [{ messageId: 'expected-typedef-named' }]\r\n    },\r\n    {\r\n      code: 'let x = 123;',\r\n      errors: [{ messageId: 'expected-typedef-named' }]\r\n    },\r\n    {\r\n      code: 'var x = 123;',\r\n      errors: [{ messageId: 'expected-typedef-named' }]\r\n    },\r\n    {\r\n      code: '{ const x = 123; }',\r\n      errors: [{ messageId: 'expected-typedef-named' }]\r\n    }\r\n  ],\r\n  valid: [\r\n    {\r\n      code: 'function f() { const x = 123; }'\r\n    },\r\n    {\r\n      code: 'const f = () => { const x = 123; };'\r\n    },\r\n    {\r\n      code: 'const f = function() { const x = 123; }'\r\n    },\r\n    {\r\n      code: 'for (const x of []) { }'\r\n    },\r\n    {\r\n      // prettier-ignore\r\n      code: [\r\n        'let { a , b } = {',\r\n        '  a: 123,',\r\n        '  b: 234',\r\n        '}',\r\n      ].join('\\n')\r\n    },\r\n    {\r\n      // prettier-ignore\r\n      code: [\r\n        'class C {',\r\n        '  public m(): void {',\r\n        '    const x = 123;',\r\n        '  }',\r\n        '}',\r\n      ].join('\\n')\r\n    },\r\n    {\r\n      // prettier-ignore\r\n      code: [\r\n        'class C {',\r\n        '  public m = (): void => {',\r\n        '    const x = 123;',\r\n        '  }',\r\n        '}',\r\n      ].join('\\n')\r\n    }\r\n  ]\r\n});\r\n"]}