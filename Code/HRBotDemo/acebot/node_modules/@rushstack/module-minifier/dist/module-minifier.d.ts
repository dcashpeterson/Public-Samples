/**
 * This library wraps terser in convenient handles for parallelization.
 * It powers `@rushstack/webpack4-module-minifier-plugin` and `@rushstack/webpack5-module-minifier-plugin`
 * but has no coupling with webpack.
 *
 * @packageDocumentation
 */

/// <reference types="node" />

import type { MessagePort as MessagePort_2 } from 'worker_threads';
import { MinifyOptions } from 'terser';
import type { RawSourceMap } from 'source-map';

/**
 * Gets a base54 string suitable for use as a JavaScript identifier, omitting those that are valid ECMAScript keywords
 *
 * @param ordinal - The number to convert to a base54 identifier
 *
 * @public
 */
export declare function getIdentifier(ordinal: number): string;

/**
 * Options for configuring the LocalMinifier
 * @public
 */
export declare interface ILocalMinifierOptions {
    terserOptions?: MinifyOptions;
}

/**
 * Metadata from the minifier for the plugin
 * @public
 */
export declare interface IMinifierConnection {
    /**
     * Hash of the configuration of this minifier, for cache busting.
     */
    configHash: string;
    /**
     * Callback to be invoked when done with the minifier
     */
    disconnect(): Promise<void>;
}

/**
 * Callback passed to a minifier function
 * @public
 */
export declare interface IModuleMinificationCallback {
    (result: IModuleMinificationResult): void;
}

/**
 * Result from the minifier function when an error is encountered.
 * @public
 */
export declare interface IModuleMinificationErrorResult {
    /**
     * Identity of the request
     */
    hash: string;
    /**
     * The error encountered, to be added to the current compilation's error collection.
     */
    error: Error;
    /**
     * Marker property to always return the same result shape.
     */
    code?: undefined;
    /**
     * Marker property to always return the same result shape.
     */
    map?: undefined;
}

/**
 * Request to the minifier
 * @public
 */
export declare interface IModuleMinificationRequest {
    /**
     * Identity of the request. Will be included in the response.
     */
    hash: string;
    /**
     * The raw code fragment
     */
    code: string;
    /**
     * File name to show for the source code in the source map
     */
    nameForMap: string | undefined;
    /**
     * Reserved variable names, e.g. __WEBPACK_EXTERNAL_MODULE_1__
     */
    externals: string[] | undefined;
}

/**
 * Result from the minifier.
 * @public
 */
export declare type IModuleMinificationResult = IModuleMinificationErrorResult | IModuleMinificationSuccessResult;

/**
 * Result from the minifier on a successful minification.
 * @public
 */
export declare interface IModuleMinificationSuccessResult {
    /**
     * Identity of the request
     */
    hash: string;
    /**
     * The error property being `undefined` indicates success.
     */
    error: undefined;
    /**
     * The minified code.
     */
    code: string;
    /**
     * Marker property to always return the same result shape.
     */
    map?: RawSourceMap;
}

/**
 * Object that can be invoked to minify code.
 * @public
 */
export declare interface IModuleMinifier {
    /**
     * Asynchronously minify a module
     */
    minify: IModuleMinifierFunction;
    /**
     * Prevents the minifier from shutting down until the returned `disconnect()` callback is invoked.
     * The callback may be used to surface errors encountered by the minifier that may not be relevant to a specific file.
     * It should be called to allow the minifier to cleanup
     */
    connect(): Promise<IMinifierConnection>;
}

/**
 * An async function called to minify a chunk of code
 * @public
 */
export declare interface IModuleMinifierFunction {
    (request: IModuleMinificationRequest, callback: IModuleMinificationCallback): void;
}

/**
 * Options for configuring the WorkerPoolMinifier
 * @public
 */
export declare interface IWorkerPoolMinifierOptions {
    /**
     * Maximum number of worker threads to use. Will never use more than there are modules to process.
     * Defaults to os.cpus().length
     */
    maxThreads?: number;
    /**
     * The options to forward to Terser.
     * `output.comments` is currently not configurable and will always extract license comments to a separate file.
     */
    terserOptions?: MinifyOptions;
    /**
     * If true, log to the console about the minification results.
     */
    verbose?: boolean;
}

/**
 * Minifier implementation that minifies code on the main thread.
 * @public
 */
export declare class LocalMinifier implements IModuleMinifier {
    private readonly _terserOptions;
    private readonly _resultCache;
    private readonly _configHash;
    constructor(options: ILocalMinifierOptions);
    /**
     * Transform that invokes Terser on the main thread
     * @param request - The request to process
     * @param callback - The callback to invoke
     */
    minify(request: IModuleMinificationRequest, callback: IModuleMinificationCallback): void;
    connect(): Promise<IMinifierConnection>;
}

/**
 * Minifier implementation that outsources requests to the other side of a MessagePort
 * @public
 */
export declare class MessagePortMinifier implements IModuleMinifier {
    readonly port: MessagePort_2;
    private readonly _callbacks;
    constructor(port: MessagePort_2);
    /**
     * No-op code transform.
     * @param request - The request to process
     * @param callback - The callback to invoke
     */
    minify(request: IModuleMinificationRequest, callback: IModuleMinificationCallback): void;
    connect(): Promise<IMinifierConnection>;
}

export { MinifyOptions }

/**
 * Minifies a single chunk of code. Factored out for reuse between WorkerPoolMinifier and LocalMinifier
 * @internal
 */
export declare function _minifySingleFileAsync(request: IModuleMinificationRequest, terserOptions: MinifyOptions): Promise<IModuleMinificationResult>;

/**
 * Minifier implementation that does not actually transform the code, for debugging.
 * @public
 */
export declare class NoopMinifier implements IModuleMinifier {
    /**
     * No-op code transform.
     * @param request - The request to process
     * @param callback - The callback to invoke
     */
    minify(request: IModuleMinificationRequest, callback: IModuleMinificationCallback): void;
    connect(): Promise<IMinifierConnection>;
}

/**
 * Minifier implementation that uses a thread pool for minification.
 * @public
 */
export declare class WorkerPoolMinifier implements IModuleMinifier {
    private readonly _pool;
    private readonly _verbose;
    private readonly _configHash;
    private _refCount;
    private _deduped;
    private _minified;
    private readonly _resultCache;
    private readonly _activeRequests;
    constructor(options: IWorkerPoolMinifierOptions);
    get maxThreads(): number;
    set maxThreads(threads: number);
    /**
     * Transform code by farming it out to a worker pool.
     * @param request - The request to process
     * @param callback - The callback to invoke
     */
    minify(request: IModuleMinificationRequest, callback: IModuleMinificationCallback): void;
    connect(): Promise<IMinifierConnection>;
}

export { }
