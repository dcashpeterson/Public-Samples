"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
Object.defineProperty(exports, "__esModule", { value: true });
exports.IconPicker = void 0;
var tslib_1 = require("tslib");
var Panel_1 = require("@fluentui/react/lib/Panel");
var SearchBox_1 = require("@fluentui/react/lib/SearchBox");
var React = tslib_1.__importStar(require("react"));
var office_ui_fabric_react_bundle_1 = require("@ms/office-ui-fabric-react-bundle");
var sp_lodash_subset_1 = require("@microsoft/sp-lodash-subset");
var sp_component_utilities_1 = require("@ms/sp-component-utilities");
var IconItem_1 = require("./IconItem");
var KillSwitches_1 = require("../../../common/KillSwitches");
var IconPicker_module_scss_1 = tslib_1.__importDefault(require("./IconPicker.module.scss"));
var IconPickerStrings_resx_1 = tslib_1.__importDefault(require("./IconPickerStrings.resx"));
var ICONS_GLOBAL_SETTINGS_NAME = 'icons';
var FABRIC_MDL2_ICONS_FONT_NAME = 'FabricMDL2Icons';
var FLUENT_HYBRID_ICONS_FONT_NAME = 'Fluent MDL2 Hybrid Icons';
var DEBOUNCE_SEARCH_INPUT_IN_MILLISECOND = 300;
var IconPicker = /** @class */ (function (_super) {
    tslib_1.__extends(IconPicker, _super);
    function IconPicker(props) {
        var _this = _super.call(this, props) || this;
        _this._delayedHandleSearchBoxChange = (0, sp_lodash_subset_1.debounce)(function (searchInput) {
            _this.setState({
                searchInput: searchInput
            });
        }, DEBOUNCE_SEARCH_INPUT_IN_MILLISECOND);
        _this.open = function (selectedIconName) {
            _this.setState({
                isOpen: true,
                selectedIconName: selectedIconName,
                searchInput: ''
            });
        };
        _this.close = function () {
            _this.setState({
                isOpen: false
            });
        };
        _this._handleSearchChange = function (event, value) {
            _this._delayedHandleSearchBoxChange(value || '');
        };
        _this._handleRenderCell = function (iconName, index, itemsCount, iconSvg) {
            return (React.createElement(IconItem_1.IconItem, { key: iconName, iconName: iconSvg ? undefined : iconName, iconSvg: iconSvg, iconLabel: iconName, isSelected: _this.state.selectedIconName === iconName, onClick: _this._handleIconClick, index: index, itemsCount: itemsCount }));
        };
        _this._handleIconClick = function (iconName) {
            var _a, _b;
            _this.setState({
                selectedIconName: iconName
            });
            (_a = _this.state.screenReaderAlert) === null || _a === void 0 ? void 0 : _a.read((_b = _this.state.stringHelper) === null || _b === void 0 ? void 0 : _b.format(IconPickerStrings_resx_1.default.IconSelectedMessage, iconName));
        };
        _this._handleSave = function () {
            _this.setState({ isOpen: false });
            if (_this.state.selectedIconName) {
                _this.props.onSelect(_this.state.selectedIconName);
            }
        };
        _this._handleCancel = function () {
            _this.setState({ isOpen: false });
            if (_this.props.onCancel) {
                _this.props.onCancel();
            }
        };
        if (props.customIconSet) {
            var customIconNames_1 = [];
            // Map.values() not supported on IE
            props.customIconSet.forEach(function (icon, iconName) {
                customIconNames_1.push(iconName);
            });
            _this._iconNames = customIconNames_1;
        }
        else {
            _this._iconNames = IconPicker._getFabricMDL2IconNames();
        }
        _this.state = {
            isOpen: false,
            searchInput: '',
            selectedIconName: undefined,
            screenReaderAlert: undefined,
            stringHelper: undefined
        };
        _this._loadDeferredComponents();
        return _this;
    }
    IconPicker._getFabricMDL2IconNames = function () {
        var iconSettings = office_ui_fabric_react_bundle_1.GlobalSettings.getValue(ICONS_GLOBAL_SETTINGS_NAME);
        return Object.keys(iconSettings).filter(function (iconName) {
            var iconRecord = iconSettings[iconName];
            var iconFontFamily = (0, KillSwitches_1.isHybridIconFontFamilyActivated)()
                ? FABRIC_MDL2_ICONS_FONT_NAME
                : FLUENT_HYBRID_ICONS_FONT_NAME;
            return (IconPicker._excludedIcons.indexOf(iconName) === -1 &&
                iconRecord &&
                iconRecord.subset &&
                iconRecord.subset.fontFace &&
                iconRecord.subset.fontFace.fontFamily &&
                iconRecord.subset.fontFace.fontFamily.indexOf(iconFontFamily) > -1);
        });
    };
    // eslint-disable-next-line @typescript-eslint/naming-convention
    IconPicker.prototype.UNSAFE_componentWillUpdate = function (nextProps, nextState) {
        var _a;
        if (nextState.isOpen === true && this.state.isOpen === false) {
            (_a = this.state.screenReaderAlert) === null || _a === void 0 ? void 0 : _a.read(IconPickerStrings_resx_1.default.IconPickerInstructionMessage, sp_component_utilities_1.ReadingMode.ReadImmediately);
        }
    };
    IconPicker.prototype.componentWillUnmount = function () {
        this._delayedHandleSearchBoxChange.cancel();
    };
    IconPicker.prototype.render = function () {
        var _this = this;
        var searchFilteredIconNames = this._iconNames.filter(function (iconName) { return iconName.toLowerCase().indexOf(_this.state.searchInput.toLowerCase()) > -1; });
        // Not allow open if no icon is selected or the selected icon is not in search results.
        var isSaveDisabled = this.state.selectedIconName === undefined ||
            searchFilteredIconNames.indexOf(this.state.selectedIconName) === -1;
        var screenReaderAlert;
        if (this.state.isOpen && this.state.screenReaderAlert && this.state.stringHelper) {
            var iconsCountString = this.state.stringHelper.formatWithLocalizedCountValue(IconPickerStrings_resx_1.default.IconsCountTemplate, IconPickerStrings_resx_1.default.CountStringIntervals, searchFilteredIconNames.length);
            var alertText = this.state.searchInput
                ? this.state.stringHelper.format(IconPickerStrings_resx_1.default.SearchMessage, iconsCountString)
                : this.state.stringHelper.format(IconPickerStrings_resx_1.default.GeneralMessage, iconsCountString);
            screenReaderAlert = React.createElement(this.state.screenReaderAlert, { message: alertText });
        }
        else {
            screenReaderAlert = undefined;
        }
        var searchFilteredIcons = searchFilteredIconNames.map(function (iconName, index) {
            return _this._handleRenderCell(iconName, index, searchFilteredIconNames.length, _this.props.customIconSet ? _this.props.customIconSet.get(iconName) : undefined);
        });
        var panelTitleClassName = (0, office_ui_fabric_react_bundle_1.css)(IconPicker_module_scss_1.default.panelTitle, IconPicker_module_scss_1.default.fluent);
        return (React.createElement(Panel_1.Panel, { className: IconPicker_module_scss_1.default.panel, elementToFocusOnDismiss: this.props.elementToFocusOnDismiss, isLightDismiss: true, isOpen: this.state.isOpen, onDismiss: this._handleCancel, type: Panel_1.PanelType.extraLarge },
            React.createElement("div", { className: (0, office_ui_fabric_react_bundle_1.css)(IconPicker_module_scss_1.default.panelHeader, IconPicker_module_scss_1.default.fluent) },
                React.createElement("div", { className: panelTitleClassName }, IconPickerStrings_resx_1.default.PanelTitle),
                React.createElement(SearchBox_1.SearchBox, { className: IconPicker_module_scss_1.default.searchBox, onChange: this._handleSearchChange, placeholder: IconPickerStrings_resx_1.default.SearchBoxPlaceholderText, value: !(0, KillSwitches_1.isFluentIconPickerPerformanceKSActivated)() ? undefined : this.state.searchInput, defaultValue: !(0, KillSwitches_1.isFluentIconPickerPerformanceKSActivated)() ? this.state.searchInput : undefined, clearButtonProps: { ariaLabel: IconPickerStrings_resx_1.default.ClearButtonAriaLabel } })),
            React.createElement(office_ui_fabric_react_bundle_1.FocusZone, { className: IconPicker_module_scss_1.default.gridList, elementType: 'ul' }, searchFilteredIcons),
            React.createElement("div", { className: IconPicker_module_scss_1.default.actionButtonsContainer },
                React.createElement("div", { className: IconPicker_module_scss_1.default.actionButtons },
                    React.createElement(office_ui_fabric_react_bundle_1.PrimaryButton, { className: IconPicker_module_scss_1.default.actionButton, disabled: isSaveDisabled, onClick: this._handleSave }, IconPickerStrings_resx_1.default.SaveButtonText),
                    React.createElement(office_ui_fabric_react_bundle_1.DefaultButton, { className: IconPicker_module_scss_1.default.actionButton, onClick: this._handleCancel }, IconPickerStrings_resx_1.default.CancelButtonText))),
            screenReaderAlert));
    };
    IconPicker.prototype._loadDeferredComponents = function () {
        var _this = this;
        void Promise.all([
            Promise.resolve().then(function () { return tslib_1.__importStar(require(/* webpackChunkName: 'thumbnail-picker-component-utilities' */ '@ms/sp-component-utilities')); }),
            Promise.resolve().then(function () { return tslib_1.__importStar(require(/* webpackChunkName: 'thumbnail-picker-odsp-utilities' */ '@ms/odsp-utilities-bundle')); })
        ]).then(function (_a) {
            var componentUtilitiesModule = _a[0], odspUtilitiesBundle = _a[1];
            _this.setState({
                screenReaderAlert: componentUtilitiesModule.ScreenReaderAlert,
                stringHelper: odspUtilitiesBundle.StringHelper
            });
        });
    };
    // All icon names in this excluded list should be in lower case.
    IconPicker._excludedIcons = ['gallatinlogo'];
    return IconPicker;
}(React.PureComponent));
exports.IconPicker = IconPicker;
//# sourceMappingURL=IconPicker.js.map