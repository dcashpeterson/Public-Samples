{"version":3,"file":"no-untyped-underscore.js","sourceRoot":"","sources":["../src/no-untyped-underscore.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAQ3D,MAAM,uBAAuB,GAA6C;IACxE,IAAI,EAAE;QACJ,IAAI,EAAE,SAAS;QACf,QAAQ,EAAE;YACR,0BAA0B,EACxB,uEAAuE;gBACvE,sFAAsF;SACzF;QACD,MAAM,EAAE,EAAE;QACV,IAAI,EAAE;YACJ,WAAW,EACT,kEAAkE;gBAClE,wCAAwC;YAC1C,4DAA4D;YAC5D,QAAQ,EAAE,kBAAkB;YAC5B,WAAW,EAAE,KAAK;YAClB,GAAG,EAAE,wDAAwD;SACjC;KAC/B;IACD,MAAM,EAAE,CAAC,OAAkD,EAAE,EAAE;QAC7D,MAAM,cAAc,GAA+B,OAAO,CAAC,cAAc,CAAC;QAC1E,IAAI,CAAC,cAAc,IAAI,CAAC,cAAc,CAAC,OAAO,IAAI,CAAC,cAAc,CAAC,qBAAqB,EAAE;YACvF,MAAM,IAAI,KAAK,CACb,oFAAoF;gBAClF,4CAA4C,CAC/C,CAAC;SACH;QAED,MAAM,WAAW,GAAmB,cAAc,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC;QAE5E,OAAO;YACL,gBAAgB,EAAE,UAAU,IAA+B;gBACzD,kCAAkC;gBAElC,+DAA+D;gBAC/D,MAAM,YAAY,GAAoC,IAAI,CAAC,MAAM,CAAC;gBAClE,IAAI,YAAY,EAAE;oBAChB,IAAI,YAAY,CAAC,IAAI,KAAK,OAAO,IAAI,YAAY,CAAC,IAAI,KAAK,gBAAgB,EAAE;wBAC3E,OAAO,CAAC,WAAW;qBACpB;oBACD,IAAI,YAAY,CAAC,IAAI,KAAK,YAAY,EAAE;wBACtC,IAAI,YAAY,CAAC,IAAI,KAAK,MAAM,IAAI,YAAY,CAAC,IAAI,IAAI,MAAM,EAAE;4BAC/D,OAAO,CAAC,WAAW;yBACpB;qBACF;iBACF;gBAED,gEAAgE;gBAChE,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,KAAK,YAAY,EAAE;oBACxD,MAAM,UAAU,GAAW,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;oBAC9C,IAAI,UAAU,IAAI,UAAU,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;wBACvC,4DAA4D;wBAC5D,EAAE;wBACF,0CAA0C;wBAC1C,EAAE;wBACF,yBAAyB;wBACzB,cAAc;wBACd,oBAAoB;wBACpB,8BAA8B;wBAC9B,QAAQ;wBACR,EAAE;wBACF,wCAAwC;wBACxC,iBAAiB;wBACjB,uCAAuC;wBACvC,EAAE;wBACF,IAAI,YAAY,GAA0B,SAAS,CAAC;wBAEpD,MAAM,gBAAgB,GAAwB,cAAc,CAAC,qBAAsB,CAAC,GAAG,CACrF,IAAI,CAAC,MAAM,CACZ,CAAC;wBACF,IAAI,gBAAgB,EAAE;4BACpB,MAAM,gBAAgB,GAAwB,WAAW,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,CAAC;4BAC9F,IAAI,gBAAgB,EAAE;gCACpB,YAAY,GAAG,gBAAgB,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;6BACzD;yBACF;wBAED,qFAAqF;wBACrF,sFAAsF;wBACtF,IAAI,CAAC,YAAY,EAAE;4BACjB,OAAO,CAAC,MAAM,CAAC;gCACb,IAAI;gCACJ,SAAS,EAAE,0BAA0B;gCACrC,IAAI,EAAE,EAAE,UAAU,EAAE,UAAU,EAAE;6BACjC,CAAC,CAAC;yBACJ;qBACF;iBACF;YACH,CAAC;SACF,CAAC;IACJ,CAAC;CACF,CAAC;AAEO,0DAAuB","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { TSESTree, TSESLint, ParserServices } from '@typescript-eslint/experimental-utils';\nimport * as ts from 'typescript';\n\ntype MessageIds = 'error-untyped-underscore';\ntype Options = [];\n\nconst noUntypedUnderscoreRule: TSESLint.RuleModule<MessageIds, Options> = {\n  meta: {\n    type: 'problem',\n    messages: {\n      'error-untyped-underscore':\n        'This expression appears to access a private member \"{{memberName}}\"; ' +\n        'either remove the underscore prefix or else declare a type for the containing object'\n    },\n    schema: [],\n    docs: {\n      description:\n        'Prevent TypeScript code from accessing legacy JavaScript members' +\n        ' whose names have an underscore prefix',\n      // Deprecated in ESLint v8; Keep for backwards compatibility\n      category: 'Stylistic Issues',\n      recommended: false,\n      url: 'https://www.npmjs.com/package/@rushstack/eslint-plugin'\n    } as TSESLint.RuleMetaDataDocs\n  },\n  create: (context: TSESLint.RuleContext<MessageIds, Options>) => {\n    const parserServices: ParserServices | undefined = context.parserServices;\n    if (!parserServices || !parserServices.program || !parserServices.esTreeNodeToTSNodeMap) {\n      throw new Error(\n        'This rule requires your ESLint configuration to define the \"parserOptions.project\"' +\n          ' property for \"@typescript-eslint/parser\".'\n      );\n    }\n\n    const typeChecker: ts.TypeChecker = parserServices.program.getTypeChecker();\n\n    return {\n      MemberExpression: function (node: TSESTree.MemberExpression) {\n        // Is it an expression like \"x.y\"?\n\n        // Ignore expressions such as \"super.y\", \"this.y\", and \"that.y\"\n        const memberObject: TSESTree.LeftHandSideExpression = node.object;\n        if (memberObject) {\n          if (memberObject.type === 'Super' || memberObject.type === 'ThisExpression') {\n            return; // no match\n          }\n          if (memberObject.type === 'Identifier') {\n            if (memberObject.name === 'this' || memberObject.name == 'that') {\n              return; // no match\n            }\n          }\n        }\n\n        // Does the member name start with an underscore?  (e.g. \"x._y\")\n        if (node.property && node.property.type === 'Identifier') {\n          const memberName: string = node.property.name;\n          if (memberName && memberName[0] === '_') {\n            // Do we have type information for the property (e.g. \"_y\")?\n            //\n            // Examples where propertyType is defined:\n            //\n            //    let x: { _y: any };\n            //    let x: {\n            //      _y: boolean;\n            //      [key: string]: number;\n            //    };\n            //\n            // Examples with propertyType=undefined:\n            //    let x: any;\n            //    let x: { [key: string]: number };\n            //\n            let propertyType: ts.Symbol | undefined = undefined;\n\n            const memberObjectNode: ts.Node | undefined = parserServices.esTreeNodeToTSNodeMap!.get(\n              node.object\n            );\n            if (memberObjectNode) {\n              const memberObjectType: ts.Type | undefined = typeChecker.getTypeAtLocation(memberObjectNode);\n              if (memberObjectType) {\n                propertyType = memberObjectType.getProperty(memberName);\n              }\n            }\n\n            // TypeScript's type system already sufficiently restricts access to private members.\n            // Thus, this ESLint rule only considers untyped code such as a legacy JavaScript API.\n            if (!propertyType) {\n              context.report({\n                node,\n                messageId: 'error-untyped-underscore',\n                data: { memberName: memberName }\n              });\n            }\n          }\n        }\n      }\n    };\n  }\n};\n\nexport { noUntypedUnderscoreRule };\n"]}