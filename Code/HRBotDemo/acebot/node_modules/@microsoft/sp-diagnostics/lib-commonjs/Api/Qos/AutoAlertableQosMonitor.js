"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutoAlertableQosMonitor = exports.AutoAlertableMonitorType = void 0;
var tslib_1 = require("tslib");
var QosMonitor_1 = tslib_1.__importDefault(require("./QosMonitor"));
/**
 * Object members correspond to auto alerting monitors.
 * Information about monitors: https://onedrive.visualstudio.com/WEX!/_wiki/wikis/WEX!.wiki/30583/Current-Monitors
 *
 * @internal
 */
// eslint-disable-next-line @typescript-eslint/typedef
exports.AutoAlertableMonitorType = {
    /**
     *  If QoS drops below a static threshold of 95 for a period, a sev 4 is fired.
     */
    StaticReliabilityQos95Sev4: 'StaticReliabilityQos95Sev4',
    /**
     * If QoS drops below some dynamic threshold "Medium" sensitivity (as defined by Geneva)
     * calculated from historical monitor data, a sev 4 is fired.
     */
    DynamicReliabilityQosMediumSev4: 'DynamicReliabilityQosMediumSev4',
    /**
     * If the number of expected errors increases past a "High" dynamic threshold sensitivity
     * (as defined by Geneva) calculated from historical monitor data OR  QoS drops below some
     * dynamic threshold "Medium" sensitivity, a sev 4 is fired.
     */
    DynamicReliabilityExpectedFailureHighSev4: 'DynamicReliabilityExpectedFailureHighSev4'
};
/**
 * Qos logger which enforces using an existing altering monitor as determined by the
 * AlertableMonitorType.
 *
 * @internal
 */
var AutoAlertableQosMonitor = /** @class */ (function (_super) {
    tslib_1.__extends(AutoAlertableQosMonitor, _super);
    /**
     * Creates a QoS monitor (initializes it and logs the start event) that enforces that end events
     * fired include the alertableMonitorType property in extraData corresponding to the
     *
     * @param scenarioName	- Unique name of the QoS scenario
     * @param autoAlertableMonitorType - Correspond to existing alerting monitor that will track the events.
     * @param copyToEngagement - Indicate whether this data should be used as Engagement as well.
     */
    function AutoAlertableQosMonitor(scenarioName, autoAlertableMonitorType, copyToEngagement) {
        if (copyToEngagement === void 0) { copyToEngagement = false; }
        var _this = _super.call(this, scenarioName, /* copyToCosmos */ false, /* copyToInterana */ copyToEngagement) || this;
        _this._autoAlertableMonitorType = autoAlertableMonitorType;
        return _this;
    }
    /**
     * QoS monitor ends with success. Also writes AutoAlertableMonitorType to extraData.
     * You will see success tag: SPPages.ScenarioName.Success
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    AutoAlertableQosMonitor.prototype.writeSuccess = function (extraData) {
        _super.prototype.writeSuccess.call(this, this._getExtraDataWithAutoAlertableFields(extraData));
    };
    /**
     * QoS monitor ends with failure. Also writes AutoAlertableMonitorType to extraData.
     * You will see failure tag: SPPages.ScenarioName.<failuretag>.Failure.
     * <failuretag> will be filled with param tagName
     */
    AutoAlertableQosMonitor.prototype.writeUnexpectedFailure = function (tagNameSuffix, ex, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    extraData) {
        if (tagNameSuffix === void 0) { tagNameSuffix = 'DefaultUnexpected'; }
        _super.prototype.writeUnexpectedFailure.call(this, tagNameSuffix, ex, this._getExtraDataWithAutoAlertableFields(extraData));
    };
    /*
     * QoS monitor ends with expected failure. Also writes AutoAlertableMonitorType to extraData.
     * You will see success tag: ModernPublish.RenderPublishPage.<failuretag>.ExpectedFailure.
     * <failuretag> will be filled with param tagName
     */
    AutoAlertableQosMonitor.prototype.writeExpectedFailure = function (tagNameSuffix, ex, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    extraData) {
        if (tagNameSuffix === void 0) { tagNameSuffix = 'DefaultExpected'; }
        _super.prototype.writeExpectedFailure.call(this, tagNameSuffix, ex, this._getExtraDataWithAutoAlertableFields(extraData));
    };
    /**
     * Gets the extraData with additional auto alertable dimensions to indicate this uses the easy
     * alerting monitors.
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    AutoAlertableQosMonitor.prototype._getExtraDataWithAutoAlertableFields = function (extraData) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var returnedExtraData = extraData !== null && extraData !== void 0 ? extraData : {};
        returnedExtraData.autoAlertableMonitorType = exports.AutoAlertableMonitorType[this._autoAlertableMonitorType];
        return returnedExtraData;
    };
    return AutoAlertableQosMonitor;
}(QosMonitor_1.default));
exports.AutoAlertableQosMonitor = AutoAlertableQosMonitor;
//# sourceMappingURL=AutoAlertableQosMonitor.js.map