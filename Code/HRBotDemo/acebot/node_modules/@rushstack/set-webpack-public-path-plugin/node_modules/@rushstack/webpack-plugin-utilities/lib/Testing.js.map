{"version":3,"file":"Testing.js","sourceRoot":"","sources":["../src/Testing.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { createFsFromVolume, Volume, type IFs } from 'memfs';\nimport path from 'path';\nimport type { StatsCompilation as WebpackStatsCompilation } from 'webpack';\nimport webpackMerge from 'webpack-merge';\n\nimport type { MultiStats, Stats, Configuration, Compiler, StatsError } from 'webpack';\n\n/**\n * @public\n * This function generates a webpack compiler with default configuration and the output filesystem mapped to\n * a memory filesystem. This is useful for testing webpack plugins/loaders where we do not need to write to disk (which can be costly).\n * @param entry - The entry point for the webpack compiler\n * @param additionalConfig - Any additional configuration that should be merged with the default configuration\n * @param memFs - The memory filesystem to use for the output filesystem. Use this option if you want to _inspect_, analyze, or read the output\n * files generated by the webpack compiler. If you do not need to do this, you can omit this parameter and the output files.\n *\n * @returns - A webpack compiler with the output filesystem mapped to a memory filesystem\n *\n * @example\n * ```typescript\n * import Testing from '@rushstack/webpack-plugin-utilities';\n *\n * describe('MyPlugin', () => {\n    it('should run', async () => {\n      const stats = await Testing.getTestingWebpackCompiler(\n        `./src/index.ts`,\n      );\n\n      expect(stats).toBeDefined();\n    });\n * });\n * ```\n *\n * @remarks\n * If you want to be able to read, analyze, access the files written to the memory filesystem,\n * you can pass in a memory filesystem instance to the `memFs` parameter.\n *\n * @example\n * ```typescript\n * import Testing from '@rushstack/webpack-plugin-utilities';\n * import { createFsFromVolume, Volume, IFs } from 'memfs';\n * import path from 'path';\n *\n * describe('MyPlugin', () => {\n *  it('should run', async () => {\n *    const virtualFileSystem: IFs = createFsFromVolume(new Volume());\n *    const stats = await Testing.getTestingWebpackCompiler(\n *      `./src/index.ts`,\n *      {},\n *      virtualFileSystem\n *    );\n *\n *    expect(stats).toBeDefined();\n *    expect(virtualFileSystem.existsSync(path.join(__dirname, 'dist', 'index.js'))).toBe(true);\n *  });\n * });\n * ```\n */\nexport async function getTestingWebpackCompilerAsync(\n  entry: string,\n  additionalConfig: Configuration = {},\n  memFs: IFs = createFsFromVolume(new Volume())\n): Promise<(Stats | MultiStats) | undefined> {\n  let webpackModule: typeof import('webpack');\n  try {\n    webpackModule = (await import('webpack')).default;\n  } catch (e) {\n    throw new Error(\n      'Unable to load module \"webpack\". The @rushstack/webpack-plugin-utilities package declares \"webpack\" as ' +\n        'an optional peer dependency, but a function was invoked on it that requires webpack. Make sure ' +\n        `the peer dependency on \"webpack\" is fulfilled. Inner error: ${e}`\n    );\n  }\n\n  const compilerOptions: Configuration = webpackMerge(_defaultWebpackConfig(entry), additionalConfig);\n  const compiler: Compiler = webpackModule(compilerOptions);\n\n  compiler.outputFileSystem = memFs;\n  compiler.outputFileSystem.join = path.join.bind(path);\n\n  return new Promise((resolve, reject) => {\n    compiler.run((err, stats) => {\n      compiler.close(() => {\n        if (err) {\n          return reject(err);\n        }\n\n        _processAndHandleStatsErrorsAndWarnings(stats, reject);\n\n        resolve(stats);\n      });\n    });\n  });\n}\n\nfunction _processAndHandleStatsErrorsAndWarnings(\n  stats: Stats | MultiStats | undefined,\n  reject: (reason: unknown) => void\n): void {\n  if (stats?.hasErrors() || stats?.hasWarnings()) {\n    const serializedStats: WebpackStatsCompilation[] = [stats?.toJson('errors-warnings')];\n\n    const errors: StatsError[] = [];\n    const warnings: StatsError[] = [];\n\n    for (const compilationStats of serializedStats) {\n      if (compilationStats.warnings) {\n        for (const warning of compilationStats.warnings) {\n          warnings.push(warning);\n        }\n      }\n\n      if (compilationStats.errors) {\n        for (const error of compilationStats.errors) {\n          errors.push(error);\n        }\n      }\n\n      if (compilationStats.children) {\n        for (const child of compilationStats.children) {\n          serializedStats.push(child);\n        }\n      }\n    }\n\n    reject([...errors, ...warnings]);\n  }\n}\n\nfunction _defaultWebpackConfig(entry: string = './src'): Configuration {\n  return {\n    // We don't want to have eval source maps, nor minification\n    // so we set mode to 'none' to disable both. Default is 'production'\n    mode: 'none',\n    context: __dirname,\n    entry,\n    output: {\n      filename: 'test-bundle.js'\n    }\n  };\n}\n"]}