"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var AadTokenProviders_1 = tslib_1.__importDefault(require("../oauthTokenProvider/AadTokenProviders"));
var AadHttpClient_1 = tslib_1.__importDefault(require("./AadHttpClient"));
/**
 * Returns a preinitialized version of the AadHttpClient for a given resource url.
 * For more information: {@link https://docs.microsoft.com/en-us/sharepoint/dev/spfx/use-aadhttpclient}
 *
 * @public
 */
var AadHttpClientFactory = /** @class */ (function () {
    /**
     * @internal
     */
    function AadHttpClientFactory(serviceScope) {
        this._serviceScope = serviceScope;
    }
    /**
     * Returns an instance of the AadHttpClient that communicates with the current tenant's configurable
     * Service Principal.
     * @param resourceEndpoint - The target AAD application's resource endpoint.
     */
    AadHttpClientFactory.prototype.getClient = function (resourceEndpoint) {
        return Promise.resolve(new AadHttpClient_1.default(this._serviceScope, resourceEndpoint));
    };
    /**
     * Returns an instance of the AadHttpClient that communicates with the preconfigured
     * Service Principal.
     * @param resourceEndpoint - The target AAD application's resource endpoint.
     * @internal
     */
    AadHttpClientFactory.prototype._getStandardClient = function (resourceEndpoint) {
        return Promise.resolve(new AadHttpClient_1.default(this._serviceScope, resourceEndpoint, {
            configuration: AadTokenProviders_1.default.preAuthorizedConfiguration
        }));
    };
    /**
     * The service key for AadHttpClientFactory.
     */
    AadHttpClientFactory.serviceKey = sp_core_library_1.ServiceKey.create('sp-http:AadHttpClientFactory', AadHttpClientFactory);
    return AadHttpClientFactory;
}());
exports.default = AadHttpClientFactory;
//# sourceMappingURL=AadHttpClientFactory.js.map