import { type ITerminal } from '@rushstack/node-core-library';
import type { RushConfigurationProject } from '../../api/RushConfigurationProject';
import type { ProjectChangeAnalyzer } from '../ProjectChangeAnalyzer';
import type { BuildCacheConfiguration } from '../../api/BuildCacheConfiguration';
export interface IProjectBuildCacheOptions {
    buildCacheConfiguration: BuildCacheConfiguration;
    project: RushConfigurationProject;
    projectOutputFolderNames: ReadonlyArray<string>;
    additionalProjectOutputFilePaths?: ReadonlyArray<string>;
    additionalContext?: Record<string, string>;
    configHash: string;
    projectChangeAnalyzer: ProjectChangeAnalyzer;
    terminal: ITerminal;
    phaseName: string;
}
export declare class ProjectBuildCache {
    /**
     * null === we haven't tried to initialize yet
     * undefined === unable to initialize
     */
    private static _tarUtilityPromise;
    private readonly _project;
    private readonly _localBuildCacheProvider;
    private readonly _cloudBuildCacheProvider;
    private readonly _buildCacheEnabled;
    private readonly _cacheWriteEnabled;
    private readonly _projectOutputFolderNames;
    private readonly _additionalProjectOutputFilePaths;
    private _cacheId;
    private constructor();
    private static _tryGetTarUtility;
    get cacheId(): string | undefined;
    static tryGetProjectBuildCache(options: IProjectBuildCacheOptions): Promise<ProjectBuildCache | undefined>;
    tryRestoreFromCacheAsync(terminal: ITerminal, specifiedCacheId?: string): Promise<boolean>;
    trySetCacheEntryAsync(terminal: ITerminal, specifiedCacheId?: string): Promise<boolean>;
    /**
     * Walks the declared output folders of the project and collects a list of files.
     * @returns The list of output files as project-relative paths, or `undefined` if a
     *   symbolic link was encountered.
     */
    private _tryCollectPathsToCacheAsync;
    private _getTarLogFilePath;
    private static _getCacheId;
}
//# sourceMappingURL=ProjectBuildCache.d.ts.map