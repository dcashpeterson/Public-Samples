"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ManifestProvider = void 0;
var tslib_1 = require("tslib");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var sp_diagnostics_1 = require("@microsoft/sp-diagnostics");
var sp_http_base_1 = require("@microsoft/sp-http-base");
var sp_page_context_1 = require("@microsoft/sp-page-context");
var killSwitches_1 = require("../common/killSwitches");
/**
 * Data provider for manifest fetching with the server.
 */
var ManifestProvider = /** @class */ (function () {
    function ManifestProvider(serviceScope, webAbsoluteUrl, buildNumber) {
        this._webAbsoluteUrl = webAbsoluteUrl;
        this._pageContext = serviceScope.consume(sp_page_context_1.PageContext.serviceKey);
        this._httpClient = serviceScope.consume(sp_http_base_1.SPHttpClient.serviceKey);
        this._buildNumber = buildNumber;
    }
    /**
     * Make a server request to fetch a collection of component manifests.
     *
     * @param requests - Array of manifests to fetch from the server
     *
     * @returns A promise resolving to an array of component manifests
     */
    ManifestProvider.prototype.fetchManifests = function (requests) {
        var isKSNotActivated = !(0, killSwitches_1.isRejectOnNotFoundManifestsKillSwitchActivated)();
        var qosMonitor = new sp_diagnostics_1._QosMonitor('ManifestProvider.tryGetManifests');
        var extraData = {};
        var body = { components: requests };
        body.project = sp_core_library_1.Session.clientSideApplicationId;
        var requestIds;
        if (isKSNotActivated) {
            requestIds = new Set();
            for (var _i = 0, requests_1 = requests; _i < requests_1.length; _i++) {
                var r = requests_1[_i];
                requestIds.add(r.id);
            }
        }
        return this._httpClient
            .post("".concat((this._pageContext.web && this._pageContext.web.absoluteUrl) || this._webAbsoluteUrl, "/_api/web/GetClientSideComponents"), sp_http_base_1.SPHttpClient.configurations.v1, tslib_1.__assign({ body: JSON.stringify(body) }, (!(0, killSwitches_1.isVersionHeaderKillSwitchActivated)() && {
            headers: {
                'x-odsp-web-version': this._buildNumber
            }
        })))
            .then(function (response) {
            if (!response.ok) {
                throw new Error("ManifestProvider GetClientSideComponents failed with HTTP status ".concat(response.status, " and correlation id ").concat(response.correlationId));
            }
            else if (response.correlationId) {
                extraData.correlationId = response.correlationId.toString();
            }
            return response.json();
        })
            .then(function (componentResponse) {
            var manifests = [];
            for (var _i = 0, _a = componentResponse.value; _i < _a.length; _i++) {
                var r = _a[_i];
                if (r.Status === 0 && r.Manifest) {
                    var manifest = JSON.parse(r.Manifest);
                    manifests.push(manifest);
                    if (isKSNotActivated) {
                        requestIds.delete(manifest.id);
                    }
                }
            }
            if (isKSNotActivated && requestIds.size) {
                throw new Error('Did not fetch all manifests');
            }
            qosMonitor.writeSuccess(extraData);
            return manifests;
        })
            .catch(function (e) {
            sp_diagnostics_1._TraceLogger.logErrorData({ source: ManifestProvider._logSource, error: e });
            qosMonitor.writeUnexpectedFailure(undefined, e, (isKSNotActivated && { manifestRequests: requests }) || undefined);
            throw e;
        });
    };
    ManifestProvider._logSource = sp_diagnostics_1._LogSource.create('ManifestProvider');
    return ManifestProvider;
}());
exports.ManifestProvider = ManifestProvider;
//# sourceMappingURL=ManifestProvider.js.map