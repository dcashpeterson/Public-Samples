"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('node-fetch', function () {
    return Object.assign(jest.fn(), jest.requireActual('node-fetch'));
});
const node_fetch_1 = __importStar(require("node-fetch"));
const rush_sdk_1 = require("@rushstack/rush-sdk");
const node_core_library_1 = require("@rushstack/node-core-library");
const HttpBuildCacheProvider_1 = require("../HttpBuildCacheProvider");
const EXAMPLE_OPTIONS = {
    url: 'https://buildcache.example.acme.com',
    tokenHandler: {
        exec: 'node',
        args: ['tokenHandler.js']
    },
    uploadMethod: 'POST',
    isCacheWriteAllowed: false,
    pluginName: 'example-plugin',
    rushProjectRoot: '/repo',
    minHttpRetryDelayMs: 1
};
describe('HttpBuildCacheProvider', () => {
    let terminalBuffer;
    let terminal;
    beforeEach(() => {
        terminalBuffer = new node_core_library_1.StringBufferTerminalProvider();
        terminal = new node_core_library_1.Terminal(terminalBuffer);
    });
    describe('tryGetCacheEntryBufferByIdAsync', () => {
        it('prints warning if read credentials are not available', async () => {
            jest.spyOn(rush_sdk_1.EnvironmentConfiguration, 'buildCacheCredential', 'get').mockReturnValue(undefined);
            const session = {};
            const provider = new HttpBuildCacheProvider_1.HttpBuildCacheProvider(EXAMPLE_OPTIONS, session);
            mocked(node_fetch_1.default).mockResolvedValue(new node_fetch_1.Response('Unauthorized', {
                status: 401,
                statusText: 'Unauthorized'
            }));
            const result = await provider.tryGetCacheEntryBufferByIdAsync(terminal, 'some-key');
            expect(result).toBe(undefined);
            expect(node_fetch_1.default).toHaveBeenCalledTimes(1);
            expect(node_fetch_1.default).toHaveBeenNthCalledWith(1, 'https://buildcache.example.acme.com/some-key', {
                body: undefined,
                headers: {},
                method: 'GET',
                redirect: 'follow'
            });
            expect(terminalBuffer.getWarningOutput()).toMatchInlineSnapshot(`"Error getting cache entry: Error: Credentials for https://buildcache.example.acme.com/ have not been provided.[n]In CI, verify that RUSH_BUILD_CACHE_CREDENTIAL contains a valid Authorization header value.[n][n]For local developers, run:[n][n]    rush update-cloud-credentials --interactive[n][n]"`);
        });
        it('attempts up to 3 times to download a cache entry', async () => {
            jest.spyOn(rush_sdk_1.EnvironmentConfiguration, 'buildCacheCredential', 'get').mockReturnValue(undefined);
            const session = {};
            const provider = new HttpBuildCacheProvider_1.HttpBuildCacheProvider(EXAMPLE_OPTIONS, session);
            mocked(node_fetch_1.default).mockResolvedValueOnce(new node_fetch_1.Response('InternalServiceError', {
                status: 500,
                statusText: 'InternalServiceError'
            }));
            mocked(node_fetch_1.default).mockResolvedValueOnce(new node_fetch_1.Response('ServiceUnavailable', {
                status: 503,
                statusText: 'ServiceUnavailable'
            }));
            mocked(node_fetch_1.default).mockResolvedValueOnce(new node_fetch_1.Response('BadGateway', {
                status: 504,
                statusText: 'BadGateway'
            }));
            const result = await provider.tryGetCacheEntryBufferByIdAsync(terminal, 'some-key');
            expect(result).toBe(undefined);
            expect(node_fetch_1.default).toHaveBeenCalledTimes(3);
            expect(node_fetch_1.default).toHaveBeenNthCalledWith(1, 'https://buildcache.example.acme.com/some-key', {
                body: undefined,
                headers: {},
                method: 'GET',
                redirect: 'follow'
            });
            expect(node_fetch_1.default).toHaveBeenNthCalledWith(2, 'https://buildcache.example.acme.com/some-key', {
                body: undefined,
                headers: {},
                method: 'GET',
                redirect: 'follow'
            });
            expect(node_fetch_1.default).toHaveBeenNthCalledWith(3, 'https://buildcache.example.acme.com/some-key', {
                body: undefined,
                headers: {},
                method: 'GET',
                redirect: 'follow'
            });
            expect(terminalBuffer.getWarningOutput()).toMatchInlineSnapshot(`"Could not get cache entry: HTTP 504: BadGateway[n]"`);
        });
    });
});
//# sourceMappingURL=HttpBuildCacheProvider.test.js.map