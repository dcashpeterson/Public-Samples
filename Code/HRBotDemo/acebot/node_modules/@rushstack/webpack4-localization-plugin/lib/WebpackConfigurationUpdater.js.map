{"version":3,"file":"WebpackConfigurationUpdater.js","sourceRoot":"","sources":["../src/WebpackConfigurationUpdater.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport minimatch from 'minimatch';\nimport * as path from 'path';\nimport type * as Webpack from 'webpack';\nimport type * as SetPublicPathPluginPackageType from '@rushstack/set-webpack-public-path-plugin';\nimport { type NewlineKind, Text } from '@rushstack/node-core-library';\nimport type { IgnoreStringFunction } from '@rushstack/localization-utilities';\n\nimport { Constants } from './utilities/Constants';\nimport type { LocalizationPlugin } from './LocalizationPlugin';\nimport type { ILocLoaderOptions } from './loaders/LocLoader';\nimport type { IBaseLoaderOptions } from './loaders/LoaderFactory';\n\nexport interface IWebpackConfigurationUpdaterOptions {\n  pluginInstance: LocalizationPlugin;\n  configuration: Webpack.Configuration;\n  globsToIgnore: string[] | undefined;\n  localeNameOrPlaceholder: string;\n  resxNewlineNormalization: NewlineKind | undefined;\n  ignoreMissingResxComments: boolean | undefined;\n  ignoreString: IgnoreStringFunction | undefined;\n}\n\nconst FILE_TOKEN_REGEX: RegExp = new RegExp(Text.escapeRegExp('[file]'));\n\nexport class WebpackConfigurationUpdater {\n  public static amendWebpackConfigurationForMultiLocale(options: IWebpackConfigurationUpdaterOptions): void {\n    const loader: string = path.resolve(__dirname, 'loaders', 'LocLoader.js');\n    const loaderOptions: ILocLoaderOptions = {\n      pluginInstance: options.pluginInstance,\n      resxNewlineNormalization: options.resxNewlineNormalization,\n      ignoreMissingResxComments: options.ignoreMissingResxComments,\n      ignoreString: options.ignoreString\n    };\n\n    WebpackConfigurationUpdater._addLoadersForLocFiles(options, loader, loaderOptions);\n\n    WebpackConfigurationUpdater._tryUpdateLocaleTokenInPublicPathPlugin(options);\n\n    WebpackConfigurationUpdater._tryUpdateSourceMapFilename(options.configuration);\n  }\n\n  public static amendWebpackConfigurationForInPlaceLocFiles(\n    options: IWebpackConfigurationUpdaterOptions\n  ): void {\n    const loader: string = path.resolve(__dirname, 'loaders', 'InPlaceLocFileLoader.js');\n    const loaderOptions: IBaseLoaderOptions = {\n      resxNewlineNormalization: options.resxNewlineNormalization,\n      ignoreMissingResxComments: options.ignoreMissingResxComments,\n      ignoreString: options.ignoreString\n    };\n\n    WebpackConfigurationUpdater._addRulesToConfiguration(options.configuration, [\n      {\n        test: Constants.RESOURCE_FILE_NAME_REGEXP,\n        use: [\n          {\n            loader: loader,\n            options: loaderOptions\n          }\n        ],\n        type: 'json',\n        sideEffects: false\n      }\n    ]);\n  }\n\n  private static _tryUpdateLocaleTokenInPublicPathPlugin(options: IWebpackConfigurationUpdaterOptions): void {\n    let setPublicPathPlugin: typeof SetPublicPathPluginPackageType.SetPublicPathPlugin | undefined;\n    try {\n      const pluginPackage: typeof SetPublicPathPluginPackageType = require('@rushstack/set-webpack-public-path-plugin');\n      setPublicPathPlugin = pluginPackage.SetPublicPathPlugin;\n    } catch (e) {\n      // public path plugin isn't present - ignore\n    }\n\n    if (setPublicPathPlugin && options.configuration.plugins) {\n      for (const plugin of options.configuration.plugins) {\n        if (plugin instanceof setPublicPathPlugin) {\n          if (\n            plugin.options &&\n            plugin.options.scriptName &&\n            plugin.options.scriptName.isTokenized &&\n            plugin.options.scriptName.name\n          ) {\n            plugin.options.scriptName.name = plugin.options.scriptName.name.replace(\n              /\\[locale\\]/g,\n              options.localeNameOrPlaceholder\n            );\n          }\n        }\n      }\n    }\n  }\n\n  private static _addLoadersForLocFiles(\n    options: IWebpackConfigurationUpdaterOptions,\n    loader: string,\n    loaderOptions: IBaseLoaderOptions\n  ): void {\n    const { globsToIgnore, configuration } = options;\n    const rules: Webpack.RuleSetCondition =\n      globsToIgnore && globsToIgnore.length > 0\n        ? {\n            include: Constants.RESOURCE_FILE_NAME_REGEXP,\n            exclude: (filePath: string): boolean =>\n              globsToIgnore.some((glob: string): boolean => minimatch(filePath, glob))\n          }\n        : Constants.RESOURCE_FILE_NAME_REGEXP;\n    WebpackConfigurationUpdater._addRulesToConfiguration(configuration, [\n      {\n        test: rules,\n        use: [\n          {\n            loader: loader,\n            options: loaderOptions\n          }\n        ],\n        type: 'json',\n        sideEffects: false\n      }\n    ]);\n  }\n\n  private static _addRulesToConfiguration(\n    configuration: Webpack.Configuration,\n    rules: Webpack.RuleSetRule[]\n  ): void {\n    if (!configuration.module) {\n      configuration.module = {\n        rules: []\n      };\n    }\n\n    if (!configuration.module.rules) {\n      configuration.module.rules = [];\n    }\n\n    configuration.module.rules.push(...rules);\n  }\n\n  private static _tryUpdateSourceMapFilename(configuration: Webpack.Configuration): void {\n    if (!configuration.output) {\n      configuration.output = {}; // This should never happen\n    }\n\n    if (configuration.output.sourceMapFilename !== undefined) {\n      configuration.output.sourceMapFilename = configuration.output.sourceMapFilename.replace(\n        FILE_TOKEN_REGEX,\n        Constants.NO_LOCALE_SOURCE_MAP_FILENAME_TOKEN\n      );\n    }\n  }\n}\n"]}