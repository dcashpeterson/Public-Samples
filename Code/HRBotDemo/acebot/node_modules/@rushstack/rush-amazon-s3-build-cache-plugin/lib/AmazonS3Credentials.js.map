{"version":3,"file":"AmazonS3Credentials.js","sourceRoot":"","sources":["../src/AmazonS3Credentials.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,kDAA+D;AAElD,QAAA,iBAAiB,GAAwB,mBAAmB,CAAC;AAC7D,QAAA,qBAAqB,GAA4B,uBAAuB,CAAC;AACzE,QAAA,iBAAiB,GAAwB,mBAAmB,CAAC;AAa1E;;GAEG;AACI,MAAM,aAAa,GAAG,GAAqC,EAAE;IAClE,MAAM,WAAW,GAAuB,OAAO,CAAC,GAAG,CAAC,yBAAiB,CAAC,CAAC;IACvE,MAAM,eAAe,GAAuB,OAAO,CAAC,GAAG,CAAC,6BAAqB,CAAC,CAAC;IAC/E,MAAM,YAAY,GAAuB,OAAO,CAAC,GAAG,CAAC,yBAAiB,CAAC,CAAC;IAExE,IAAI,WAAW,IAAI,eAAe,EAAE;QAClC,OAAO;YACL,WAAW;YACX,eAAe;YACf,YAAY;SACb,CAAC;KACH;SAAM,IAAI,WAAW,EAAE;QACtB,MAAM,IAAI,KAAK,CACb,QAAQ,yBAAiB,mCAAmC,6BAAqB,IAAI;YACnF,4DAA4D,CAC/D,CAAC;KACH;SAAM,IAAI,eAAe,EAAE;QAC1B,MAAM,IAAI,KAAK,CACb,QAAQ,6BAAqB,mCAAmC,yBAAiB,IAAI;YACnF,4DAA4D,CAC/D,CAAC;KACH;SAAM;QACL,OAAO,SAAS,CAAC;KAClB;AACH,CAAC,CAAC;AAxBW,QAAA,aAAa,iBAwBxB;AAEF;;GAEG;AACI,MAAM,WAAW,GAAG,CACzB,UAAU,GAAG,mCAAwB,CAAC,oBAAoB,EACxB,EAAE;IACpC,IAAI,CAAC,UAAU,EAAE;QACf,OAAO,SAAS,CAAC;KAClB;IAED,MAAM,MAAM,GAAa,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAC/C,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;QAC1C,MAAM,IAAI,KAAK,CAAC,yDAAyD,CAAC,CAAC;KAC5E;IAED,OAAO;QACL,WAAW,EAAE,MAAM,CAAC,CAAC,CAAC;QACtB,eAAe,EAAE,MAAM,CAAC,CAAC,CAAC;QAC1B,YAAY,EAAE,MAAM,CAAC,CAAC,CAAC;KACxB,CAAC;AACJ,CAAC,CAAC;AAjBW,QAAA,WAAW,eAiBtB","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { EnvironmentConfiguration } from '@rushstack/rush-sdk';\n\nexport const AWS_ACCESS_KEY_ID: 'AWS_ACCESS_KEY_ID' = 'AWS_ACCESS_KEY_ID';\nexport const AWS_SECRET_ACCESS_KEY: 'AWS_SECRET_ACCESS_KEY' = 'AWS_SECRET_ACCESS_KEY';\nexport const AWS_SESSION_TOKEN: 'AWS_SESSION_TOKEN' = 'AWS_SESSION_TOKEN';\n\n/**\n * Credentials for authorizing and signing requests to an Amazon S3 endpoint.\n *\n * @public\n */\nexport interface IAmazonS3Credentials {\n  accessKeyId: string;\n  secretAccessKey: string;\n  sessionToken: string | undefined;\n}\n\n/**\n * Attempt to read credentials from the commonly used AWS_* env vars.\n */\nexport const fromAmazonEnv = (): IAmazonS3Credentials | undefined => {\n  const accessKeyId: string | undefined = process.env[AWS_ACCESS_KEY_ID];\n  const secretAccessKey: string | undefined = process.env[AWS_SECRET_ACCESS_KEY];\n  const sessionToken: string | undefined = process.env[AWS_SESSION_TOKEN];\n\n  if (accessKeyId && secretAccessKey) {\n    return {\n      accessKeyId,\n      secretAccessKey,\n      sessionToken\n    };\n  } else if (accessKeyId) {\n    throw new Error(\n      `The \"${AWS_ACCESS_KEY_ID}\" env variable is set, but the \"${AWS_SECRET_ACCESS_KEY}\" ` +\n        `env variable is not set. Both or neither must be provided.`\n    );\n  } else if (secretAccessKey) {\n    throw new Error(\n      `The \"${AWS_SECRET_ACCESS_KEY}\" env variable is set, but the \"${AWS_ACCESS_KEY_ID}\" ` +\n        `env variable is not set. Both or neither must be provided.`\n    );\n  } else {\n    return undefined;\n  }\n};\n\n/**\n * Attempt to parse credentials set from the RUSH_BUILD_CACHE_CREDENTIAL env var.\n */\nexport const fromRushEnv = (\n  credential = EnvironmentConfiguration.buildCacheCredential\n): IAmazonS3Credentials | undefined => {\n  if (!credential) {\n    return undefined;\n  }\n\n  const fields: string[] = credential.split(':');\n  if (fields.length < 2 || fields.length > 3) {\n    throw new Error(`Rush build cache credential is in an unexpected format.`);\n  }\n\n  return {\n    accessKeyId: fields[0],\n    secretAccessKey: fields[1],\n    sessionToken: fields[2]\n  };\n};\n"]}