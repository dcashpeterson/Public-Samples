"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ViewNavigator = void 0;
var tslib_1 = require("tslib");
var BaseAdaptiveCardQuickView_1 = require("../quickView/BaseAdaptiveCardQuickView");
var ViewRegistry_1 = require("./ViewRegistry");
/**
 * A simple implemenation of the card view that is used while the defer load of
 * a quickview is happening.
 */
var EmptyQuickView = /** @class */ (function (_super) {
    tslib_1.__extends(EmptyQuickView, _super);
    function EmptyQuickView() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(EmptyQuickView.prototype, "data", {
        get: function () {
            return {};
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmptyQuickView.prototype, "template", {
        get: function () {
            return {};
        },
        enumerable: false,
        configurable: true
    });
    return EmptyQuickView;
}(BaseAdaptiveCardQuickView_1.BaseAdaptiveCardQuickView));
/**
 * Manages a stack of views.
 *
 * @remarks The top of the stack represents the currently rendered view.
 *
 * @public
 */
var ViewNavigator = /** @class */ (function () {
    function ViewNavigator(handleStackChangedCallback, handleInitializeCallback) {
        this._handleStackChangedCallback = handleStackChangedCallback;
        this._handleInitializeCallback = handleInitializeCallback;
        this._viewStack = new Array();
        this._viewCache = new Map();
        this._viewRegistry = new ViewRegistry_1.ViewRegistry();
    }
    /**
     * Registers a new view.
     *
     * @remarks `initializer` must return an instance of a {@link BaseView} or a Promise of a {@link BaseView}.
     *          The promise allows developers with large quickviews to defer / chunk in the quickview code on
     *          demand
     *
     * @remarks `initializer` is not called until `id` is pushed onto the view stack.
     *
     * @remarks A View with a given `id` is only initialized once, and the instance is reused if it is pushed more than once
     *
     * @param id - Unique identifier for the view.
     * @param initializer - Function that returns a new view - or a promise to a new view - which is only called if no view with the `id` already exists.
     */
    ViewNavigator.prototype.register = function (id, initializer) {
        this._viewRegistry.register(id, initializer);
    };
    /**
     * Pushes a new view to the top of the view stack.
     *
     * {@link BaseAdaptiveCardExtension.setState}, which will also trigger a render.
     *
     * @param id - Unique identifier for the view.
     * @param skipUpdate - Whether to skip the update (and re-render) after pushing the new view.
     */
    ViewNavigator.prototype.push = function (id, skipUpdate) {
        if (skipUpdate === void 0) { skipUpdate = false; }
        this._push(id);
        this._handleStackChangedCallback(skipUpdate);
    };
    /**
     * Replaces the top view with a new view.
     *
     * {@link BaseAdaptiveCardExtension.setState}, which will also trigger a render.
     *
     * @param id - Unique identifier for the view.
     * @param skipUpdate - Whether to skip the update (and re-render) after replacing the current view.
     */
    ViewNavigator.prototype.replace = function (id, skipUpdate) {
        if (skipUpdate === void 0) { skipUpdate = false; }
        this._pop();
        this._push(id);
        this._handleStackChangedCallback(skipUpdate);
    };
    /**
     * If there is more than one View, pops the top View from the View stack.
     *
     * {@link BaseAdaptiveCardExtension.setState}, which will also trigger a render.
     *
     * @param skipUpdate - Whether to skip the update (and re-render) after popping the current View.
     */
    ViewNavigator.prototype.pop = function (skipUpdate) {
        if (skipUpdate === void 0) { skipUpdate = false; }
        if (this.size > 1) {
            this._pop();
            this._handleStackChangedCallback(skipUpdate);
        }
    };
    Object.defineProperty(ViewNavigator.prototype, "size", {
        /**
         * Current size of the View stack.
         */
        get: function () {
            return this._viewStack.length;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ViewNavigator.prototype, "currentId", {
        /**
         * Get the id of the currently rendered View from the top of the View stack
         * @remarks If the stack is empty, this will return undefined
         */
        get: function () {
            var size = this.size;
            return size ? this._viewStack[size - 1] : undefined;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ViewNavigator.prototype, "_currentView", {
        /**
         * Currently rendered View from the top of the View stack
         * @internal
         */
        get: function () {
            return this._viewCache.get(this._viewStack[this.size - 1]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ViewNavigator.prototype, "viewStack", {
        /**
         *
         * @internal
         */
        get: function () {
            return this._viewStack;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Clear the stack.
     *
     * @internal
     */
    ViewNavigator.prototype._clear = function () {
        this._viewStack = [];
    };
    /**
     * @internal
     */
    ViewNavigator.prototype._forEach = function (callback) {
        this._viewCache.forEach(callback);
    };
    /**
     * Current size of the View registry.
     *
     * @internal
     */
    ViewNavigator.prototype._getRegistrySize = function () {
        return this._viewRegistry.size;
    };
    ViewNavigator.prototype._push = function (id) {
        var _this = this;
        var cachedView = this._viewCache.get(id);
        if (cachedView === undefined) {
            var viewInitializer = this._viewRegistry.consume(id);
            var view = viewInitializer();
            if (view instanceof Promise) {
                var viewPromise = view;
                viewPromise
                    .then(function (value) {
                    _this._handleInitializeCallback(value);
                    // update the cached view.
                    _this._viewCache.set(id, value);
                    _this._handleStackChangedCallback(false);
                })
                    .catch(function (e) {
                    // eslint-disable-next-line no-console
                    console.error('could not load quickview', e);
                });
                view = new EmptyQuickView();
            }
            else {
                view = view;
            }
            this._handleInitializeCallback(view);
            this._viewCache.set(id, view);
        }
        this._viewStack.push(id);
    };
    ViewNavigator.prototype._pop = function () {
        this._viewStack.pop();
    };
    return ViewNavigator;
}());
exports.ViewNavigator = ViewNavigator;
//# sourceMappingURL=ViewNavigator.js.map