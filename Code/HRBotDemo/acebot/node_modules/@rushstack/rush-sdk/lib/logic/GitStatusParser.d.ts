export interface IGitStatusEntryBase {
    kind: 'untracked' | 'changed' | 'unmerged' | 'renamed' | 'copied';
    path: string;
}
export interface IUntrackedGitStatusEntry extends IGitStatusEntryBase {
    kind: 'untracked';
}
export type GitStatusChangeType = 'added' | 'deleted' | 'modified' | 'renamed' | 'copied' | 'type-changed';
export interface IChangedGitStatusEntryFields {
    stagedChangeType: GitStatusChangeType | undefined;
    unstagedChangeType: GitStatusChangeType | undefined;
    isInSubmodule: boolean;
    headFileMode: string;
    indexFileMode: string;
    worktreeFileMode: string;
    headObjectName: string;
    indexObjectName: string;
}
export interface IChangedGitStatusEntry extends IGitStatusEntryBase, IChangedGitStatusEntryFields {
    kind: 'changed';
}
export interface IRenamedOrCopiedGitStatusEntry extends IGitStatusEntryBase, IChangedGitStatusEntryFields {
    kind: 'renamed' | 'copied';
    renameOrCopyScore: number;
    originalPath: string;
}
export interface IUnmergedGitStatusEntry extends IGitStatusEntryBase {
    kind: 'unmerged';
    stagedChangeType: GitStatusChangeType | undefined;
    unstagedChangeType: GitStatusChangeType | undefined;
    isInSubmodule: boolean;
    stage1FileMode: string;
    stage2FileMode: string;
    stage3FileMode: string;
    worktreeFileMode: string;
    stage1ObjectName: string;
    stage2ObjectName: string;
    stage3ObjectName: string;
}
export type IGitStatusEntry = IUntrackedGitStatusEntry | IChangedGitStatusEntry | IRenamedOrCopiedGitStatusEntry | IUnmergedGitStatusEntry;
export declare function parseGitStatus(gitStatusOutput: string): Iterable<IGitStatusEntry>;
//# sourceMappingURL=GitStatusParser.d.ts.map