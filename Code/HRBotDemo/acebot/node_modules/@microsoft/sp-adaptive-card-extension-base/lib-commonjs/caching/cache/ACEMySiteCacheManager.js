"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ACEMySiteCacheManager = void 0;
var tslib_1 = require("tslib");
var sp_diagnostics_1 = require("@microsoft/sp-diagnostics");
var sp_http_base_1 = require("@microsoft/sp-http-base");
var Killswitches_1 = require("../../common/Killswitches");
var BaseAdaptiveCardExtensionCache_1 = require("./BaseAdaptiveCardExtensionCache");
/**
 * LKG Cache which uses MySiteCache as its backing store.
 *
 * @internal
 */
var ACEMySiteCacheManager = /** @class */ (function (_super) {
    tslib_1.__extends(ACEMySiteCacheManager, _super);
    function ACEMySiteCacheManager(serviceScope) {
        var _this = _super.call(this) || this;
        _this._serviceScope = serviceScope;
        _this._cacheEntries = {};
        _this._cacheProvider = _this._serviceScope.consume((0, sp_http_base_1._getCacheDataProviderServiceKey)())._provider;
        _this._providerPromises = new Map();
        return _this;
    }
    ACEMySiteCacheManager.instance = function (serviceScope) {
        if (!ACEMySiteCacheManager._instance) {
            ACEMySiteCacheManager._instance = new ACEMySiteCacheManager(serviceScope);
        }
        return ACEMySiteCacheManager._instance;
    };
    /**
     * Saves an ACECacheEntry to MySiteCache.
     *
     * @param key - dashboard web part instance Id or ACE instance Id
     * @param instanceId - ACE instance Id
     * @param data - cache data that needs to be saved to MySiteCache
     */
    ACEMySiteCacheManager.prototype.save = function (key, instanceId, data) {
        var _a;
        var _b;
        var extendedCacheInfo = key !== instanceId ? 'DashboardWebPart' : 'DashboardPage';
        var qosMonitor = new sp_diagnostics_1._QosMonitor("ACEMySiteCache.save.".concat(extendedCacheInfo));
        var cacheKey = { key: key };
        if (!(0, Killswitches_1.isSafeCheckUndefinedCacheProviderKSActivated)() && !this._cacheProvider) {
            qosMonitor.writeExpectedFailure('cacheProvider is undefined');
            return;
        }
        if (!this._cacheEntries[key]) {
            var cacheEntry = (_a = {}, _a[instanceId] = data, _a);
            this._cacheEntries[key] = cacheEntry;
        }
        this._cacheEntries[key][instanceId] = data;
        (_b = this._cacheProvider) === null || _b === void 0 ? void 0 : _b.setData(cacheKey, this._cacheEntries[key], this._getCacheConfig(key)).then(function (isDataSaved) {
            if (isDataSaved) {
                qosMonitor.writeSuccess({
                    isDataSaved: isDataSaved
                });
                return Promise.resolve();
            }
            qosMonitor.writeUnexpectedFailure('dataIsNotSaved');
        }).catch(function (err) {
            qosMonitor.writeUnexpectedFailure('mySiteCacheSetDataFailed', err);
        });
    };
    ACEMySiteCacheManager.prototype.get = function (key, instanceId) {
        return _super.prototype.get.call(this, key, instanceId);
    };
    /**
     * Fetches cached data using the key and instanceId
     *
     * @param key - dashboard web part instance Id or ACE instance Id
     * @param instanceId - ACE instance Id
     * @returns - cached ace data
     */
    ACEMySiteCacheManager.prototype.getFromSource = function (key, instanceId) {
        var _this = this;
        var extendedCacheInfo = key !== instanceId ? 'DashboardWebPart' : 'DashboardPage';
        var qosMonitor = new sp_diagnostics_1._QosMonitor("ACEMySiteCache.getFromSource.".concat(extendedCacheInfo));
        var cacheKey = { key: key };
        var ensureCache = this._providerPromises.get(key);
        if (!(0, Killswitches_1.isSafeCheckUndefinedCacheProviderKSActivated)() && !this._cacheProvider) {
            qosMonitor.writeExpectedFailure('cacheProvider is undefined');
            return Promise.resolve(undefined);
        }
        if (!ensureCache) {
            ensureCache = this._cacheProvider.getData(cacheKey, this._getCacheConfig(key))
                .then(function (cachedData) {
                qosMonitor.writeSuccess();
                return cachedData.data;
            })
                .then(function (mySiteCacheData) {
                _this._populateLocalCache(key, mySiteCacheData);
            })
                .catch(function (err) {
                _this._providerPromises.delete(key);
                var extraData = { instanceId: instanceId };
                if (err.errorCode === 100001 /* AppCacheDataErrorType.CacheMissError */) {
                    qosMonitor.writeExpectedFailure('cacheMiss', err, extraData);
                }
                else {
                    qosMonitor.writeUnexpectedFailure('unexpectedError', err, extraData);
                }
                return Promise.reject(err);
            });
            this._providerPromises.set(key, ensureCache);
        }
        return ensureCache.then(function () {
            return _this._cacheEntries[key] ? _this._cacheEntries[key][instanceId] : undefined;
        });
    };
    ACEMySiteCacheManager.prototype._populateLocalCache = function (key, mySiteCacheData) {
        var instanceIds = Object.keys(mySiteCacheData);
        var cacheEntry = {};
        instanceIds.forEach(function (instanceId) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            cacheEntry[instanceId] = mySiteCacheData[instanceId];
        });
        this._cacheEntries[key] = cacheEntry;
    };
    ACEMySiteCacheManager.prototype._getCacheConfig = function (key) {
        return {
            cacheStrategy: sp_http_base_1._CacheStrategy.CacheAndNetwork,
            expirationDuration: undefined,
            id: key,
            alias: 'ACEMySiteCacheManager',
            extraProps: ACEMySiteCacheManager._cacheExtraProps
        };
    };
    ACEMySiteCacheManager._cacheExtraProps = new Map([
        ['onlyMySiteCache', true]
    ]);
    return ACEMySiteCacheManager;
}(BaseAdaptiveCardExtensionCache_1.BaseAdaptiveCardExtensionCache));
exports.ACEMySiteCacheManager = ACEMySiteCacheManager;
//# sourceMappingURL=ACEMySiteCacheManager.js.map