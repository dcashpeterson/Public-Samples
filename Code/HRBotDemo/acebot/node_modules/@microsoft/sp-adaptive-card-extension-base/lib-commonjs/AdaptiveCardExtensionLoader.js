"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AdaptiveCardExtensionLoader = exports.ASHA_ACE_LOAD_FAILURE = void 0;
var tslib_1 = require("tslib");
var sp_loader_1 = require("@microsoft/sp-loader");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var sp_diagnostics_1 = require("@microsoft/sp-diagnostics");
var sp_telemetry_1 = require("@ms/sp-telemetry");
var AdaptiveCardExtensionContext_1 = require("./AdaptiveCardExtensionContext");
var ICachedLoadParameters_1 = require("./caching/ICachedLoadParameters");
var Killswitches_1 = require("./common/Killswitches");
var INIT_FAILURE = 'AdaptiveCardExtensionInitializationFailed';
var LOAD_FAILURE = 'AdaptiveCardExtensionLoadFailed';
exports.ASHA_ACE_LOAD_FAILURE = 'Adaptive Card Extension Failure';
/**
 * BaseAdaptiveCardExtension loader.
 *
 * @internal
 */
var AdaptiveCardExtensionLoader = /** @class */ (function () {
    function AdaptiveCardExtensionLoader() {
        // noop
    }
    AdaptiveCardExtensionLoader._createQosExtraData = function (_a, appHostType) {
        var aceData = _a.aceData, deviceContext = _a.deviceContext, initialDisplayMode = _a.initialDisplayMode, manifest = _a.manifest, getPositionOnPage = _a.getPositionOnPage, workloadName = _a.workloadName;
        var questExtraData = {
            alias: manifest.alias,
            deviceContext: deviceContext,
            displayMode: initialDisplayMode,
            isInternal: manifest.isInternal,
            instanceId: aceData.instanceIdForLogs ? aceData.instanceIdForLogs : aceData.instanceId,
            manifestId: manifest.id,
            mpnId: manifest.mpnId,
            scenarioId: sp_telemetry_1._PerformanceLogger.getScenarioId(),
            storeAppId: manifest.storeAppId,
            teamsHosted: sp_core_library_1._BrowserUtilities.isTeamsHosted(),
            isIntentional: true,
            cardSize: aceData.cardSize,
            workLoad: workloadName
        };
        if (getPositionOnPage) {
            var cardPositionInfo = getPositionOnPage();
            if (cardPositionInfo) {
                questExtraData.cardPosition = cardPositionInfo.componentOrder;
                questExtraData.NumberOfCardsAudienceTargeted = cardPositionInfo.numberOfSectionComponents;
            }
        }
        if (!(0, Killswitches_1.isAddAppHostTypeToCardActionKSActivated)()) {
            // when gradutaing isAddAppHostTypeToCardActionKSActivated include appHostType to questExtraData when object is created.
            questExtraData.appHostType = appHostType;
        }
        return questExtraData;
    };
    /**
     * Load an Adaptive Card Extension.
     *
     * @remarks Returning the extension instance will enable the host to directly interact with the ACE
     * rather than using the manager as an intermediary.
     *
     * @remarks We pass the host through the context to enable the ACE to invoke functionality from the host.
     *
     * @param loadContext - See {@link _IAdaptiveCardExtensionLoadContext}
     */
    AdaptiveCardExtensionLoader.prototype.load = function (loadContext) {
        var _this = this;
        var appHostType = sp_core_library_1._BrowserUtilities.getTeamsAppType();
        var monitor = new sp_diagnostics_1._QosMonitor('AdaptiveCardExtension.Load', true, true);
        var extraData = AdaptiveCardExtensionLoader._createQosExtraData(loadContext, appHostType);
        // SPARC team owns an expensive operation to add new dimensions. We use 'WebPart' instead of 'AdaptiveCardExtension' to work around creating a new dimension
        var tagName = "WebPart.ACE_".concat(loadContext.manifest.alias, ".").concat(loadContext.manifest.isInternal ? 'internal' : 'external', ".").concat(loadContext.instanceId);
        var thrownError;
        var loadedAce;
        sp_telemetry_1._PerformanceLogger.startMarkForComponent(tagName);
        return sp_loader_1.SPComponentLoader.loadComponent(loadContext.manifest)
            .then(function (module) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            if (module.default) {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                module = module.default;
            }
            sp_telemetry_1._PerformanceLogger.markComponentModuleLoaded(tagName);
            return new module();
        })
            .catch(function (error) {
            if (loadContext.manifest.isInternal &&
                loadContext.initialDisplayMode === sp_core_library_1.DisplayMode.Edit &&
                loadContext.logEditCustomerPromiseFailure) {
                loadContext.logEditCustomerPromiseFailure(loadContext.manifest.alias, error.message, LOAD_FAILURE);
            }
            sp_telemetry_1._PerformanceLogger.endFailureForComponent(tagName, LOAD_FAILURE, error, undefined /** Result Type */, !(0, Killswitches_1.isAddVetoForACEKSActivated)() ? exports.ASHA_ACE_LOAD_FAILURE : undefined);
            monitor.writeUnexpectedFailure(LOAD_FAILURE, error, extraData);
            thrownError = error;
            throw error;
        })
            .then(function (ace) {
            var cachedLoadParameters = loadContext.cacheObject
                ? (0, ICachedLoadParameters_1._createCachedLoadParameters)(loadContext.cacheObject)
                : undefined;
            loadedAce = ace;
            loadedAce._internalInitialize(_this._getContext(loadContext), loadContext.addedFromPersistedData, loadContext.initialDisplayMode, tagName, !!cachedLoadParameters, !(0, Killswitches_1.isAddAppHostTypeToCardActionKSActivated)() ? appHostType : undefined);
            loadedAce._internalDeserialize(loadContext.aceData);
            loadContext.host.onBeforeInitialized(loadedAce);
            return loadedAce.onInit(cachedLoadParameters);
        })
            .then(function () {
            sp_telemetry_1._PerformanceLogger.markComponent(tagName, 'init');
            var writeSuccessExtraData = (0, Killswitches_1.isLogEngagementExtraDataKSActivated)()
                ? extraData
                : tslib_1.__assign(tslib_1.__assign({}, extraData), loadedAce._aceLoadExtraData);
            monitor.writeSuccess(writeSuccessExtraData);
            loadedAce._internalOnAfterInit();
            return loadedAce;
        })
            .catch(function (error) {
            if (!thrownError) {
                if (loadContext.manifest.isInternal &&
                    loadContext.initialDisplayMode === sp_core_library_1.DisplayMode.Edit &&
                    loadContext.logEditCustomerPromiseFailure) {
                    loadContext.logEditCustomerPromiseFailure(loadContext.manifest.alias, error.message, INIT_FAILURE);
                }
                sp_telemetry_1._PerformanceLogger.endFailureForComponent(tagName, INIT_FAILURE, error, undefined /** Result Type */, !(0, Killswitches_1.isAddVetoForACEKSActivated)() ? exports.ASHA_ACE_LOAD_FAILURE : undefined);
                var writeFailureExtraData = (0, Killswitches_1.isLogEngagementExtraDataKSActivated)()
                    ? extraData
                    : tslib_1.__assign(tslib_1.__assign({}, extraData), loadedAce === null || loadedAce === void 0 ? void 0 : loadedAce._aceLoadExtraData);
                if (!(0, Killswitches_1.isCatchNullBotResponseDataKSActivated)() && error.name === 'SchemaError') {
                    monitor.writeExpectedFailure(INIT_FAILURE, error, writeFailureExtraData);
                }
                else {
                    monitor.writeUnexpectedFailure(INIT_FAILURE, error, writeFailureExtraData);
                }
            }
            throw error;
        });
    };
    AdaptiveCardExtensionLoader.prototype._getContext = function (loadContext) {
        return new AdaptiveCardExtensionContext_1.AdaptiveCardExtensionContext({
            host: loadContext.host,
            manifest: loadContext.manifest,
            instanceId: loadContext.instanceId,
            parentServiceScope: loadContext.serviceScope,
            loggingTag: '',
            deviceContext: loadContext.deviceContext,
            location: loadContext.location,
            hostContext: loadContext.hostContext,
            sdks: loadContext.sdks,
            logEditCustomerPromiseFailure: loadContext.logEditCustomerPromiseFailure,
            getPositionOnPage: loadContext.getPositionOnPage
        });
    };
    return AdaptiveCardExtensionLoader;
}());
exports.AdaptiveCardExtensionLoader = AdaptiveCardExtensionLoader;
//# sourceMappingURL=AdaptiveCardExtensionLoader.js.map