"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = __importStar(require("path"));
const node_core_library_1 = require("@rushstack/node-core-library");
const PluginNames_1 = require("../PluginNames");
const WebpackConfigurationGenerator_1 = require("./WebpackConfigurationGenerator");
const configJsonReader_1 = require("../../spfxConfig/configJsonReader");
const configJsonMigrator_1 = require("../../spfxConfig/configJsonMigrator");
const WEBPACK4_PLUGIN_NAME = 'webpack4-plugin';
class WebpackConfigurationPlugin {
    get accessor() {
        if (!this._accessor) {
            this._accessor = {
                properties: {}
            };
        }
        return this._accessor;
    }
    static getSpfxWebpackFolders(buildFolder) {
        return {
            buildFolder: buildFolder,
            tempFolder: path.join(buildFolder, 'temp'),
            releaseFolder: path.join(buildFolder, 'release'),
            outputFolder: path.join(buildFolder, 'dist')
        };
    }
    /**
     * Generate the SPFx component webpack configuration
     */
    apply(taskSession, heftConfiguration) {
        const emitStatsParameter = taskSession.parameters.getFlagParameter('--emit-stats');
        taskSession.requestAccessToPluginByName('@rushstack/heft-webpack4-plugin', WEBPACK4_PLUGIN_NAME, (accessor) => {
            accessor.hooks.onLoadConfiguration.tapPromise(PluginNames_1.SpfxWebpackConfigurationPlugin, async () => {
                return await this._generateSpfxWebpackConfigurationAsync(taskSession, heftConfiguration, accessor.parameters.isServeMode, emitStatsParameter.value);
            });
        });
    }
    async _generateSpfxWebpackConfigurationAsync(taskSession, heftConfiguration, isServe, emitStats) {
        const { logger } = taskSession;
        const { properties: accessorProperties } = this.accessor;
        const configJson = this._loadConfigJson(heftConfiguration, logger, accessorProperties._allowMissingConfigJson);
        if (configJson) {
            accessorProperties.configJson = configJson;
            const locales = Array.from(taskSession.parameters.locales);
            return await WebpackConfigurationGenerator_1.WebpackConfigurationGenerator.generateWebpackConfigurationAsync({
                configJson: configJson,
                folders: WebpackConfigurationPlugin.getSpfxWebpackFolders(heftConfiguration.buildFolderPath),
                terminal: logger.terminal,
                production: taskSession.parameters.production,
                _includeIntegrityInManifestPaths: accessorProperties._includeIntegrityInManifestPaths,
                serveMode: isServe,
                projectPackageJson: heftConfiguration.projectPackageJson,
                getLocalization: accessorProperties.getLocalization,
                selectedLocales: (locales === null || locales === void 0 ? void 0 : locales.length) ? locales : undefined,
                linkedExternalsToBundle: accessorProperties.linkedExternalsToBundle,
                libraryName: accessorProperties.libraryName,
                libraryTarget: accessorProperties.libraryTarget,
                disableAsyncComponentLoading: accessorProperties.disableAsyncComponentLoading,
                assetsAreVersioned: accessorProperties.assetsAreVersioned,
                generateCssClassName: accessorProperties.generateCssClassName,
                loadThemedStylesImportPath: accessorProperties.loadThemedStylesImportPath,
                releaseManifestFolderName: accessorProperties.releaseManifestFolderName,
                _manifestsJsFileMetadata: accessorProperties._manifestsJsFileMetadata,
                emitStats
            });
        }
        else {
            return undefined;
        }
    }
    _loadConfigJson(heftConfiguration, scopedLogger, allowMissingConfigJson) {
        const configFilePath = path.join(heftConfiguration.buildFolderPath, 'config', 'config.json');
        const configResult = (0, configJsonReader_1.readConfigFile)(scopedLogger.terminal.writeVerboseLine.bind(scopedLogger.terminal), configFilePath);
        if (configResult.missingFile && !allowMissingConfigJson) {
            scopedLogger.emitWarning(new Error('Missing config.json file. If this is a non-web project, consider using a non-web build rig ' +
                'like @rushstack/heft-node-rig'));
        }
        if (configResult.readError) {
            scopedLogger.emitError(new Error(`Error reading config.json file: ${configResult.readError}`));
            return undefined;
        }
        if (!configResult.isLatestVersion && !configResult.missingFile) {
            (0, configJsonMigrator_1.migrateToLatestVersion)(scopedLogger.terminal.writeWarningLine.bind(scopedLogger.terminal), configResult.configData);
            node_core_library_1.JsonFile.save(configResult.configData, configFilePath, { prettyFormatting: true });
            scopedLogger.emitWarning(new Error(`This project is using an old config.json file version (${configResult.version}). The ` +
                'config.json file has been migrated to the latest version.'));
        }
        return configResult.configData;
    }
}
exports.default = WebpackConfigurationPlugin;
//# sourceMappingURL=WebpackConfigurationPlugin.js.map