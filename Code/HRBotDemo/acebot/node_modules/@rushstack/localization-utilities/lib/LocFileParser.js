"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseLocFile = exports.selectParserByFilePath = void 0;
const parseLocJson_1 = require("./parsers/parseLocJson");
const parseResJson_1 = require("./parsers/parseResJson");
const parseResx_1 = require("./parsers/parseResx");
const parseCache = new Map();
function selectParserByFilePath(filePath) {
    if (/\.resx$/i.test(filePath)) {
        return 'resx';
    }
    else if (/\.(resx|loc)\.json$/i.test(filePath)) {
        return 'loc.json';
    }
    else if (/\.resjson$/i.test(filePath)) {
        return 'resjson';
    }
    else {
        throw new Error(`Unsupported file extension in file: ${filePath}`);
    }
}
exports.selectParserByFilePath = selectParserByFilePath;
/**
 * @public
 */
function parseLocFile(options) {
    const { parser = selectParserByFilePath(options.filePath) } = options;
    const fileCacheKey = `${options.filePath}?${parser}&${options.resxNewlineNormalization || 'none'}`;
    const parseCacheEntry = parseCache.get(fileCacheKey);
    if (parseCacheEntry) {
        if (parseCacheEntry.content === options.content &&
            parseCacheEntry.ignoreString === options.ignoreString) {
            return parseCacheEntry.parsedFile;
        }
    }
    let parsedFile;
    switch (parser) {
        case 'resx': {
            parsedFile = (0, parseResx_1.parseResx)(options);
            break;
        }
        case 'loc.json': {
            parsedFile = (0, parseLocJson_1.parseLocJson)(options);
            break;
        }
        case 'resjson': {
            parsedFile = (0, parseResJson_1.parseResJson)(options);
            break;
        }
        default: {
            throw new Error(`Unsupported parser: ${parser}`);
        }
    }
    parseCache.set(fileCacheKey, {
        content: options.content,
        parsedFile,
        ignoreString: options.ignoreString
    });
    return parsedFile;
}
exports.parseLocFile = parseLocFile;
//# sourceMappingURL=LocFileParser.js.map