"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiExtractorRunner = void 0;
const RushStackCompilerBase_1 = require("./RushStackCompilerBase");
const index_1 = require("./index");
const LoggingUtilities_1 = require("./LoggingUtilities");
/**
 * The ApiExtractorTask uses the api-extractor tool to analyze a project for public APIs. api-extractor will detect
 * common problems and generate a report of the exported public API. The task uses the entry point of a project to
 * find the aliased exports of the project. An api-extractor.ts file is generated for the project in the temp folder.
 * @beta
 */
class ApiExtractorRunner extends RushStackCompilerBase_1.RushStackCompilerBase {
    constructor(arg1, arg2, arg3, arg4, arg5) {
        let options;
        let extractorConfig;
        let extractorOptions;
        let rootPath;
        let terminalProvider;
        if (arg1 instanceof index_1.ApiExtractor.ExtractorConfig) {
            extractorConfig = arg1;
            extractorOptions = arg2;
            rootPath = arg3;
            terminalProvider = arg4;
            const loggingUtilities = new LoggingUtilities_1.LoggingUtilities(terminalProvider);
            options = loggingUtilities.getDefaultRushStackCompilerBaseOptions();
        }
        else {
            options = arg1;
            extractorConfig = arg2;
            extractorOptions = arg3;
            rootPath = arg4;
            terminalProvider = arg5;
        }
        super(options, rootPath, terminalProvider);
        this._extractorConfig = extractorConfig;
        this._extractorOptions = extractorOptions;
    }
    async invoke() {
        const extractorOptions = Object.assign(Object.assign({}, this._extractorOptions), { messageCallback: (message) => {
                switch (message.logLevel) {
                    case "error" /* ApiExtractor.ExtractorLogLevel.Error */: {
                        if (message.sourceFilePath) {
                            this._fileError(message.sourceFilePath, message.sourceFileLine, message.sourceFileColumn, message.category, message.text);
                        }
                        else {
                            this._terminal.writeErrorLine(message.text);
                        }
                        break;
                    }
                    case "warning" /* ApiExtractor.ExtractorLogLevel.Warning */: {
                        if (message.sourceFilePath) {
                            this._fileWarning(message.sourceFilePath, message.sourceFileLine, message.sourceFileColumn, message.category, message.text);
                        }
                        else {
                            this._terminal.writeWarningLine(message.text);
                        }
                        break;
                    }
                    case "info" /* ApiExtractor.ExtractorLogLevel.Info */: {
                        this._terminal.writeLine(message.text);
                        break;
                    }
                    case "verbose" /* ApiExtractor.ExtractorLogLevel.Verbose */: {
                        this._terminal.writeVerboseLine(message.text);
                        break;
                    }
                    default: {
                        return;
                    }
                }
                message.handled = true;
            } });
        // NOTE: ExtractorResult.succeeded indicates whether errors or warnings occurred, however we
        // already handle this above via our customLogger
        index_1.ApiExtractor.Extractor.invoke(this._extractorConfig, extractorOptions);
    }
}
exports.ApiExtractorRunner = ApiExtractorRunner;
//# sourceMappingURL=ApiExtractorRunner.js.map