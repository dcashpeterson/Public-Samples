import { AsyncParallelHook, AsyncSeriesHook, HookMap } from 'tapable';
import type { ITelemetryData } from '../logic/Telemetry';
import type { PhasedCommandHooks } from './PhasedCommandHooks';
/**
 * Information about the currently executing command provided to plugins.
 * @beta
 */
export interface IRushCommand {
    /**
     * The name of this command, as seen on the command line
     */
    readonly actionName: string;
}
/**
 * Information about the currently executing global script command (as defined in command-line.json) provided to plugins.
 * @beta
 */
export interface IGlobalCommand extends IRushCommand {
}
/**
 * Information about the currently executing phased script command (as defined in command-line.json, or default "build" or "rebuild") provided to plugins.
 * @beta
 */
export interface IPhasedCommand extends IRushCommand {
    /**
     * Hooks into the execution of the current phased command
     * @alpha
     */
    readonly hooks: PhasedCommandHooks;
}
/**
 * Hooks into the lifecycle of the Rush process invocation that plugins may tap into.
 *
 * @beta
 */
export declare class RushLifecycleHooks {
    /**
     * The hook to run before executing any Rush CLI Command.
     */
    initialize: AsyncSeriesHook<IRushCommand>;
    /**
     * The hook to run before executing any global Rush CLI Command (defined in command-line.json).
     */
    runAnyGlobalCustomCommand: AsyncSeriesHook<IGlobalCommand>;
    /**
     * A hook map to allow plugins to hook specific named global commands (defined in command-line.json) before execution.
     */
    runGlobalCustomCommand: HookMap<AsyncSeriesHook<IGlobalCommand>>;
    /**
     * The hook to run before executing any phased Rush CLI Command (defined in command-line.json, or the default "build" or "rebuild").
     */
    runAnyPhasedCommand: AsyncSeriesHook<IPhasedCommand>;
    /**
     * A hook map to allow plugins to hook specific named phased commands (defined in command-line.json) before execution.
     */
    runPhasedCommand: HookMap<AsyncSeriesHook<IPhasedCommand>>;
    /**
     * The hook to run between preparing the common/temp folder and invoking the package manager during "rush install" or "rush update".
     */
    beforeInstall: AsyncSeriesHook<IGlobalCommand>;
    /**
     * A hook to allow plugins to hook custom logic to process telemetry data.
     */
    flushTelemetry: AsyncParallelHook<[ReadonlyArray<ITelemetryData>]>;
}
//# sourceMappingURL=RushLifeCycle.d.ts.map