"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RushAmazonS3BuildCachePlugin = void 0;
const PLUGIN_NAME = 'AmazonS3BuildCachePlugin';
/**
 * @public
 */
class RushAmazonS3BuildCachePlugin {
    constructor() {
        this.pluginName = PLUGIN_NAME;
    }
    apply(rushSession, rushConfig) {
        rushSession.hooks.initialize.tap(PLUGIN_NAME, () => {
            rushSession.registerCloudBuildCacheProviderFactory('amazon-s3', async (buildCacheConfig) => {
                const { amazonS3Configuration } = buildCacheConfig;
                let options;
                const { s3Endpoint, s3Bucket, s3Region } = amazonS3Configuration;
                const s3Prefix = amazonS3Configuration.s3Prefix || undefined;
                const isCacheWriteAllowed = !!amazonS3Configuration.isCacheWriteAllowed;
                if (s3Prefix && s3Prefix[0] === '/') {
                    throw new Error('s3Prefix should not have a leading /');
                }
                // mutually exclusive
                if (s3Bucket && s3Endpoint) {
                    throw new Error('Only one of "s3Bucket" or "s3Endpoint" must be provided.');
                }
                if (s3Endpoint) {
                    options = {
                        // IAmazonS3BuildCacheProviderOptionsAdvanced
                        s3Region,
                        s3Endpoint,
                        s3Prefix,
                        isCacheWriteAllowed
                    };
                }
                if (s3Bucket) {
                    options = {
                        // IAmazonS3BuildCacheProviderOptionsSimple
                        s3Region,
                        s3Bucket,
                        s3Prefix,
                        isCacheWriteAllowed
                    };
                }
                if (!options) {
                    throw new Error('You must provide either an s3Endpoint or s3Bucket');
                }
                const { AmazonS3BuildCacheProvider } = await Promise.resolve().then(() => __importStar(require('./AmazonS3BuildCacheProvider')));
                return new AmazonS3BuildCacheProvider(options, rushSession);
            });
        });
    }
}
exports.RushAmazonS3BuildCachePlugin = RushAmazonS3BuildCachePlugin;
//# sourceMappingURL=RushAmazonS3BuildCachePlugin.js.map