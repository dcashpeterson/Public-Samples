"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var LogLevel_1 = require("../LogLevel");
var LogEvent_1 = tslib_1.__importDefault(require("../Trace/LogEvent"));
/**
 * This handler adapts the sp-core-library Log to use the internal telemetry.
 * @internal
 */
var LogHandler = /** @class */ (function () {
    function LogHandler() {
    }
    LogHandler.prototype.verbose = function (source, message, scope) {
        var event = LogEvent_1.default.log(source, message, LogLevel_1.LogLevel.Verbose, scope);
        if (DEBUG && !DEPRECATED_UNIT_TEST) {
            // eslint-disable-next-line no-console
            console.log(event.toString());
        }
    };
    LogHandler.prototype.info = function (source, message, scope) {
        var event = LogEvent_1.default.log(source, message, LogLevel_1.LogLevel.Info, scope);
        if (DEBUG && !DEPRECATED_UNIT_TEST) {
            // eslint-disable-next-line no-console
            console.info(event.toString());
        }
    };
    LogHandler.prototype.warn = function (source, message, scope) {
        var event = LogEvent_1.default.log(source, message, LogLevel_1.LogLevel.Warning, scope);
        if (DEBUG && !DEPRECATED_UNIT_TEST) {
            // eslint-disable-next-line no-console
            console.warn(event.toString());
        }
    };
    LogHandler.prototype.error = function (source, error, scope) {
        var event = LogEvent_1.default.log(source, error, LogLevel_1.LogLevel.Error, scope);
        if (DEBUG && !DEPRECATED_UNIT_TEST) {
            // eslint-disable-next-line no-console
            console.error(event.toString());
        }
    };
    return LogHandler;
}());
exports.default = LogHandler;
//# sourceMappingURL=LogHandler.js.map