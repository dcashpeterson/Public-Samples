{"version":3,"file":"mechanics.js","sourceRoot":"","sources":["../src/mechanics.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport type { TSESLint, TSESTree } from '@typescript-eslint/experimental-utils';\r\nimport { AST_NODE_TYPES, ESLintUtils } from '@typescript-eslint/experimental-utils';\r\n\r\nimport { PackletAnalyzer, IAnalyzerError, InputFileMessageIds, ImportMessageIds } from './PackletAnalyzer';\r\n\r\nexport type MessageIds = InputFileMessageIds | ImportMessageIds;\r\ntype Options = [];\r\n\r\nconst mechanics: TSESLint.RuleModule<MessageIds, Options> = {\r\n  meta: {\r\n    type: 'problem',\r\n    messages: {\r\n      // InputFileMessageIds\r\n      'file-in-packets-folder': 'The \"packlets\" folder must not contain regular source files',\r\n      'invalid-packlet-name':\r\n        'Invalid packlet name \"{{packletName}}\".' +\r\n        ' The name must be lowercase alphanumeric words separated by hyphens. Example: \"my-packlet\"',\r\n      'misplaced-packlets-folder': 'The packlets folder must be located at \"{{expectedPackletsFolder}}\"',\r\n      'missing-src-folder': 'Expecting to find a \"src\" folder at: {{srcFolderPath}}',\r\n      'missing-tsconfig':\r\n        'In order to use @rushstack/eslint-plugin-packlets, your ESLint config file' +\r\n        ' must configure the TypeScript parser',\r\n      'packlet-folder-case': 'The packlets folder must be all lower case: {{packletsFolderPath}}',\r\n\r\n      // ImportMessageIds\r\n      'bypassed-entry-point':\r\n        'The import statement does not use the packlet\\'s entry point \"{{entryPointModulePath}}\"',\r\n      'circular-entry-point': 'Files under a packlet folder must not import from their own index.ts file',\r\n      'packlet-importing-project-file':\r\n        'A local project file cannot be imported.' +\r\n        \" A packlet's dependencies must be NPM packages and/or other packlets.\"\r\n    },\r\n    schema: [\r\n      {\r\n        type: 'object',\r\n        additionalProperties: false\r\n      }\r\n    ],\r\n    docs: {\r\n      description: 'Check that file paths and imports follow the basic mechanics for the packlet formalism',\r\n      // Deprecated in ESLint v8; Keep for backwards compatibility\r\n      category: 'Best Practices',\r\n      recommended: 'warn',\r\n      url: 'https://www.npmjs.com/package/@rushstack/eslint-plugin-packlets'\r\n    } as TSESLint.RuleMetaDataDocs\r\n  },\r\n\r\n  create: (context: TSESLint.RuleContext<MessageIds, Options>) => {\r\n    // Example: /path/to/my-project/src/packlets/my-packlet/index.ts\r\n    const inputFilePath: string = context.getFilename();\r\n\r\n    // Example: /path/to/my-project/tsconfig.json\r\n    const tsconfigFilePath: string | undefined = ESLintUtils.getParserServices(\r\n      context\r\n    ).program.getCompilerOptions()['configFilePath'] as string;\r\n\r\n    const packletAnalyzer: PackletAnalyzer = PackletAnalyzer.analyzeInputFile(\r\n      inputFilePath,\r\n      tsconfigFilePath\r\n    );\r\n    if (packletAnalyzer.nothingToDo) {\r\n      return {};\r\n    }\r\n\r\n    return {\r\n      // Match the first node in the source file.  Ideally we should be matching \"Program > :first-child\"\r\n      // so a warning doesn't highlight the whole file.  But that's blocked behind a bug in the query selector:\r\n      // https://github.com/estools/esquery/issues/114\r\n      Program: (node: TSESTree.Node): void => {\r\n        if (packletAnalyzer.error) {\r\n          context.report({\r\n            node: node,\r\n            messageId: packletAnalyzer.error.messageId,\r\n            data: packletAnalyzer.error.data\r\n          });\r\n        }\r\n      },\r\n\r\n      // ImportDeclaration matches these forms:\r\n      //   import { X } from '../../packlets/other-packlet';\r\n      //   import X from '../../packlets/other-packlet';\r\n      //   import type { X, Y } from '../../packlets/other-packlet';\r\n      //   import * as X from '../../packlets/other-packlet';\r\n      //\r\n      // ExportNamedDeclaration matches these forms:\r\n      //   export { X } from '../../packlets/other-packlet';\r\n      //\r\n      // ExportAllDeclaration matches these forms:\r\n      //   export * from '../../packlets/other-packlet';\r\n      //   export * as X from '../../packlets/other-packlet';\r\n      'ImportDeclaration, ExportNamedDeclaration, ExportAllDeclaration': (\r\n        node: TSESTree.ImportDeclaration | TSESTree.ExportNamedDeclaration | TSESTree.ExportAllDeclaration\r\n      ): void => {\r\n        if (node.source?.type === AST_NODE_TYPES.Literal) {\r\n          if (packletAnalyzer.projectUsesPacklets) {\r\n            // Extract the import/export module path\r\n            // Example: \"../../packlets/other-packlet\"\r\n            const modulePath = node.source.value;\r\n            if (typeof modulePath !== 'string') {\r\n              return;\r\n            }\r\n\r\n            if (!(modulePath.startsWith('.') || modulePath.startsWith('..'))) {\r\n              // It's not a local import.\r\n\r\n              // Examples:\r\n              //   import { X } from \"npm-package\";\r\n              //   import { X } from \"raw-loader!./webpack-file.ts\";\r\n              return;\r\n            }\r\n\r\n            const lint: IAnalyzerError | undefined = packletAnalyzer.analyzeImport(modulePath);\r\n            if (lint) {\r\n              context.report({\r\n                node: node,\r\n                messageId: lint.messageId,\r\n                data: lint.data\r\n              });\r\n            }\r\n          }\r\n        }\r\n      }\r\n    };\r\n  }\r\n};\r\n\r\nexport { mechanics };\r\n"]}