"use strict";
// Copyright (c) Microsoft. All rights reserved.
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Validate_1 = tslib_1.__importDefault(require("./Validate"));
var SPCoreLibraryStrings_resx_1 = tslib_1.__importDefault(require("./SPCoreLibraryStrings.resx"));
/**
 * The purpose of this class is to help make the SharePoint framework errors more robust.
 * On top of the base Error class functionality, this class adds the concept of error codes.
 * The error code could be a non-localized immutable string or an error number. All the
 * SharePoint framework code is expected to use this class for raising errors.
 *
 * References:
 *
 * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error}
 *
 * {@link http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript}
 *
 * @alpha
 */
var SPError = /** @class */ (function (_super) {
    tslib_1.__extends(SPError, _super);
    /**
     * Constructor for the SPError class.
     *
     * @param errorCode - a numeric or string error code.
     * @param message - detailed error message.
     * @param logProperties - (optional) additional data that can be used to troubleshoot rare to repro bugs.
     *
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    function SPError(errorCode, message, logProperties) {
        var _this = _super.call(this, message) || this;
        // Manually set the prototype, as we can no longer extend built-in classes like Error, Array, Map, etc
        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
        //
        // Note: the prototype must also be set on any classes which extend this one
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        _this.__proto__ = SPError.prototype;
        Validate_1.default.isNonemptyString(errorCode, 'errorCode');
        Validate_1.default.isNonemptyString(message, 'message');
        _this._errorCode = errorCode;
        _this.message = message;
        _this._logProperties = logProperties;
        // IE doesn't get a stack unless you throw an error explicitly. Throwing an SPError will not get you the stack.
        _this.stack = new Error().stack || SPError._generateErrorStackForIE();
        return _this;
    }
    Object.defineProperty(SPError.prototype, "id", {
        /**
         * Error id.
         * e.g. Value of the enum.
         */
        get: function () {
            return -1;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SPError.prototype, "category", {
        /**
         * Error category.
         */
        get: function () {
            return 'SPError';
        },
        enumerable: false,
        configurable: true
    });
    // Useful for generating an error stack on IE11 for SPError
    SPError._generateErrorStackForIE = function () {
        try {
            throw new Error();
        }
        catch (e) {
            return e.stack;
        }
    };
    /**
     * Return a string equivalent of the error for display purposes.
     *
     * @returns string representation of the error.
     */
    SPError.prototype.toStringForUI = function () {
        return this._toString(true);
    };
    /**
     * Return a string equivalent of the error for logging purposes.
     *
     * @returns string representation of the error.
     */
    SPError.prototype.toString = function () {
        return this._toString();
    };
    /**
     * Return a string equivalent of the error for logging or display purposes.
     *
     * @returns string representation of the error.
     */
    SPError.prototype._toString = function (logDebug) {
        if (!this._errorString) {
            var errorMessageArray = ["[".concat(this.category, ".").concat(this._errorCode, "]:"), "".concat(this.message), ''];
            if (logDebug || DEBUG) {
                // For now support only one level exception hierarchy.
                if (this.innerError) {
                    errorMessageArray = errorMessageArray.concat([
                        SPCoreLibraryStrings_resx_1.default.spErrorInnerErrorText,
                        this.innerError.message
                    ]);
                }
                if (this.stack) {
                    errorMessageArray = errorMessageArray.concat([SPCoreLibraryStrings_resx_1.default.spErrorCallStackText, this.stack]);
                }
                if (this._logProperties) {
                    errorMessageArray = errorMessageArray.concat([
                        SPCoreLibraryStrings_resx_1.default.spErrorLogPropertiesText,
                        JSON.stringify(this._logProperties)
                    ]);
                }
            }
            this._errorString = errorMessageArray.join('\r\n');
        }
        return this._errorString;
    };
    return SPError;
}(Error));
exports.default = SPError;
//# sourceMappingURL=SPError.js.map