"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const PluginNames_1 = require("../PluginNames");
const WEBPACK4_PLUGIN_NAME = 'webpack4-plugin';
/**
 * @public
 */
class WebpackServeConfigurationPlugin {
    get accessor() {
        if (!this._accessor) {
            this._accessor = {
                properties: {}
            };
        }
        return this._accessor;
    }
    /**
     * Generate the Webpack Dev Server configuration for SPFx component development
     */
    apply(taskSession, heftConfiguration) {
        taskSession.requestAccessToPluginByName('@rushstack/heft-webpack4-plugin', WEBPACK4_PLUGIN_NAME, (accessor) => {
            if (taskSession.parameters.watch && accessor.parameters.isServeMode) {
                accessor.hooks.onConfigure.tapPromise(PluginNames_1.SpfxWebpackServePlugin, async (config) => {
                    var _a, _b;
                    const additionalServePaths = await ((_b = (_a = this.accessor.properties).getAdditionalServePathsAsync) === null || _b === void 0 ? void 0 : _b.call(_a));
                    const { updateServeConfigAsync } = await Promise.resolve().then(() => __importStar(require('./updateServeConfigAsync')));
                    return updateServeConfigAsync(taskSession, heftConfiguration, additionalServePaths, config);
                });
            }
        });
    }
}
exports.default = WebpackServeConfigurationPlugin;
//# sourceMappingURL=WebpackServeConfigurationPlugin.js.map