{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport type { RawSourceMap } from 'source-map';\n\n/**\n * Request to the minifier\n * @public\n */\nexport interface IModuleMinificationRequest {\n  /**\n   * Identity of the request. Will be included in the response.\n   */\n  hash: string;\n  /**\n   * The raw code fragment\n   */\n  code: string;\n  /**\n   * File name to show for the source code in the source map\n   */\n  nameForMap: string | undefined;\n  /**\n   * Reserved variable names, e.g. __WEBPACK_EXTERNAL_MODULE_1__\n   */\n  externals: string[] | undefined;\n}\n\n/**\n * Result from the minifier function when an error is encountered.\n * @public\n */\nexport interface IModuleMinificationErrorResult {\n  /**\n   * Identity of the request\n   */\n  hash: string;\n  /**\n   * The error encountered, to be added to the current compilation's error collection.\n   */\n  error: Error;\n  /**\n   * Marker property to always return the same result shape.\n   */\n  code?: undefined;\n  /**\n   * Marker property to always return the same result shape.\n   */\n  map?: undefined;\n}\n\n/**\n * Result from the minifier on a successful minification.\n * @public\n */\nexport interface IModuleMinificationSuccessResult {\n  /**\n   * Identity of the request\n   */\n  hash: string;\n  /**\n   * The error property being `undefined` indicates success.\n   */\n  error: undefined;\n  /**\n   * The minified code.\n   */\n  code: string;\n  /**\n   * Marker property to always return the same result shape.\n   */\n  map?: RawSourceMap;\n}\n\n/**\n * Result from the minifier.\n * @public\n */\nexport type IModuleMinificationResult = IModuleMinificationErrorResult | IModuleMinificationSuccessResult;\n\n/**\n * Callback passed to a minifier function\n * @public\n */\nexport interface IModuleMinificationCallback {\n  (result: IModuleMinificationResult): void;\n}\n\n/**\n * An async function called to minify a chunk of code\n * @public\n */\nexport interface IModuleMinifierFunction {\n  (request: IModuleMinificationRequest, callback: IModuleMinificationCallback): void;\n}\n\n/**\n * Metadata from the minifier for the plugin\n * @public\n */\nexport interface IMinifierConnection {\n  /**\n   * Hash of the configuration of this minifier, for cache busting.\n   */\n  configHash: string;\n  /**\n   * Callback to be invoked when done with the minifier\n   */\n  disconnect(): Promise<void>;\n}\n\n/**\n * Object that can be invoked to minify code.\n * @public\n */\nexport interface IModuleMinifier {\n  /**\n   * Asynchronously minify a module\n   */\n  minify: IModuleMinifierFunction;\n\n  /**\n   * Prevents the minifier from shutting down until the returned `disconnect()` callback is invoked.\n   * The callback may be used to surface errors encountered by the minifier that may not be relevant to a specific file.\n   * It should be called to allow the minifier to cleanup\n   */\n  connect(): Promise<IMinifierConnection>;\n}\n"]}