{"version":3,"file":"no-unsafe-regexp.test.js","sourceRoot":"","sources":["../src/no-unsafe-regexp.test.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,8EAAoE;AACpE,yDAAoD;AAEpD,MAAM,EAAE,UAAU,EAAE,GAAG,gCAAW,CAAC;AACnC,MAAM,UAAU,GAAG,IAAI,UAAU,CAAC;IAChC;;;;;OAKG;IACH,MAAM,EAAE,OAAO,CAAC,OAAO,CAAC,2BAA2B,CAAgC;CACpF,CAAC,CAAC;AAEH,UAAU,CAAC,GAAG,CAAC,kBAAkB,EAAE,iCAAc,EAAE;IACjD,OAAO,EAAE;QACP;YACE,kBAAkB;YAClB,IAAI,EAAE;gBACJ,yBAAyB;gBACzB,6BAA6B;gBAC7B,GAAG;aACJ,CAAC,IAAI,CAAC,IAAI,CAAC;YACZ,MAAM,EAAE,CAAC,EAAE,SAAS,EAAE,qBAAqB,EAAE,CAAC;SAC/C;KACF;IACD,KAAK,EAAE;QACL;YACE,IAAI,EAAE,8BAA8B;SACrC;KACF;CACF,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { ESLintUtils } from '@typescript-eslint/experimental-utils';\nimport { noUnsafeRegExp } from './no-unsafe-regexp';\n\nconst { RuleTester } = ESLintUtils;\nconst ruleTester = new RuleTester({\n  /*\n   * The underlying API requires an absolute path. `@typescript-eslint/utils` calls `require.resolve()` on the input\n   * and forces it to be of type '@typescript-eslint/parser' but does not have a dependency on `@typescript-eslint/parser`\n   * This means that it will always fail to resolve in a strict environment.\n   * Fortunately `require.resolve(absolutePath)` returns `absolutePath`, so we can resolve it first and cast.\n   */\n  parser: require.resolve('@typescript-eslint/parser') as '@typescript-eslint/parser'\n});\n\nruleTester.run('no-unsafe-regexp', noUnsafeRegExp, {\n  invalid: [\n    {\n      // prettier-ignore\n      code: [\n        'function f(s: string) {',\n        '  const r1 = new RegExp(s);',\n        '}'\n      ].join('\\n'),\n      errors: [{ messageId: 'error-unsafe-regexp' }]\n    }\n  ],\n  valid: [\n    {\n      code: 'const r1 = new RegExp(\".*\");'\n    }\n  ]\n});\n"]}