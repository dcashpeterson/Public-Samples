"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceKeys = void 0;
var tslib_1 = require("tslib");
var ServiceKey_1 = tslib_1.__importDefault(require("../ServiceKey"));
/**
 * Centralized list of service keys used.
 * Maintaining all the service keys here, would make consumption of services
 * free of any cyclic dependencies.
 *
 * @internal
 */
var ServiceKeys = /** @class */ (function () {
    function ServiceKeys() {
    }
    /**
     * A unique ServiceKey to identify the ParentIframeCommunicator as a service in the ServiceScope.
     *
     * @remarks
     * This is a slightly special case where we can't provide a default implementation because it depends
     * on a context which only exists in the isolated web part scenario. Hence, consuming this service key
     * in non-isolated scenarios will throw the below error.
     */
    ServiceKeys.parentIFrameCommunicatorServiceKey = ServiceKey_1.default.createCustom('isolated-webpart-application:ParentIframeCommunicator', function () {
        throw new Error('ParentIframeCommunicator cannot be consumed until it is provided.');
    });
    /**
     * A unique ServiceKey to identify the IDynamicDataManager as a service in the ServiceScope.
     *
     * @remarks
     * It is a special case where the same is key is used to register two different services i.e.,
     * DynamicDataManager and IsolatedDynamicDataManager. When in isolated application IsolatedDynamicDataManager
     * is provided to the root service scope, in all the other cases DynamicDataManager is provided.
     *
     * Using the same service key for both the services, will ensure that consumers need not worry about which
     * manager they get. Hence, the key is in common place.
     */
    ServiceKeys.iDynamicDataManagerServiceKey = ServiceKey_1.default.createCustom('sp-dynamic-data:IDynamicDataManager', function () {
        throw new Error('IDynamicDataManager type cannot be consumed until it is provided.');
    });
    return ServiceKeys;
}());
exports.ServiceKeys = ServiceKeys;
//# sourceMappingURL=ServiceKeys.js.map