"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRenderArgumentsForMessaging = exports.prepareRenderArgumentsForMessaging = void 0;
var sp_lodash_subset_1 = require("@microsoft/sp-lodash-subset");
var BaseComponent_1 = require("../components/BaseComponent");
var sp_diagnostics_1 = require("@microsoft/sp-diagnostics");
var Killswitches_1 = require("../common/Killswitches");
/**
 * Prepares render arguments for messaging scenarios such as VCM and Bot ACE.
 *
 * @internal
 */
function prepareRenderArgumentsForMessaging(renderArguments) {
    var _a, _b;
    if ((renderArguments.lastUpdatedType === 'QuickView' &&
        ((0, Killswitches_1.isPrepareHTMLQVForMessagingKSActivated)() ||
            ((_a = renderArguments.quickLook) === null || _a === void 0 ? void 0 : _a.quickViewType) === 'AdaptiveCardQuickView')) ||
        !((_b = renderArguments.card) === null || _b === void 0 ? void 0 : _b.cardViewParameters)) {
        return {
            renderArguments: renderArguments
        };
    }
    // the monitor is used to track the performance of this function
    var qosMonitor = new sp_diagnostics_1._QosMonitor('AdaptiveCardExtension.prepareRenderArgumentsForMessaging');
    var viewType;
    var eventComponents;
    if (renderArguments.lastUpdatedType === 'QuickView') {
        // processing HTML QV
        renderArguments.quickLook = _prepareHTMLQuickViewForMessaging(renderArguments.quickLook);
        viewType = renderArguments.quickLook.quickViewType;
    }
    else {
        // processing card view
        var _c = _prepareCardViewForMessaging(renderArguments.card.cardViewParameters, renderArguments.instanceId), cardViewParameters = _c[0], cardViewEventComponents = _c[1];
        renderArguments.card.cardViewParameters = cardViewParameters;
        eventComponents = cardViewEventComponents;
        viewType = cardViewParameters.cardViewType;
    }
    qosMonitor.writeSuccess({
        viewType: viewType
    });
    return {
        renderArguments: renderArguments,
        eventComponents: eventComponents
    };
}
exports.prepareRenderArgumentsForMessaging = prepareRenderArgumentsForMessaging;
/**
 * Gets render arguments for messaging scenarios such as VCM and Bot ACE.
 *
 * @internal
 */
function getRenderArgumentsForMessaging(ace, renderType) {
    var _a;
    var renderArguments = ace._getRenderArguments(renderType);
    if (renderType !== 'Card' || !((_a = renderArguments.card) === null || _a === void 0 ? void 0 : _a.cardViewParameters)) {
        return {
            renderArguments: renderArguments
        };
    }
    return prepareRenderArgumentsForMessaging(renderArguments);
}
exports.getRenderArgumentsForMessaging = getRenderArgumentsForMessaging;
function _prepareHTMLQuickViewForMessaging(htmlQuickViewRenderArguments) {
    var clonedArguments = (0, sp_lodash_subset_1.cloneDeep)(htmlQuickViewRenderArguments);
    var clonedArgumentsObject = clonedArguments;
    Object.keys(clonedArgumentsObject).forEach(function (key) {
        if (typeof clonedArgumentsObject[key] === 'function') {
            delete clonedArgumentsObject[key];
        }
    });
    return clonedArguments;
}
function _prepareCardViewForMessaging(originalCardViewParameters, instanceId) {
    // collecting event handlers
    var handledEvents = _getEventHandlers(originalCardViewParameters);
    if (!handledEvents) {
        return [originalCardViewParameters, undefined];
    }
    // We need to clone the parameters because we don't want to modify the original object.
    var cardViewParameters = (0, sp_lodash_subset_1.cloneDeep)(originalCardViewParameters);
    var body = cardViewParameters.body, footer = cardViewParameters.footer;
    var eventComponents = new Map();
    _prepareCardPartForMessaging(instanceId, 'body', body, originalCardViewParameters.body, handledEvents.body, eventComponents);
    _prepareCardPartForMessaging(instanceId, 'footer', footer, originalCardViewParameters.footer, handledEvents.footer, eventComponents);
    return [cardViewParameters, eventComponents];
}
/**
 * Prepares the card view part (such as body, footer, etc.) for messaging.
 * If there are any event handlers, we will return them back (as they're stripped in serialzation) and propagate id and _events properties to communicate the events back.
 */
function _prepareCardPartForMessaging(instanceId, cardViewPart, components, originalComponents, handledEvents, eventComponents) {
    if (!components || !handledEvents) {
        return;
    }
    components.forEach(function (component, index) {
        var componentHandledEvents = handledEvents[index];
        if (!componentHandledEvents) {
            return;
        }
        //
        // After graduating d2cb3786-200c-408f-a646-6d091eadc1be id will be already there, so we don't need to generate it.
        //
        var componentId = (0, BaseComponent_1.generateComponentId)(instanceId, cardViewPart, component, index);
        component.id = componentId;
        component._events = componentHandledEvents;
        if (!(0, Killswitches_1.isRemoveFunctionsForMessagingKSActivated)()) {
            componentHandledEvents.forEach(function (eventName) {
                delete component[eventName];
            });
        }
        eventComponents.set(componentId, originalComponents[index]);
    });
}
/**
 * Collects all event handlers (names of handled events) from the card view parameters.
 */
function _getEventHandlers(cardViewParameters) {
    var bodyEventHandlers = _getCardPartEventHandlers(cardViewParameters.body);
    var footerEventHandlers = _getCardPartEventHandlers(cardViewParameters.footer);
    if (!bodyEventHandlers && !footerEventHandlers) {
        return undefined;
    }
    return {
        body: bodyEventHandlers,
        footer: footerEventHandlers
    };
}
/**
 * Collects all event handlers (functions) from the card part (such as body, footer, etc.).
 */
function _getCardPartEventHandlers(cardPart) {
    // array with undefined values is more performant that Map with integer keys
    // we also can't use compoents' ids here as they are optional
    if (!cardPart) {
        return undefined;
    }
    var hasHandlers = false;
    var handlers = cardPart.map(function (component) {
        var componentObject = component;
        var eventHandlers;
        Object.keys(component).forEach(function (key) {
            if (typeof componentObject[key] === 'function') {
                if (!eventHandlers) {
                    eventHandlers = [];
                }
                eventHandlers.push(key);
            }
        });
        hasHandlers = hasHandlers || !!eventHandlers;
        return eventHandlers;
    });
    if (!hasHandlers) {
        return undefined;
    }
    return handlers;
}
//# sourceMappingURL=RenderArgumentsUtils.js.map