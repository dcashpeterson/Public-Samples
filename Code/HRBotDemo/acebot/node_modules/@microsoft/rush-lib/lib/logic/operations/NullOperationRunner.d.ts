import type { OperationStatus } from './OperationStatus';
import type { IOperationRunner, IOperationRunnerContext } from './IOperationRunner';
/**
 *
 */
export interface INullOperationRunnerParams {
    /**
     * The name to report in logs.
     */
    name: string;
    /**
     * The result to report from the runner.
     */
    result: OperationStatus;
    /**
     * If true, the operation will not log anything or be tracked in statistics.
     */
    silent: boolean;
}
/**
 * Implementation of `IOperationRunner` for operations that require no work, such as empty scripts,
 * skipped operations, or blocked operations.
 */
export declare class NullOperationRunner implements IOperationRunner {
    readonly name: string;
    readonly reportTiming: boolean;
    readonly silent: boolean;
    cacheable: boolean;
    readonly warningsAreAllowed: boolean;
    readonly isNoOp: boolean;
    readonly result: OperationStatus;
    constructor({ name, result, silent }: INullOperationRunnerParams);
    executeAsync(context: IOperationRunnerContext): Promise<OperationStatus>;
    getConfigHash(): string;
}
//# sourceMappingURL=NullOperationRunner.d.ts.map