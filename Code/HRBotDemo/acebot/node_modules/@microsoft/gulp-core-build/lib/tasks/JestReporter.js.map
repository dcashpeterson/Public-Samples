{"version":3,"file":"JestReporter.js","sourceRoot":"","sources":["../../src/tasks/JestReporter.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,oEAA0D;AAC1D,2BAA2B;AAC3B,mEAAmE;AACnE,+CAAqF;AAErF;;;GAGG;AACH,8DAA8D;AAC9D,MAAM,YAAa,SAAS,2BAAoE;IAG9F,YAAmB,YAAiC,EAAE,OAA0B;QAC9E,KAAK,CAAC,YAAY,CAAC,CAAC;QACpB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IAC1B,CAAC;IAEM,GAAG,CAAC,OAAe;QACxB,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,CAAC;IACvC,CAAC;IAEM,aAAa,CAAC,QAAsB,EAAE,OAAyB;QACpE,KAAK,CAAC,aAAa,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QACvC,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,iBAAiB,EAAE;YACtD,OAAO;SACR;QAED,MAAM,cAAc,GAAuB,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC;QACxE,IAAI,CAAC,cAAc,EAAE;YACnB,MAAM,IAAI,KAAK,CAAC,kEAAkE,CAAC,CAAC;SACrF;QAED,8DAA8D;QAC9D,MAAM,WAAW,GAAgB,IAAI,WAAW,CAAC,OAAO,CAAC,CAAC;QAC1D,8DAA8D;QAC9D,MAAM,IAAI,GAAW,GAAG,CAAC,WAAW,EAAE,EAAE,WAAW,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;QAC3E,8BAAU,CAAC,SAAS,CAAC,cAAc,EAAE,IAAI,EAAE,EAAE,kBAAkB,EAAE,IAAI,EAAE,CAAC,CAAC;IAC3E,CAAC;CACF;AAOD,MAAM,CAAC,OAAO,GAAG,YAAY,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { FileSystem } from '@rushstack/node-core-library';\r\nimport * as xml from 'xml';\r\nimport * as TestResults from 'jest-nunit-reporter/src/Testresults';\r\nimport { Config, Context, AggregatedResult, DefaultReporter } from '@jest/reporters';\r\n\r\n/**\r\n * Jest logs message to stderr. This class is to override that behavior so that\r\n * rush does not get confused.\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nclass JestReporter extends (DefaultReporter as { new (globalConfig: Config.GlobalConfig): any }) {\r\n  private _options: IReporterOptions | undefined;\r\n\r\n  public constructor(globalConfig: Config.GlobalConfig, options?: IReporterOptions) {\r\n    super(globalConfig);\r\n    this._options = options;\r\n  }\r\n\r\n  public log(message: string): void {\r\n    process.stdout.write(message + '\\n');\r\n  }\r\n\r\n  public onRunComplete(contexts: Set<Context>, results: AggregatedResult): void {\r\n    super.onRunComplete(contexts, results);\r\n    if (!this._options || !this._options.writeNUnitResults) {\r\n      return;\r\n    }\r\n\r\n    const outputFilePath: string | undefined = this._options.outputFilePath;\r\n    if (!outputFilePath) {\r\n      throw new Error('Jest NUnit output was enabled but no outputFilePath was provided');\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    const testResults: TestResults = new TestResults(results);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    const data: string = xml(testResults, { declaration: true, indent: '  ' });\r\n    FileSystem.writeFile(outputFilePath, data, { ensureFolderExists: true });\r\n  }\r\n}\r\n\r\ninterface IReporterOptions {\r\n  outputFilePath?: string;\r\n  writeNUnitResults?: boolean;\r\n}\r\n\r\nmodule.exports = JestReporter;\r\n"]}