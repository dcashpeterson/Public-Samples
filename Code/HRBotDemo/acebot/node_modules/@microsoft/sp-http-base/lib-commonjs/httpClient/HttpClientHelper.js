"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var sp_diagnostics_1 = require("@microsoft/sp-diagnostics");
var sp_core_library_2 = require("@microsoft/sp-core-library");
var GraphHttpClientContext_1 = tslib_1.__importDefault(require("../graphHttpClient/GraphHttpClientContext"));
var HTTP_CLIENT_CLASS_NAME_FETCH = 'HttpClientHelper.Fetch';
var HTTP_CLIENT_HANDLE_AUTH_CLAIM = 'HttpClientHelper.HandleAuthClaim';
var MAX_AUTH_CLAIMS_RETRY = 5;
var HTTP_CLIENT_AUTHORIZATION = 'Authorization';
/**
 * Private - this class contains some internal code shared between HttpClient
 * and SPHttpClient.
 *
 * @internal
 */
var HttpClientHelper = /** @class */ (function () {
    function HttpClientHelper() {
    }
    /**
     * Clones the original options and sets the method to the passed in method name.
     */
    HttpClientHelper.overrideHttpMethod = function (options, httpRequestMethod) {
        var modifiedOptions = Object.assign({}, options);
        modifiedOptions.method = httpRequestMethod;
        return modifiedOptions;
    };
    /**
     * All network requests are routed through this method, which calls the
     * underlying IFetchProvider.fetch().
     */
    HttpClientHelper.fetchCore = function (configuration, request, serviceScope, fetchProvider, logSource) {
        return this._fetchCoreImpl(configuration, request, serviceScope, fetchProvider, logSource);
    };
    HttpClientHelper._fetchCoreImpl = function (configuration, request, serviceScope, fetchProvider, logSource, retry) {
        var _this = this;
        if (retry === void 0) { retry = 0; }
        var loggingSource = sp_diagnostics_1._LogSource.create(logSource);
        try {
            sp_diagnostics_1._TraceLogger.logVerbose(loggingSource, "".concat(request.method, " ").concat(request.url));
        }
        catch (error) {
            // Ignore potential Log errors
        }
        var clientManifestData = serviceScope.consume(sp_core_library_2._ClientManifestData.serviceKey);
        var qosMonitor;
        var alias;
        var componentId;
        if (clientManifestData.manifest) {
            if (qosMonitor) {
                qosMonitor.extraData = {
                    alias: clientManifestData.manifest.alias,
                    componentId: clientManifestData.manifest.id
                };
            }
            else {
                alias = clientManifestData.manifest.alias;
                componentId = clientManifestData.manifest.id;
            }
            // We would like to add the 'SdkVersion' header to all outgoing network requests.
            // We are adding 'SdkVersion' header for Graph and Sharepoint REST calls only.
            // This is because not all services support arbitrary headers.
            // See more here: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Request-Headers
            try {
                var graphContext = serviceScope.consume(GraphHttpClientContext_1.default.serviceKey);
                var spUrlOrigin = new URL(graphContext.getWebAbsoluteUrl()).origin;
                var msGraphUrlOrigin = new URL(graphContext.getGraphEndpointUrl()).origin;
                var requestUrlOrigin = new URL(request.url).origin;
                if (requestUrlOrigin === spUrlOrigin || requestUrlOrigin === msGraphUrlOrigin) {
                    request.headers.append('Access-Control-Request-Headers', 'SdkVersion');
                    request.headers.append('SdkVersion', 'SPFx/' + clientManifestData.manifest.alias + '/' + clientManifestData.manifest.id);
                }
            }
            catch (error) {
                sp_diagnostics_1._TraceLogger.logVerbose(loggingSource, 'SdkVersionError: ' + error);
            }
        }
        return fetchProvider
            .fetch(request)
            .then(function (response) {
            var requiredClaims = _this._getRequiredClaims(response);
            if (response.status >= 200 && response.status <= 299) {
                if (qosMonitor) {
                    qosMonitor.writeSuccess({ source: logSource });
                }
            }
            else if (response.status >= 300 && response.status <= 399) {
                if (qosMonitor) {
                    qosMonitor.writeExpectedFailure('Redirection', undefined, {
                        source: logSource,
                        responseStatus: response.status
                    });
                }
            }
            else if (
            /* 401 */ requiredClaims &&
                retry < MAX_AUTH_CLAIMS_RETRY &&
                sp_core_library_1._BrowserUtilities.isTeamsBrowserOrDesktop()) {
                return new Promise(function (resolve, reject) {
                    var claimsQOS = new sp_diagnostics_1._QosMonitor(HTTP_CLIENT_HANDLE_AUTH_CLAIM);
                    return _this._getTeamsAuthToken(new URL(request.url).origin, serviceScope, [requiredClaims])
                        .then(function (token) {
                        var headers = new Headers();
                        headers.append(HTTP_CLIENT_AUTHORIZATION, 'Bearer ' + token);
                        if (_this._usePersistedCookies()) {
                            headers.append('X-FeatureVersion', '2');
                        }
                        return fetch('/_api/SP.OAuth.NativeClient/Authenticate', {
                            method: 'POST',
                            credentials: 'same-origin',
                            headers: headers
                        }).then(function (authResponse) {
                            authResponse.status === 200
                                ? claimsQOS.writeSuccess({ source: logSource, fallbacks: retry })
                                : claimsQOS.writeExpectedFailure('AuthenticateFailed', new Error(authResponse.statusText), { source: logSource, statusCode: authResponse.status, fallbacks: retry });
                            // Update token since the token has been modified due to CAE
                            if (_this._fixClaimsRequestToken() &&
                                request.headers.get(HTTP_CLIENT_AUTHORIZATION) !== undefined) {
                                request.headers.set(HTTP_CLIENT_AUTHORIZATION, 'Bearer ' + token);
                            }
                            return _this._fetchCoreImpl(configuration, request, serviceScope, fetchProvider, logSource, retry + 1).then(function (res) { return resolve(res); });
                        });
                    })
                        .catch(function (error) {
                        claimsQOS.writeUnexpectedFailure('AuthChallengeHandleFailure', error, { fallbacks: retry });
                        qosMonitor === null || qosMonitor === void 0 ? void 0 : qosMonitor.writeUnexpectedFailure('AuthChallengeHandleFailure', error, {
                            source: logSource,
                            responseStatus: response.status
                        });
                        reject();
                    });
                });
            }
            else {
                qosMonitor = new sp_diagnostics_1._QosMonitor(HTTP_CLIENT_CLASS_NAME_FETCH);
                if (alias !== undefined && componentId !== undefined) {
                    qosMonitor.extraData = {
                        alias: alias,
                        componentId: componentId
                    };
                }
            }
            if (qosMonitor) {
                if (response.status >= 400 && response.status <= 499) {
                    qosMonitor.writeExpectedFailure('ClientError', undefined, {
                        source: logSource,
                        responseStatus: response.status
                    });
                }
                else if (response.status >= 500 && response.status <= 599) {
                    qosMonitor.writeExpectedFailure('ServerError', undefined, {
                        source: logSource,
                        responseStatus: response.status
                    });
                }
                else {
                    qosMonitor.writeUnexpectedFailure('Unknown', undefined, {
                        source: logSource,
                        responseStatus: response.status
                    });
                }
            }
            return response;
        })
            .catch(function (error) {
            if (!qosMonitor) {
                qosMonitor = new sp_diagnostics_1._QosMonitor(HTTP_CLIENT_CLASS_NAME_FETCH);
                if (alias !== undefined && componentId !== undefined) {
                    qosMonitor.extraData = {
                        alias: alias,
                        componentId: componentId
                    };
                }
            }
            qosMonitor.writeUnexpectedFailure('FetchError', error, {
                source: logSource,
                fullError: JSON.stringify(error)
            });
            throw error;
        });
    };
    HttpClientHelper._getRequiredClaims = function (response) {
        if (response.status === 401) {
            var wwwAuthenticate = response.headers.get('WWW-Authenticate');
            if (wwwAuthenticate) {
                return sp_core_library_1.ResponseUtilities.getRequiredClaims(wwwAuthenticate);
            }
        }
        return undefined;
    };
    HttpClientHelper._getTeamsAuthToken = function (application, serviceScope, claims) {
        var _this = this;
        if (sp_core_library_1._BrowserUtilities.isUsingSecureBroker()) {
            return this._getBrokerClientChunk().then(function (brokerClient) {
                return brokerClient._BrokerClient.getAuthToken(application, serviceScope, claims);
            });
        }
        return new Promise(function (resolve, reject) {
            _this._getTeamsSDK()
                .then(function (teamsJs) {
                teamsJs.initialize(function () {
                    teamsJs.authentication.getAuthToken({
                        resources: [application],
                        claims: claims !== null && claims !== void 0 ? claims : [],
                        successCallback: function (result) {
                            resolve(result);
                        },
                        failureCallback: function (error) {
                            reject(error);
                        }
                    });
                });
            })
                .catch(function (error) { return reject(error); });
        });
    };
    HttpClientHelper._getBrokerClientChunk = function () {
        if (!this._brokerClient) {
            this._brokerClient = Promise.resolve().then(function () { return tslib_1.__importStar(require(
            /* webpackChunkName: 'sp-secure-broker-lib-brokerclient' */ '@ms/sp-secure-broker-lib/lib/BrokerClient')); });
        }
        return this._brokerClient;
    };
    HttpClientHelper._getTeamsSDK = function () {
        if (!this._teamsJsP) {
            this._teamsJsP = Promise.resolve().then(function () { return tslib_1.__importStar(require(
            /* webpackChunkName: 'spfx-core-teamsenv-teamsJs-v2' */ '@microsoft/teams-js-v2')); });
        }
        return this._teamsJsP;
    };
    HttpClientHelper._usePersistedCookies = function () {
        return !sp_core_library_1._SPKillSwitch.isActivated('4eaf8a4e-9be2-4110-b9f0-da14c88b8d97'
        /* '11/07/2022, 'prchando - Request persisted SharePoint cookies' */
        );
    };
    HttpClientHelper._fixClaimsRequestToken = function () {
        return !sp_core_library_1._SPKillSwitch.isActivated('3cf1089b-cda4-451a-92e8-0a393bb4e3d6'
        /* '12/07/2022, 'rejain - Update token being sent to Request header' */
        );
    };
    return HttpClientHelper;
}());
exports.default = HttpClientHelper;
//# sourceMappingURL=HttpClientHelper.js.map