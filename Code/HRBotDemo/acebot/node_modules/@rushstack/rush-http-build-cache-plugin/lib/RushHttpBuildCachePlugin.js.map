{"version":3,"file":"RushHttpBuildCachePlugin.js","sourceRoot":"","sources":["../src/RushHttpBuildCachePlugin.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;;;;;;;;;;;;;;;;;;;;AAK3D,MAAM,WAAW,GAAW,sBAAsB,CAAC;AAyCnD;;GAEG;AACH,MAAa,wBAAwB;IAArC;QACkB,eAAU,GAAW,WAAW,CAAC;IA6BnD,CAAC;IA3BQ,KAAK,CAAC,WAAwB,EAAE,UAA6B;QAClE,WAAW,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,EAAE,GAAG,EAAE;YACrD,WAAW,CAAC,sCAAsC,CAAC,MAAM,EAAE,KAAK,EAAE,gBAAgB,EAAE,EAAE;gBACpF,MAAM,MAAM,GACV,gBAGD,CAAC,iBAAiB,CAAC;gBAEpB,MAAM,EAAE,GAAG,EAAE,YAAY,EAAE,OAAO,EAAE,YAAY,EAAE,cAAc,EAAE,mBAAmB,EAAE,GAAG,MAAM,CAAC;gBAEjG,MAAM,OAAO,GAAmC;oBAC9C,UAAU,EAAE,IAAI,CAAC,UAAU;oBAC3B,eAAe,EAAE,UAAU,CAAC,cAAc;oBAC1C,GAAG,EAAE,GAAG;oBACR,YAAY,EAAE,YAAY;oBAC1B,OAAO,EAAE,OAAO;oBAChB,YAAY,EAAE,YAAY;oBAC1B,cAAc,EAAE,cAAc;oBAC9B,mBAAmB,EAAE,CAAC,CAAC,mBAAmB;iBAC3C,CAAC;gBAEF,MAAM,EAAE,sBAAsB,EAAE,GAAG,wDAAa,0BAA0B,GAAC,CAAC;gBAC5E,OAAO,IAAI,sBAAsB,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;YAC1D,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AA9BD,4DA8BC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport type { IRushPlugin, RushSession, RushConfiguration } from '@rushstack/rush-sdk';\nimport type { HttpBuildCacheProvider, IHttpBuildCacheProviderOptions } from './HttpBuildCacheProvider';\n\nconst PLUGIN_NAME: string = 'HttpBuildCachePlugin';\n\n/**\n * @public\n */\nexport interface IRushHttpBuildCachePluginConfig {\n  /**\n   * The URL of the server that stores the caches (e.g. \"https://build-caches.example.com\").\n   */\n  url: string;\n\n  /**\n   * The HTTP method to use when writing to the cache (defaults to PUT).\n   */\n  uploadMethod?: string;\n\n  /**\n   * An optional set of HTTP headers to pass to the cache server.\n   */\n  headers?: Record<string, string>;\n\n  /**\n   * An optional command that prints the endpoint's credentials to stdout. Provide the\n   * command or script to execute and, optionally, any arguments to pass to the script.\n   */\n  tokenHandler?: {\n    exec: string;\n    args?: string[];\n  };\n\n  /**\n   * Prefix for cache keys.\n   */\n  cacheKeyPrefix?: string;\n\n  /**\n   * If set to true, allow writing to the cache. Defaults to false.\n   */\n  isCacheWriteAllowed?: boolean;\n}\n\n/**\n * @public\n */\nexport class RushHttpBuildCachePlugin implements IRushPlugin {\n  public readonly pluginName: string = PLUGIN_NAME;\n\n  public apply(rushSession: RushSession, rushConfig: RushConfiguration): void {\n    rushSession.hooks.initialize.tap(this.pluginName, () => {\n      rushSession.registerCloudBuildCacheProviderFactory('http', async (buildCacheConfig) => {\n        const config: IRushHttpBuildCachePluginConfig = (\n          buildCacheConfig as typeof buildCacheConfig & {\n            httpConfiguration: IRushHttpBuildCachePluginConfig;\n          }\n        ).httpConfiguration;\n\n        const { url, uploadMethod, headers, tokenHandler, cacheKeyPrefix, isCacheWriteAllowed } = config;\n\n        const options: IHttpBuildCacheProviderOptions = {\n          pluginName: this.pluginName,\n          rushProjectRoot: rushConfig.rushJsonFolder,\n          url: url,\n          uploadMethod: uploadMethod,\n          headers: headers,\n          tokenHandler: tokenHandler,\n          cacheKeyPrefix: cacheKeyPrefix,\n          isCacheWriteAllowed: !!isCacheWriteAllowed\n        };\n\n        const { HttpBuildCacheProvider } = await import('./HttpBuildCacheProvider');\n        return new HttpBuildCacheProvider(options, rushSession);\n      });\n    });\n  }\n}\n"]}