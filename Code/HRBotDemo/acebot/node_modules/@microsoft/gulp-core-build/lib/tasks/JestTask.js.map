{"version":3,"file":"JestTask.js","sourceRoot":"","sources":["../../src/tasks/JestTask.ts"],"names":[],"mappings":";;;AAAA,4FAA4F;AAC5F,2DAA2D;AAC3D,6BAA6B;AAC7B,yCAAsC;AAGtC,6BAA6B;AAE7B,8CAA8C;AAC9C,0EAA0E;AAC1E,MAAM,EAAE,MAAM,EAAE,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;AAEzC,oEAAsE;AA+DtE,MAAM,6BAA6B,GAAW,kBAAkB,CAAC;AAEjE;;;;GAIG;AACH,SAAgB,cAAc,CAAC,UAAkB;IAC/C,MAAM,cAAc,GAAW,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,QAAQ,EAAE,WAAW,CAAC,CAAC;IAC5E,IAAI,CAAC,8BAAU,CAAC,MAAM,CAAC,cAAc,CAAC,EAAE;QACtC,OAAO,KAAK,CAAC;KACd;IACD,MAAM,UAAU,GAAO,OAAO,CAAC,cAAc,CAAC,CAAC;IAC/C,wCAAwC;IACxC,OAAO,CAAC,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;AACnC,CAAC;AARD,wCAQC;AAED;;;GAGG;AACH,MAAa,QAAS,SAAQ,mBAAqB;IACjD;QACE,KAAK,CAAC,MAAM,EAAE;YACZ,KAAK,EAAE,IAAI;YACX,mBAAmB,EAAE,CAAC,iBAAiB,EAAE,iBAAiB,CAAC;YAC3D,QAAQ,EAAE,IAAI;YACd,iBAAiB,EAAE,CAAC,MAAM,CAAC,aAAa,CAAC;YACzC,sBAAsB,EAAE,CAAC,mEAAmE,CAAC;YAC7F,6FAA6F;YAC7F,gDAAgD;YAChD,wBAAwB,EAAE,CAAC,qCAAqC,CAAC;SAClE,CAAC,CAAC;IACL,CAAC;IAEM,SAAS,CAAC,WAAyB;QACxC,OAAO,KAAK,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC;IACrE,CAAC;IAED;;OAEG;IACI,UAAU;QACf,OAAO,OAAO,CAAC,oBAAoB,CAAC,CAAC;IACvC,CAAC;IAEM,WAAW,CAAC,IAAiB,EAAE,gBAAkD;QACtF,MAAM,kBAAkB,GAAW,IAAI,CAAC,IAAI,CAC1C,IAAI,CAAC,WAAW,CAAC,QAAQ,EACzB,QAAQ,EACR,MAAM,EACN,6BAA6B,CAC9B,CAAC;QAEF,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;QAE5E,8DAA8D;QAC9D,MAAM,UAAU,GAAQ;YACtB,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,UAAU;YAC/B,KAAK,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK;YAC9B,MAAM,EAAE,8BAAU,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,SAAS;YAC9E,mBAAmB,EAAE,IAAI,CAAC,UAAU,CAAC,mBAAmB;YACxD,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC,QAAQ;YAClC,iBAAiB,EAAE,IAAI,CAAC,UAAU,CAAC,iBAAiB;YACpD,iBAAiB,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,UAAU,CAAC;YACrE,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YACvE,iBAAiB,EAAE,IAAI,CAAC,UAAU,CAAC,iBAAiB;gBAClD,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,iBAAiB;gBACnC,CAAC,CAAC,CAAC,cAAc,EAAE,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC;YAChD,SAAS,EAAE;gBACT;oBACE,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,iBAAiB,CAAC;oBACvC;wBACE,cAAc,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,cAAc,EAAE,kBAAkB,CAAC;wBAC1F,iBAAiB,EAAE,IAAI,CAAC,UAAU,CAAC,iBAAiB;qBACrD;iBACF;aACF;YACD,OAAO,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ;YAClC,SAAS,EAAE,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,kBAAkB,CAAC;YACvF,sBAAsB,EAAE,IAAI,CAAC,UAAU,CAAC,sBAAsB;YAC9D,wBAAwB,EAAE,IAAI,CAAC,UAAU,CAAC,wBAAwB;YAClE,cAAc,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU;YAE5C,0FAA0F;YAC1F,+CAA+C;YAC/C,wCAAwC;YACxC,eAAe,EAAE,OAAO,CAAC,OAAO,CAAC,wBAAwB,CAAC;YAC1D,cAAc,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,YAAY,CAAC;SAChG,CAAC;QAEF,2DAA2D;QAC3D,MAAM,MAAM,GAAqB,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC;QACtD,OAAO,CAAC,MAAM,CAAC,KAAK,GAAG,SAAS,CAAC;QAEjC,MAAM,CAAC,UAAU,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;aAC5C,IAAI,CAAC,CAAC,MAAwE,EAAE,EAAE;YACjF,OAAO,CAAC,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC;YAC9B,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE;gBAC3B,gBAAgB,CAAC,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC,CAAC;aAC9D;iBAAM;gBACL,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE;oBAChC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;iBAC7E;gBACD,gBAAgB,EAAE,CAAC;aACpB;QACH,CAAC,CAAC;aACD,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;YACb,OAAO,CAAC,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC;YAC9B,gBAAgB,CAAC,GAAG,CAAC,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,cAAc,CAAC,OAAe,EAAE,QAAgB;QACtD,MAAM,OAAO,GAAW,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,eAAe,EAAE,QAAQ,CAAC,CAAC;QAC5E,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;YACtC,MAAM,WAAW,GAAW,QAAQ,CAAC,OAAO,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;YAChE,IAAI,IAAI,CAAC,qBAAqB,CAAC,QAAQ,EAAE,WAAW,EAAE,gBAAgB,CAAC,EAAE;gBACvE,IAAI,CAAC,UAAU,CAAC,iBAAiB,QAAQ,iDAAiD,CAAC,CAAC;aAC7F;iBAAM,IAAI,IAAI,CAAC,qBAAqB,CAAC,QAAQ,EAAE,WAAW,EAAE,eAAe,CAAC,EAAE;gBAC7E,IAAI,CAAC,UAAU,CAAC,iBAAiB,QAAQ,gDAAgD,CAAC,CAAC;aAC5F;iBAAM,IAAI,IAAI,CAAC,qBAAqB,CAAC,QAAQ,EAAE,WAAW,EAAE,gBAAgB,CAAC,EAAE;gBAC9E,IAAI,CAAC,UAAU,CAAC,iBAAiB,QAAQ,iDAAiD,CAAC,CAAC;aAC7F;iBAAM,IAAI,IAAI,CAAC,qBAAqB,CAAC,QAAQ,EAAE,WAAW,EAAE,eAAe,CAAC,EAAE;gBAC7E,IAAI,CAAC,UAAU,CAAC,iBAAiB,QAAQ,gDAAgD,CAAC,CAAC;aAC5F;iBAAM;gBACL,IAAI,CAAC,UAAU,CACb,iBAAiB,QAAQ,4DAA4D,CACtF,CAAC;aACH;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,qBAAqB,CAAC,cAAsB,EAAE,eAAuB,EAAE,SAAiB;QAC9F,MAAM,YAAY,GAAW,eAAe,CAAC,OAAO,CAAC,mBAAmB,EAAE,SAAS,CAAC,CAAC;QACrF,MAAM,YAAY,GAAW,IAAI,CAAC,QAAQ,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;QAClE,MAAM,QAAQ,GAAW,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE,IAAI,EAAE,YAAY,CAAC,CAAC,CAAC,2BAA2B;QAClH,IAAI,8BAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE;YAC/B,8BAAU,CAAC,QAAQ,CAAC;gBAClB,UAAU,EAAE,cAAc;gBAC1B,eAAe,EAAE,YAAY;aAC9B,CAAC,CAAC;YACH,OAAO,IAAI,CAAC;SACb;aAAM;YACL,OAAO,KAAK,CAAC;SACd;IACH,CAAC;CACF;AA9HD,4BA8HC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\nimport * as path from 'path';\r\nimport { GulpTask } from './GulpTask';\r\nimport { IBuildConfig } from '../IBuildConfig';\r\nimport * as Gulp from 'gulp';\r\nimport * as glob from 'glob';\r\n\r\n// runCLI is not exported from 'jest' anymore.\r\n// See https://github.com/facebook/jest/issues/9512#issuecomment-581835474\r\nconst { runCLI } = require('@jest/core');\r\nimport { Config, AggregatedResult } from '@jest/reporters';\r\nimport { FileSystem, JsonObject } from '@rushstack/node-core-library';\r\n\r\n/**\r\n * Configuration for JestTask\r\n * @alpha\r\n */\r\nexport interface IJestConfig {\r\n  /**\r\n   * Indicate whether this task is enabled. The default value is false.\r\n   */\r\n  isEnabled?: boolean;\r\n\r\n  /**\r\n   * Indicate whether Jest cache is enabled or not.\r\n   */\r\n  cache?: boolean;\r\n\r\n  /**\r\n   * Same as Jest CLI option collectCoverageFrom\r\n   */\r\n  collectCoverageFrom?: string[];\r\n\r\n  /**\r\n   * Same as Jest CLI option coverage\r\n   */\r\n  coverage?: boolean;\r\n\r\n  /**\r\n   * Same as Jest CLI option coverageReporters\r\n   */\r\n  coverageReporters?: string[];\r\n\r\n  /**\r\n   * Same as Jest CLI option testPathIgnorePatterns\r\n   */\r\n  testPathIgnorePatterns?: string[];\r\n\r\n  /**\r\n   * Same as Jest CLI option modulePathIgnorePatterns\r\n   */\r\n  modulePathIgnorePatterns?: string[];\r\n\r\n  /**\r\n   * Same as Jest CLI option moduleDirectories\r\n   */\r\n  moduleDirectories?: string[];\r\n\r\n  /**\r\n   * Same as Jest CLI option maxWorkers\r\n   */\r\n  maxWorkers?: number;\r\n\r\n  /**\r\n   * Same as Jest CLI option testMatch\r\n   */\r\n  testMatch?: string[];\r\n\r\n  /**\r\n   * Indicate whether writing NUnit results is enabled when using the default reporter\r\n   */\r\n  writeNUnitResults?: boolean;\r\n}\r\n\r\nconst DEFAULT_JEST_CONFIG_FILE_NAME: string = 'jest.config.json';\r\n\r\n/**\r\n * Indicates if jest is enabled\r\n * @internal\r\n * @param rootFolder - package root folder\r\n */\r\nexport function _isJestEnabled(rootFolder: string): boolean {\r\n  const taskConfigFile: string = path.join(rootFolder, 'config', 'jest.json');\r\n  if (!FileSystem.exists(taskConfigFile)) {\r\n    return false;\r\n  }\r\n  const taskConfig: {} = require(taskConfigFile);\r\n  // eslint-disable-next-line dot-notation\r\n  return !!taskConfig['isEnabled'];\r\n}\r\n\r\n/**\r\n * This task takes in a map of dest: [sources], and copies items from one place to another.\r\n * @alpha\r\n */\r\nexport class JestTask extends GulpTask<IJestConfig> {\r\n  public constructor() {\r\n    super('jest', {\r\n      cache: true,\r\n      collectCoverageFrom: ['lib/**/*.js?(x)', '!lib/**/test/**'],\r\n      coverage: true,\r\n      coverageReporters: ['json' /*, 'html' */], // Remove HTML reporter temporarily until the Handlebars issue is fixed\r\n      testPathIgnorePatterns: ['<rootDir>/(src|lib-amd|lib-es6|coverage|build|docs|node_modules)/'],\r\n      // Some unit tests rely on data folders that look like packages.  This confuses jest-hast-map\r\n      // when it tries to scan for package.json files.\r\n      modulePathIgnorePatterns: ['<rootDir>/(src|lib)/.*/package.json']\r\n    });\r\n  }\r\n\r\n  public isEnabled(buildConfig: IBuildConfig): boolean {\r\n    return super.isEnabled(buildConfig) && !!this.taskConfig.isEnabled;\r\n  }\r\n\r\n  /**\r\n   * Loads the z-schema object for this task\r\n   */\r\n  public loadSchema(): JsonObject {\r\n    return require('./jest.schema.json');\r\n  }\r\n\r\n  public executeTask(gulp: typeof Gulp, completeCallback: (error?: string | Error) => void): void {\r\n    const configFileFullPath: string = path.join(\r\n      this.buildConfig.rootPath,\r\n      'config',\r\n      'jest',\r\n      DEFAULT_JEST_CONFIG_FILE_NAME\r\n    );\r\n\r\n    this._copySnapshots(this.buildConfig.srcFolder, this.buildConfig.libFolder);\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    const jestConfig: any = {\r\n      ci: this.buildConfig.production,\r\n      cache: !!this.taskConfig.cache,\r\n      config: FileSystem.exists(configFileFullPath) ? configFileFullPath : undefined,\r\n      collectCoverageFrom: this.taskConfig.collectCoverageFrom,\r\n      coverage: this.taskConfig.coverage,\r\n      coverageReporters: this.taskConfig.coverageReporters,\r\n      coverageDirectory: path.join(this.buildConfig.tempFolder, 'coverage'),\r\n      maxWorkers: this.taskConfig.maxWorkers ? this.taskConfig.maxWorkers : 1,\r\n      moduleDirectories: this.taskConfig.moduleDirectories\r\n        ? this.taskConfig.moduleDirectories\r\n        : ['node_modules', this.buildConfig.libFolder],\r\n      reporters: [\r\n        [\r\n          path.join(__dirname, 'JestReporter.js'),\r\n          {\r\n            outputFilePath: path.join(this.buildConfig.tempFolder, 'jest-results', 'test-results.xml'),\r\n            writeNUnitResults: this.taskConfig.writeNUnitResults\r\n          }\r\n        ]\r\n      ],\r\n      rootDir: this.buildConfig.rootPath,\r\n      testMatch: this.taskConfig.testMatch ? this.taskConfig.testMatch : ['**/*.test.js?(x)'],\r\n      testPathIgnorePatterns: this.taskConfig.testPathIgnorePatterns,\r\n      modulePathIgnorePatterns: this.taskConfig.modulePathIgnorePatterns,\r\n      updateSnapshot: !this.buildConfig.production,\r\n\r\n      // Jest's module resolution for finding jest-environment-jsdom is broken.  See this issue:\r\n      // https://github.com/facebook/jest/issues/5913\r\n      // As a workaround, resolve it for Jest:\r\n      testEnvironment: require.resolve('jest-environment-jsdom'),\r\n      cacheDirectory: path.join(this.buildConfig.rootPath, this.buildConfig.tempFolder, 'jest-cache')\r\n    };\r\n\r\n    // suppress 'Running coverage on untested files...' warning\r\n    const oldTTY: true | undefined = process.stdout.isTTY;\r\n    process.stdout.isTTY = undefined;\r\n\r\n    runCLI(jestConfig, [this.buildConfig.rootPath])\r\n      .then((result: { results: AggregatedResult; globalConfig: Config.GlobalConfig }) => {\r\n        process.stdout.isTTY = oldTTY;\r\n        if (!result.results.success) {\r\n          completeCallback(new Error('Jest tests or coverage failed'));\r\n        } else {\r\n          if (!this.buildConfig.production) {\r\n            this._copySnapshots(this.buildConfig.libFolder, this.buildConfig.srcFolder);\r\n          }\r\n          completeCallback();\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        process.stdout.isTTY = oldTTY;\r\n        completeCallback(err);\r\n      });\r\n  }\r\n\r\n  private _copySnapshots(srcRoot: string, destRoot: string): void {\r\n    const pattern: string = path.join(srcRoot, '**', '__snapshots__', '*.snap');\r\n    glob.sync(pattern).forEach((snapFile) => {\r\n      const destination: string = snapFile.replace(srcRoot, destRoot);\r\n      if (this._copyIfMatchExtension(snapFile, destination, '.test.tsx.snap')) {\r\n        this.logVerbose(`Snapshot file ${snapFile} is copied to match extension \".test.tsx.snap\".`);\r\n      } else if (this._copyIfMatchExtension(snapFile, destination, '.test.ts.snap')) {\r\n        this.logVerbose(`Snapshot file ${snapFile} is copied to match extension \".test.ts.snap\".`);\r\n      } else if (this._copyIfMatchExtension(snapFile, destination, '.test.jsx.snap')) {\r\n        this.logVerbose(`Snapshot file ${snapFile} is copied to match extension \".test.jsx.snap\".`);\r\n      } else if (this._copyIfMatchExtension(snapFile, destination, '.test.js.snap')) {\r\n        this.logVerbose(`Snapshot file ${snapFile} is copied to match extension \".test.js.snap\".`);\r\n      } else {\r\n        this.logWarning(\r\n          `Snapshot file ${snapFile} is not copied because don't find that matching test file.`\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  private _copyIfMatchExtension(snapSourceFile: string, destinationFile: string, extension: string): boolean {\r\n    const snapDestFile: string = destinationFile.replace(/\\.test\\..+\\.snap$/, extension);\r\n    const testFileName: string = path.basename(snapDestFile, '.snap');\r\n    const testFile: string = path.resolve(path.dirname(snapDestFile), '..', testFileName); // Up from `__snapshots__`.\r\n    if (FileSystem.exists(testFile)) {\r\n      FileSystem.copyFile({\r\n        sourcePath: snapSourceFile,\r\n        destinationPath: snapDestFile\r\n      });\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n"]}