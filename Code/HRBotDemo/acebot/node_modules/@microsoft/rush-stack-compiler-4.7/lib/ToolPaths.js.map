{"version":3,"file":"ToolPaths.js","sourceRoot":"","sources":["../src/ToolPaths.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { PackageJsonLookup, IPackageJson } from '@rushstack/node-core-library';\r\nimport * as path from 'path';\r\n\r\n/**\r\n * @beta\r\n */\r\nexport class ToolPaths {\r\n  private static _typescriptPackagePath: string | undefined;\r\n  private static _typescriptPackageJson: IPackageJson | undefined;\r\n  private static _eslintPackagePath: string | undefined;\r\n  private static _eslintPackageJson: IPackageJson | undefined;\r\n  private static _tslintPackagePath: string | undefined;\r\n  private static _tslintPackageJson: IPackageJson | undefined;\r\n  private static _apiExtractorPackagePath: string | undefined;\r\n  private static _apiExtractorPackageJson: IPackageJson | undefined;\r\n\r\n  public static get typescriptPackagePath(): string {\r\n    if (!ToolPaths._typescriptPackagePath) {\r\n      ToolPaths._typescriptPackagePath = ToolPaths._getPackagePath('typescript');\r\n\r\n      if (!ToolPaths._typescriptPackagePath) {\r\n        throw new Error('Unable to find \"typescript\" package.');\r\n      }\r\n    }\r\n\r\n    return ToolPaths._typescriptPackagePath;\r\n  }\r\n\r\n  public static get typescriptPackageJson(): IPackageJson {\r\n    if (!ToolPaths._typescriptPackageJson) {\r\n      ToolPaths._typescriptPackageJson = PackageJsonLookup.instance.loadPackageJson(\r\n        path.join(ToolPaths.typescriptPackagePath, 'package.json')\r\n      );\r\n    }\r\n\r\n    return ToolPaths._typescriptPackageJson;\r\n  }\r\n\r\n  public static get eslintPackagePath(): string {\r\n    if (!ToolPaths._eslintPackagePath) {\r\n      ToolPaths._eslintPackagePath = ToolPaths._getPackagePath('eslint');\r\n\r\n      if (!ToolPaths._eslintPackagePath) {\r\n        throw new Error('Unable to find \"eslint\" package.');\r\n      }\r\n    }\r\n\r\n    return ToolPaths._eslintPackagePath;\r\n  }\r\n\r\n  public static get eslintPackageJson(): IPackageJson {\r\n    if (!ToolPaths._eslintPackageJson) {\r\n      ToolPaths._eslintPackageJson = PackageJsonLookup.instance.loadPackageJson(\r\n        path.join(ToolPaths.eslintPackagePath, 'package.json')\r\n      );\r\n    }\r\n\r\n    return ToolPaths._eslintPackageJson;\r\n  }\r\n\r\n  public static get tslintPackagePath(): string {\r\n    if (!ToolPaths._tslintPackagePath) {\r\n      ToolPaths._tslintPackagePath = ToolPaths._getPackagePath('tslint');\r\n\r\n      if (!ToolPaths._tslintPackagePath) {\r\n        const typeScriptPackageVersion: string = this.typescriptPackageJson.version;\r\n        const typeScriptMajorVersion: number = Number(\r\n          typeScriptPackageVersion.substr(0, typeScriptPackageVersion.indexOf('.'))\r\n        );\r\n        if (typeScriptMajorVersion >= 4) {\r\n          throw new Error('TSLint is not supported for rush-stack-compiler-4.X packages.');\r\n        } else {\r\n          throw new Error('Unable to find \"tslint\" package.');\r\n        }\r\n      }\r\n    }\r\n\r\n    return ToolPaths._tslintPackagePath;\r\n  }\r\n\r\n  public static get tslintPackageJson(): IPackageJson {\r\n    if (!ToolPaths._tslintPackageJson) {\r\n      ToolPaths._tslintPackageJson = PackageJsonLookup.instance.loadPackageJson(\r\n        path.join(ToolPaths.tslintPackagePath, 'package.json')\r\n      );\r\n    }\r\n\r\n    return ToolPaths._tslintPackageJson;\r\n  }\r\n\r\n  public static get apiExtractorPackagePath(): string {\r\n    if (!ToolPaths._apiExtractorPackagePath) {\r\n      ToolPaths._apiExtractorPackagePath = ToolPaths._getPackagePath('@microsoft/api-extractor');\r\n\r\n      if (!ToolPaths._apiExtractorPackagePath) {\r\n        throw new Error('Unable to find \"@microsoft/api-extractor\" package.');\r\n      }\r\n    }\r\n\r\n    return ToolPaths._apiExtractorPackagePath;\r\n  }\r\n\r\n  public static get apiExtractorPackageJson(): IPackageJson {\r\n    if (!ToolPaths._apiExtractorPackageJson) {\r\n      ToolPaths._apiExtractorPackageJson = PackageJsonLookup.instance.loadPackageJson(\r\n        path.join(ToolPaths.apiExtractorPackagePath, 'package.json')\r\n      );\r\n    }\r\n\r\n    return ToolPaths._apiExtractorPackageJson;\r\n  }\r\n\r\n  private static _getPackagePath(packageName: string): string | undefined {\r\n    const packageJsonPath: string | undefined = ToolPaths._getPackageJsonPath(packageName);\r\n    return packageJsonPath ? path.dirname(packageJsonPath) : undefined;\r\n  }\r\n\r\n  private static _getPackageJsonPath(packageName: string): string | undefined {\r\n    const lookup: PackageJsonLookup = new PackageJsonLookup();\r\n    const mainEntryPath: string = require.resolve(packageName);\r\n    return lookup.tryGetPackageJsonFilePathFor(mainEntryPath);\r\n  }\r\n}\r\n"]}