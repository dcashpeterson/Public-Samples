"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toggleDeveloperTools = exports.registerDeveloperToolsTab = exports.initialize = void 0;
var F12_KEYCODE = 123;
var MAC_PLATFORM_IDENTIFIER = 'MacIntel';
var _listenerHasBeenRegistered = false;
var _developerTools;
var _developerToolsTabsBacklog = [];
function initialize(serviceScope) {
    if (!_listenerHasBeenRegistered) {
        document.documentElement.addEventListener('keydown', function (event) {
            var isMac = navigator.platform === MAC_PLATFORM_IDENTIFIER;
            // Detect ctrl+F12 for any platform, and detect âŒ˜+F12 on macs
            if (((event.ctrlKey && !event.metaKey) || (isMac && event.metaKey && !event.ctrlKey)) &&
                !event.altKey &&
                event.keyCode === F12_KEYCODE) {
                // ctrl+F12
                toggleDeveloperTools(serviceScope);
                event.preventDefault();
            }
        });
        _listenerHasBeenRegistered = true;
    }
}
exports.initialize = initialize;
/**
 * Registers a tab in the developer tools. The developer tools are invoked by pressing "CTRL+F12".
 *
 * @param developerToolsTab - The tab definition.
 *
 * @internal
 */
function registerDeveloperToolsTab(developerToolsTab) {
    if (_developerTools) {
        _developerTools.registerDeveloperToolsTab(developerToolsTab);
    }
    else {
        _developerToolsTabsBacklog.push(developerToolsTab);
    }
}
exports.registerDeveloperToolsTab = registerDeveloperToolsTab;
/**
 * Shows/hides the developer tools panel.
 *
 * @internal
 */
function toggleDeveloperTools(serviceScope) {
    if (_developerTools) {
        _developerTools.toggleDeveloperTools();
    }
    else {
        // TODO: Refactor this to use dynamic import
        // eslint-disable-next-line @microsoft/spfx/no-require-ensure
        require.ensure(['./DeveloperTools'], function (require) {
            _initializeDeveloperTools(require('./DeveloperTools').default, serviceScope);
        }, 'developer-tools');
    }
}
exports.toggleDeveloperTools = toggleDeveloperTools;
function _initializeDeveloperTools(developerToolsClass, serviceScope) {
    _developerTools = developerToolsClass.instance;
    _developerTools.initialize(serviceScope);
    _developerToolsTabsBacklog.forEach(function (developerToolsTab) {
        _developerTools.registerDeveloperToolsTab(developerToolsTab);
    });
    _developerTools.showHideDeveloperTools(true);
}
//# sourceMappingURL=DeveloperToolsLoader.js.map