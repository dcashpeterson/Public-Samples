"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getThumbnailPickerButtons = exports.getIconPickerButtons = void 0;
var tslib_1 = require("tslib");
var React = tslib_1.__importStar(require("react"));
var office_ui_fabric_react_bundle_1 = require("@ms/office-ui-fabric-react-bundle");
var PropertyPaneThumbnailStrings_resx_1 = tslib_1.__importDefault(require("./PropertyPaneThumbnailStrings.resx"));
var KillSwitches_1 = require("../common/KillSwitches");
function getIconPickerButtons(handleChangeIconClick, onItemDeleted, buttonClassName, automationIdPrefix) {
    return getPickerButtons(handleChangeIconClick, {
        change: {
            description: PropertyPaneThumbnailStrings_resx_1.default.PropertyPaneChangeIconButtonDescription,
            label: PropertyPaneThumbnailStrings_resx_1.default.PropertyPaneChangeIconButtonAriaLabel
        },
        delete: {
            description: PropertyPaneThumbnailStrings_resx_1.default.PropertyPaneDeleteIconButtonDescription,
            label: PropertyPaneThumbnailStrings_resx_1.default.PropertyPaneDeleteIconButtonAriaLabel
        }
    }, onItemDeleted, buttonClassName, automationIdPrefix);
}
exports.getIconPickerButtons = getIconPickerButtons;
function getThumbnailPickerButtons(handleChangeImageClick, onItemDeleted, buttonClassName, automationIdPrefix) {
    return getPickerButtons(handleChangeImageClick, {
        change: {
            description: PropertyPaneThumbnailStrings_resx_1.default.PropertyPaneChangeImageButtonDescription,
            label: PropertyPaneThumbnailStrings_resx_1.default.PropertyPaneChangeImageButtonAriaLabel
        },
        delete: {
            description: PropertyPaneThumbnailStrings_resx_1.default.PropertyPaneDeleteImageButtonDescription,
            label: PropertyPaneThumbnailStrings_resx_1.default.PropertyPaneDeleteImageButtonAriaLabel
        }
    }, onItemDeleted, buttonClassName, automationIdPrefix);
}
exports.getThumbnailPickerButtons = getThumbnailPickerButtons;
function getPickerButtons(handleChangeImageClick, buttonAriaProps, onItemDeleted, buttonClassName, automationIdPrefix) {
    var _a = buttonAriaProps.change, changeButtonDescription = _a.description, changeButtonLabel = _a.label, _b = buttonAriaProps.delete, deleteButtonDescription = _b.description, deleteButtonLabel = _b.label;
    var changeButtonProps = {
        className: buttonClassName,
        onClick: handleChangeImageClick,
        ariaLabel: changeButtonLabel,
        ariaDescription: changeButtonDescription,
        'data-automation-id': automationIdPrefix
            ? "".concat(automationIdPrefix, "ChangeButton")
            : 'thumbnailImagePickerChangeButton'
    };
    var changeButton = !(0, KillSwitches_1.isImageDeleteButtonKSActive)() ? (React.createElement(office_ui_fabric_react_bundle_1.ActionButton, tslib_1.__assign({}, tslib_1.__assign(tslib_1.__assign({}, changeButtonProps), { iconProps: {
            iconName: 'Edit'
        } })), PropertyPaneThumbnailStrings_resx_1.default.PropertyPaneChangeButtonLabel)) : (React.createElement(office_ui_fabric_react_bundle_1.PrimaryButton, tslib_1.__assign({}, changeButtonProps), PropertyPaneThumbnailStrings_resx_1.default.PropertyPaneChangeButtonLabel));
    var deleteButton = !(0, KillSwitches_1.isImageDeleteButtonKSActive)() && onItemDeleted ? (React.createElement(office_ui_fabric_react_bundle_1.ActionButton, { iconProps: { iconName: 'Delete' }, className: buttonClassName, onClick: onItemDeleted, ariaLabel: deleteButtonLabel, ariaDescription: deleteButtonDescription, "data-automation-id": automationIdPrefix ? "".concat(automationIdPrefix, "DeleteButton") : 'thumbnailImagePickerDeleteButton' }, PropertyPaneThumbnailStrings_resx_1.default.PropertyPaneDeleteButtonLabel)) : undefined;
    if (deleteButton) {
        return (React.createElement(office_ui_fabric_react_bundle_1.Stack, { tokens: { childrenGap: 40 }, horizontal: true },
            changeButton,
            " ",
            deleteButton));
    }
    return changeButton;
}
//# sourceMappingURL=ThumbnailPickerUtils.js.map