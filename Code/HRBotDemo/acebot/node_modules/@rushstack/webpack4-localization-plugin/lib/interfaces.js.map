{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../src/interfaces.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport type { IgnoreStringFunction, IPseudolocaleOptions } from '@rushstack/localization-utilities';\n\n/**\n * Options for the passthrough locale.\n *\n * @public\n */\nexport interface IPassthroughLocaleOptions {\n  /**\n   * If this is set to `true`, a passthrough locale will be included in the output\n   */\n  usePassthroughLocale?: boolean;\n\n  /**\n   * If {@link IPassthroughLocaleOptions.usePassthroughLocale} is set, use this name for the passthrough locale.\n   * Defaults to \"passthrough\"\n   */\n  passthroughLocaleName?: string;\n}\n\n/**\n * Options for typing generation.\n *\n * @public\n */\nexport interface ITypingsGenerationOptions {\n  /**\n   * This property specifies the folder in which `.d.ts` files for loc files should be dropped.\n   */\n  generatedTsFolder: string;\n\n  /**\n   * Optional additional folders into which `.d.ts` files for loc files should be dropped.\n   */\n  secondaryGeneratedTsFolders?: string[];\n\n  /**\n   * This optional property overrides the compiler context for discovery of localization files\n   * for which typings should be generated.\n   */\n  sourceRoot?: string;\n\n  /**\n   * If this option is set to `true`, loc modules typings will be exported wrapped in a `default` property.\n   */\n  exportAsDefault?: boolean;\n\n  /**\n   * @deprecated\n   * Use {@link ILocalizationPluginOptions.ignoreString} instead.\n   *\n   * @internalRemarks\n   * TODO: Remove when version 1.0.0 is released.\n   */\n  ignoreString?: (resxFilePath: string, stringName: string) => boolean;\n\n  /**\n   * Optionally, provide a function that will process string comments. The returned value will become the\n   * TSDoc comment for the string in the typings.\n   */\n  processComment?: (\n    comment: string | undefined,\n    resxFilePath: string,\n    stringName: string\n  ) => string | undefined;\n}\n\n/**\n * @public\n */\nexport interface IDefaultLocaleOptions {\n  /**\n   * This required property specifies the name of the locale used in the\n   * `.resx`, `.loc.json`, and `.resjson` files in the source\n   */\n  localeName: string;\n\n  /**\n   * If this option is set to `true`, strings that are missing from\n   * `localizedData.translatedStrings` will be provided by the default locale\n   */\n  fillMissingTranslationStrings?: boolean;\n}\n\n/**\n * Options for generated pseudolocales.\n *\n * @public\n */\nexport interface IPseudolocalesOptions {\n  [pseudoLocaleName: string]: IPseudolocaleOptions;\n}\n\n/**\n * @public\n */\nexport interface ILocalizedData {\n  /**\n   * Options for the locale used in the source localized data files.\n   */\n  defaultLocale: IDefaultLocaleOptions;\n\n  /**\n   * Use this parameter to specify the translated data.\n   */\n  translatedStrings: ILocalizedStrings;\n\n  /**\n   * Use this parameter to specify a function used to load translations missing from\n   * the {@link ILocalizedData.translatedStrings} parameter.\n   */\n  resolveMissingTranslatedStrings?: (locales: string[], filePath: string) => IResolvedMissingTranslations;\n\n  /**\n   * Options around including a passthrough locale.\n   */\n  passthroughLocale?: IPassthroughLocaleOptions;\n\n  /**\n   * Options for pseudo-localization.\n   */\n  pseudolocales?: IPseudolocalesOptions;\n\n  /**\n   * Normalize newlines in RESX files to either CRLF (Windows-style) or LF ('nix style)\n   */\n  normalizeResxNewlines?: 'lf' | 'crlf';\n\n  /**\n   * If set to true, do not warn on missing RESX `<data>` element comments.\n   */\n  ignoreMissingResxComments?: boolean;\n}\n\n/**\n * Options for how localization stats data should be produced.\n *\n * @public\n */\nexport interface ILocalizationStatsOptions {\n  /**\n   * This option is used to designate a path at which a JSON file describing the localized\n   * assets produced should be written.\n   */\n  dropPath?: string;\n\n  /**\n   * This option is used to specify a callback to be called with the stats data that would be\n   * dropped at `localizationStats.dropPath` after compilation completes.\n   */\n  callback?: (stats: ILocalizationStats) => void;\n}\n\n/**\n * The options for localization.\n *\n * @public\n */\nexport interface ILocalizationPluginOptions {\n  /**\n   * Localization data.\n   */\n  localizedData: ILocalizedData;\n\n  /**\n   * This option is used to specify `.resx`, `.resx.json`, and `.loc.json` files that should not be processed by\n   * this plugin.\n   */\n  globsToIgnore?: string[];\n\n  /**\n   * The value to replace the [locale] token with for chunks without localized strings. Defaults to \"none\"\n   */\n  noStringsLocaleName?: string;\n\n  /**\n   * Options for how localization stats data should be produced.\n   */\n  localizationStats?: ILocalizationStatsOptions;\n\n  /**\n   * This option is used to specify how and if TypeScript typings should be generated for loc files.\n   */\n  typingsOptions?: ITypingsGenerationOptions;\n\n  /**\n   * Optionally, provide a function that will be called for each string. If the function returns `true`\n   * the string will not be included.\n   */\n  ignoreString?: IgnoreStringFunction;\n\n  /**\n   * @deprecated\n   * Use {@link ILocalizationPluginOptions.globsToIgnore} instead.\n   *\n   * @internalRemarks\n   * TODO: Remove when version 1.0.0 is released.\n   */\n  filesToIgnore?: string[];\n}\n\n/**\n * @public\n */\nexport interface ILocaleFileData {\n  [stringName: string]: string;\n}\n\n/**\n * @public\n */\nexport interface IResolvedMissingTranslations {\n  [localeName: string]: string | ILocaleFileData;\n}\n\n/**\n * @public\n */\nexport interface ILocaleData {\n  [locFilePath: string]: string | ILocaleFileData;\n}\n\n/**\n * @public\n */\nexport interface ILocalizedStrings {\n  [locale: string]: ILocaleData;\n}\n\n/**\n * @public\n */\nexport interface ILocaleElementMap {\n  [locale: string]: string;\n}\n\n/**\n * @public\n */\nexport interface ILocalizationStatsEntrypoint {\n  localizedAssets: ILocaleElementMap;\n}\n\n/**\n * @public\n */\nexport interface ILocalizationStatsChunkGroup {\n  localizedAssets: ILocaleElementMap;\n}\n\n/**\n * @public\n */\nexport interface ILocalizationStats {\n  entrypoints: { [name: string]: ILocalizationStatsEntrypoint };\n  namedChunkGroups: { [name: string]: ILocalizationStatsChunkGroup };\n}\n"]}