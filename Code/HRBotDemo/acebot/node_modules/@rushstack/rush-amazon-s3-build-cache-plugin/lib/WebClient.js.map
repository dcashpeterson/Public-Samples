{"version":3,"file":"WebClient.js","sourceRoot":"","sources":["../src/WebClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\n// ===================================================================================================================\n// AS A TEMPORARY WORKAROUND, THIS FILE WAS COPY+PASTED FROM THE \"rush-lib\" PROJECT.\n//\n// Eventually we plan to convert it into a more generic API for \"node-core-library\" or\n// else replace it with a third party solution such as Axios.  See the discussion here:\n// https://github.com/microsoft/rushstack/pull/3036#discussion_r758010126\n// ===================================================================================================================\n\nimport * as os from 'os';\nimport * as process from 'process';\nimport * as fetch from 'node-fetch';\nimport type * as http from 'http';\nimport { Import } from '@rushstack/node-core-library';\n\nconst createHttpsProxyAgent: typeof import('https-proxy-agent') = Import.lazy('https-proxy-agent', require);\n\n/**\n * For use with {@link WebClient}.\n *\n * @public\n */\nexport type WebClientResponse = fetch.Response;\n\n/**\n * For use with {@link WebClient}.\n *\n * @public\n */\nexport interface IWebFetchOptionsBase {\n  timeoutMs?: number;\n  verb?: 'GET' | 'PUT';\n  headers?: fetch.Headers;\n}\n\n/**\n * For use with {@link WebClient}.\n *\n * @public\n */\nexport interface IGetFetchOptions extends IWebFetchOptionsBase {\n  verb: 'GET' | never;\n}\n\n/**\n * For use with {@link WebClient}.\n *\n * @public\n */\nexport interface IPutFetchOptions extends IWebFetchOptionsBase {\n  verb: 'PUT';\n  body?: Buffer;\n}\n\n/**\n * For use with {@link WebClient}.\n * @public\n */\nexport enum WebClientProxy {\n  None,\n  Detect,\n  Fiddler\n}\n\n/**\n * A helper for issuing HTTP requests.\n *\n * @public\n */\nexport class WebClient {\n  public readonly standardHeaders: fetch.Headers = new fetch.Headers();\n\n  public accept: string | undefined = '*/*';\n  public userAgent: string | undefined = `rush node/${process.version} ${os.platform()} ${os.arch()}`;\n\n  public proxy: WebClientProxy = WebClientProxy.Detect;\n\n  public constructor() {}\n\n  public static mergeHeaders(target: fetch.Headers, source: fetch.Headers): void {\n    source.forEach((value, name) => {\n      target.set(name, value);\n    });\n  }\n\n  public addBasicAuthHeader(userName: string, password: string): void {\n    this.standardHeaders.set(\n      'Authorization',\n      'Basic ' + Buffer.from(userName + ':' + password).toString('base64')\n    );\n  }\n\n  public async fetchAsync(\n    url: string,\n    options?: IGetFetchOptions | IPutFetchOptions\n  ): Promise<WebClientResponse> {\n    const headers: fetch.Headers = new fetch.Headers();\n\n    WebClient.mergeHeaders(headers, this.standardHeaders);\n\n    if (options?.headers) {\n      WebClient.mergeHeaders(headers, options.headers);\n    }\n\n    if (this.userAgent) {\n      headers.set('user-agent', this.userAgent);\n    }\n    if (this.accept) {\n      headers.set('accept', this.accept);\n    }\n\n    let proxyUrl: string = '';\n\n    switch (this.proxy) {\n      case WebClientProxy.Detect:\n        if (process.env.HTTPS_PROXY) {\n          proxyUrl = process.env.HTTPS_PROXY;\n        } else if (process.env.HTTP_PROXY) {\n          proxyUrl = process.env.HTTP_PROXY;\n        }\n        break;\n\n      case WebClientProxy.Fiddler:\n        // For debugging, disable cert validation\n        // eslint-disable-next-line\n        process.env['NODE_TLS_REJECT_UNAUTHORIZED'] = '0';\n        proxyUrl = 'http://localhost:8888/';\n        break;\n    }\n\n    let agent: http.Agent | undefined = undefined;\n    if (proxyUrl) {\n      agent = createHttpsProxyAgent(proxyUrl);\n    }\n\n    const timeoutMs: number = options?.timeoutMs !== undefined ? options.timeoutMs : 15 * 1000; // 15 seconds\n    const requestInit: fetch.RequestInit = {\n      method: options?.verb,\n      headers: headers,\n      agent: agent,\n      timeout: timeoutMs\n    };\n    const putOptions: IPutFetchOptions | undefined = options as IPutFetchOptions | undefined;\n    if (putOptions?.body) {\n      requestInit.body = putOptions.body;\n    }\n\n    return await fetch.default(url, requestInit);\n  }\n}\n"]}