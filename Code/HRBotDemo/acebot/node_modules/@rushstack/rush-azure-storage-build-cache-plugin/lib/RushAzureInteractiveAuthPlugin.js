"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const PLUGIN_NAME = 'AzureInteractiveAuthPlugin';
/**
 * This plugin is for performing interactive authentication to an arbitrary Azure blob storage account.
 * It is meant to be used for scenarios where custom commands may interact with Azure blob storage beyond
 * the scope of the build cache (for build cache, use the RushAzureStorageBuildCachePlugin).
 *
 * However, since the authentication has the same dependencies, if the repository already uses the build
 * cache plugin, the additional functionality for authentication can be provided at minimal cost.
 *
 * @public
 */
class RushAzureInteractieAuthPlugin {
    constructor(options) {
        this.pluginName = PLUGIN_NAME;
        this._options = options;
    }
    apply(rushSession, rushConfig) {
        const options = this._options;
        if (!options) {
            // Plugin is not enabled.
            return;
        }
        const { globalCommands, phasedCommands } = options;
        const { hooks } = rushSession;
        const handler = async () => {
            const { AzureStorageAuthentication } = await Promise.resolve().then(() => __importStar(require('./AzureStorageAuthentication')));
            const { storageAccountName, storageContainerName, azureEnvironment = 'AzurePublicCloud', minimumValidityInMinutes } = options;
            const logger = rushSession.getLogger(PLUGIN_NAME);
            logger.terminal.writeLine(`Authenticating to Azure container "${storageContainerName}" on account "${storageAccountName}" in environment "${azureEnvironment}".`);
            let minimumExpiry;
            if (typeof minimumValidityInMinutes === 'number') {
                minimumExpiry = new Date(Date.now() + minimumValidityInMinutes * 60 * 1000);
            }
            await new AzureStorageAuthentication({
                storageAccountName: storageAccountName,
                storageContainerName: storageContainerName,
                azureEnvironment: options.azureEnvironment,
                isCacheWriteAllowed: true
            }).updateCachedCredentialInteractiveAsync(logger.terminal, minimumExpiry);
        };
        if (globalCommands) {
            for (const commandName of globalCommands) {
                hooks.runGlobalCustomCommand.for(commandName).tapPromise(PLUGIN_NAME, handler);
            }
        }
        if (phasedCommands) {
            for (const commandName of phasedCommands) {
                hooks.runPhasedCommand.for(commandName).tapPromise(PLUGIN_NAME, handler);
            }
        }
    }
}
exports.default = RushAzureInteractieAuthPlugin;
//# sourceMappingURL=RushAzureInteractiveAuthPlugin.js.map