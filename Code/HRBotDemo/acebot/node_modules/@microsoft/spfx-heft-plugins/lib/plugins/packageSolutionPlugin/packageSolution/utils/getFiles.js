"use strict";
/**
 * Reads relative file paths given a working directory and a glob.
 * Relative paths are generated by removing a certain
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRelativeFilePathsAsync = exports.getFilesAsync = void 0;
const glob_1 = __importDefault(require("glob"));
const fs_1 = __importDefault(require("fs"));
const path = __importStar(require("path"));
const node_core_library_1 = require("@rushstack/node-core-library");
/** Loads a directory of files into IFile objects */
async function getFilesAsync(terminal, cwd, globs, foundMessage = 'Found file: ') {
    const filenames = await node_core_library_1.LegacyAdapters.convertCallbackToPromise(glob_1.default, globs, { cwd: cwd });
    return (filenames || []).map((filename) => {
        terminal.writeLine(foundMessage + filename);
        return {
            filename: filename,
            contents: fs_1.default.readFileSync(path.join(cwd, filename))
        };
    });
}
exports.getFilesAsync = getFilesAsync;
/** Reads the list of relative path from a specified folder */
async function getRelativeFilePathsAsync(terminal, cwd, globs, foundMessage = 'Found file: ') {
    const files = await node_core_library_1.LegacyAdapters.convertCallbackToPromise(glob_1.default, globs, {
        cwd
    });
    return files.map((filename) => {
        terminal.writeLine(node_core_library_1.Colors.cyan(foundMessage + filename));
        return filename;
    });
}
exports.getRelativeFilePathsAsync = getRelativeFilePathsAsync;
//# sourceMappingURL=getFiles.js.map