"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigureServe = void 0;
const path = __importStar(require("path"));
const node_core_library_1 = require("@rushstack/node-core-library");
const serveJsonReader_1 = require("../../spfxConfig/serveJsonReader");
const constants_1 = require("../../utilities/constants");
class ConfigureServe {
    constructor(configuration, terminal) {
        this._buildFolder = configuration.buildFolderPath;
        this._terminal = terminal;
        this._serveConfig = this._getServeConfig();
    }
    generateServeConfig() {
        const serveConfig = {
            port: constants_1.DEFAULT_PORT
        };
        if (this._serveConfig) {
            if (this._serveConfig.port) {
                serveConfig.port = this._serveConfig.port;
            }
            serveConfig.contentBase = this._serveConfig.contentBase;
            serveConfig.contentBasePublicPath = this._serveConfig.contentBasePublicPath;
            if (this._serveConfig.initialPage) {
                let initialPage = this._serveConfig.initialPage;
                if (this._serveConfig.api) {
                    initialPage = initialPage.replace(`:${this._serveConfig.api.port}`, `:${serveConfig.port}`);
                }
                serveConfig.initialPage = initialPage;
            }
            if (this._serveConfig.api) {
                let apiMap = require(path.join(this._buildFolder, this._serveConfig.api.entryPath));
                if (apiMap.default) {
                    apiMap = apiMap.default;
                }
                serveConfig.apiMap = apiMap;
            }
        }
        return serveConfig;
    }
    logRequestsMiddleware() {
        const logger = this._terminal.writeLine.bind(this._terminal);
        return (req, res, next) => {
            const msg = [' Request: '];
            if (req.url.endsWith('bundle.js')) {
                msg.push(node_core_library_1.Colors.green(req.url));
            }
            else if (req.url.endsWith('.js')) {
                msg.push(node_core_library_1.Colors.magenta(req.url));
            }
            else {
                msg.push(node_core_library_1.Colors.cyan(req.url));
            }
            logger(...msg);
            next();
        };
    }
    _getServeConfig() {
        const configPath = path.join(this._buildFolder, 'config', 'serve.json');
        try {
            const serveConfig = (0, serveJsonReader_1.readServeConfigFile)(configPath);
            return serveConfig;
        }
        catch (err) {
            this._terminal.writeWarningLine('Unable to parse serve config file.', String(err));
        }
    }
}
exports.ConfigureServe = ConfigureServe;
//# sourceMappingURL=ConfigureServe.js.map