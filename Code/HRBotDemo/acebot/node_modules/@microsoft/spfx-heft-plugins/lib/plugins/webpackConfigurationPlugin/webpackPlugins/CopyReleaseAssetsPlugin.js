"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CopyReleaseAssetsPlugin = void 0;
const path = __importStar(require("path"));
const webpack = __importStar(require("webpack"));
const node_core_library_1 = require("@rushstack/node-core-library");
const ManifestPlugin_1 = require("../../../spfxManifests/webpack/ManifestPlugin");
const PLUGIN_NAME = 'copy-release-assets';
const IGNORED_FILE_EXTENSIONS_DEBUG = new Set(['.stats.json', '.stats.html']);
const IGNORED_FILE_EXTENSIONS_PRODUCTION = new Set([
    '.map',
    '.stats.json',
    '.stats.html'
]);
const DEFAULT_ASSETS_FOLDER_NAME = 'assets';
const MANIFESTS_FOLDER_NAME = 'manifests';
class CopyReleaseAssetsPlugin {
    constructor(options) {
        this._options = options;
    }
    apply(compiler) {
        const assetsReleasePath = path.resolve(this._options.releasePath, this._options.assetsFolderName || DEFAULT_ASSETS_FOLDER_NAME);
        const manifestsReleasePath = path.resolve(this._options.releasePath, this._options.manifestsFolderName || MANIFESTS_FOLDER_NAME);
        node_core_library_1.FileSystem.ensureEmptyFolder(assetsReleasePath);
        node_core_library_1.FileSystem.ensureEmptyFolder(manifestsReleasePath);
        const ignoredFileExtensions = this._options.isDebug
            ? IGNORED_FILE_EXTENSIONS_DEBUG
            : IGNORED_FILE_EXTENSIONS_PRODUCTION;
        compiler.hooks.afterEmit.tap(PLUGIN_NAME, (compilation) => {
            for (const [assetName, asset] of Object.entries(compilation.assets)) {
                const assetExtension = path.extname(assetName);
                if (!ignoredFileExtensions.has(assetExtension) && asset.emitted) {
                    const outputRelativePath = path.relative(compiler.options.output.path, asset.existsAt);
                    const releaseManifestVariant = ManifestPlugin_1.ManifestPlugin._tryGetReleaseManifestVariant(asset);
                    if (releaseManifestVariant) {
                        // This is a manifest
                        const releasePath = path.resolve(manifestsReleasePath, outputRelativePath);
                        node_core_library_1.FileSystem.writeFile(releasePath, releaseManifestVariant, { ensureFolderExists: true });
                    }
                    else {
                        // This isn't a manifest
                        const releasePath = path.resolve(assetsReleasePath, outputRelativePath);
                        node_core_library_1.FileSystem.ensureFolder(path.dirname(releasePath));
                        node_core_library_1.FileSystem.copyFile({
                            sourcePath: asset.existsAt,
                            destinationPath: releasePath
                        });
                    }
                }
            }
        });
    }
}
exports.CopyReleaseAssetsPlugin = CopyReleaseAssetsPlugin;
//# sourceMappingURL=CopyReleaseAssetsPlugin.js.map