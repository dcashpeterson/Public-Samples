"use strict";
/**
 * Reads custom feature XML from folder specified by config. This function looks for all `.rels` files in
 * the `/_rels` folder, assumes that a Feature.xml file of the same name exists in the root folder. It
 * returns an object with a list of IFile files to include in the package, as well as the paths to all the
 * feature.xml files, which is later referenced by the `AppManifest.xml.rels` file, thereby including the
 * custom feature in the package.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readCustomFeaturesAsync = void 0;
const path = __importStar(require("path"));
const constants_1 = __importDefault(require("../config/constants"));
const getFiles_1 = require("./getFiles");
/**
 * Reads custom feature XML from folder specified by config. This function looks for all `.rels` files in
 * the `/_rels` folder, assumes that a Feature.xml file of the same name exists in the root folder. It
 * returns an object with a list of IFile files to include in the package, as well as the paths to all the
 * feature.xml files, which is later referenced by the `AppManifest.xml.rels` file, thereby including the
 * custom feature in the package.
 * todo: we allow multiple featureXML globs to be specified
 */
async function readCustomFeaturesAsync(terminal, options) {
    const filenames = await getCustomFeatureXmlFilenamesAsync(terminal, options.paths.featureXmlDir);
    const files = await getCustomFilesAsync(terminal, options.paths.featureXmlDir);
    return {
        files: files,
        customFeatureFilepath: filenames
    };
}
exports.readCustomFeaturesAsync = readCustomFeaturesAsync;
/** Reads the list of feature xml filenames from a specified rels folder */
async function getCustomFeatureXmlFilenamesAsync(terminal, featureXmlDir) {
    const filenames = await (0, getFiles_1.getRelativeFilePathsAsync)(terminal, path.join(featureXmlDir, constants_1.default.RelsFolder), `*${constants_1.default.RelsXml}`, 'Found custom feature file: ');
    return filenames.map((filename) => filename.replace(constants_1.default.RelsExtensionRegex, ''));
}
/** Loads a directory of files into IFile objects */
async function getCustomFilesAsync(terminal, featureXmlDir) {
    return await (0, getFiles_1.getFilesAsync)(terminal, featureXmlDir, '**/*.*', 'Found custom file: ');
}
//# sourceMappingURL=readCustomFeatures.js.map