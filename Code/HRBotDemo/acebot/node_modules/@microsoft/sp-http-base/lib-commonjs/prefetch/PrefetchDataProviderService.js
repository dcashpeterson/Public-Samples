"use strict";
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPrefetchDataProviderServiceKey = exports.PrefetchDataProviderService = void 0;
var sp_core_library_1 = require("@microsoft/sp-core-library");
/**
 * The PrefetchDataProviderService used for injecting CacheDataprovider singelton to SPHttpClient
 *
 * @internal
 */
var PrefetchDataProviderService = /** @class */ (function () {
    /**
     * Initializes a new instance of the PrefetchDataProviderService class.
     * @param serviceScope - The service scope.
     */
    function PrefetchDataProviderService(serviceScope) {
        // do nothing
    }
    Object.defineProperty(PrefetchDataProviderService.prototype, "_provider", {
        /**
         * Gets or sets the cache data provider
         *
         * @internal
         */
        get: function () {
            return this._prefetchDataProvider;
        },
        set: function (provider) {
            sp_core_library_1.Validate.isNotNullOrUndefined(provider, 'Prefetch provider can not be null or undefined');
            if (provider.isDisposed) {
                throw new Error('Prefetch provider can not be disposed');
            }
            if (this._prefetchDataProvider) {
                throw new Error('Prefetch provider can only be set once');
            }
            this._prefetchDataProvider = provider;
        },
        enumerable: false,
        configurable: true
    });
    return PrefetchDataProviderService;
}());
exports.PrefetchDataProviderService = PrefetchDataProviderService;
/**
 * Gets the service key.
 *
 * @internal
 */
function getPrefetchDataProviderServiceKey() {
    if (!PrefetchDataProviderService.serviceKey) {
        PrefetchDataProviderService.serviceKey = sp_core_library_1.ServiceKey.create('sp-http:PrefetchDataProvider', PrefetchDataProviderService);
    }
    return PrefetchDataProviderService.serviceKey;
}
exports.getPrefetchDataProviderServiceKey = getPrefetchDataProviderServiceKey;
//# sourceMappingURL=PrefetchDataProviderService.js.map