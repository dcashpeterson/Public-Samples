import { CardElement, StylableCardElementContainer, SerializationContext, Container, ContainerStyleProperty } from "./card-elements";
import { HorizontalAlignment, VerticalAlignment } from "./enums";
import { TextStyleDefinition } from "./host-config";
import { BoolProperty, CustomProperty, EnumProperty, PropertyBag, SerializableObject } from "./serialization";
import { SizeAndUnit, PaddingDefinition } from "./shared";
export declare class TableColumnDefinition extends SerializableObject {
    static readonly horizontalCellContentAlignmentProperty: EnumProperty<typeof HorizontalAlignment>;
    static readonly verticalCellContentAlignmentProperty: EnumProperty<typeof VerticalAlignment>;
    static readonly widthProperty: CustomProperty<SizeAndUnit>;
    horizontalCellContentAlignment?: HorizontalAlignment;
    verticalCellContentAlignment?: VerticalAlignment;
    width: SizeAndUnit;
    getSchemaKey(): string;
    computedWidth: SizeAndUnit;
}
export declare abstract class StylableContainer<T extends CardElement> extends StylableCardElementContainer {
    private _items;
    private parseItem;
    protected abstract getCollectionPropertyName(): string;
    protected abstract createItemInstance(typeName: string): T | undefined;
    protected internalAddItem(item: T): void;
    protected internalRemoveItem(item: T): boolean;
    protected internalParse(source: any, context: SerializationContext): void;
    protected internalToJSON(target: PropertyBag, context: SerializationContext): void;
    removeItem(item: T): boolean;
    getItemCount(): number;
    getItemAt(index: number): T;
    getFirstVisibleRenderedItem(): T | undefined;
    getLastVisibleRenderedItem(): T | undefined;
}
export declare type CellType = "data" | "header";
export declare class TableCell extends Container {
    private _columnIndex;
    private _cellType;
    protected getHasBorder(): boolean;
    protected applyBorder(): void;
    protected getDefaultPadding(): PaddingDefinition;
    protected internalRender(): HTMLElement | undefined;
    protected shouldSerialize(context: SerializationContext): boolean;
    getJsonTypeName(): string;
    getEffectiveTextStyleDefinition(): TextStyleDefinition;
    getEffectiveHorizontalAlignment(): HorizontalAlignment;
    getEffectiveVerticalContentAlignment(): VerticalAlignment;
    get columnIndex(): number;
    get cellType(): CellType;
    get parentRow(): TableRow;
    get isStandalone(): boolean;
}
export declare class TableRow extends StylableContainer<TableCell> {
    static readonly styleProperty: ContainerStyleProperty;
    static readonly horizontalCellContentAlignmentProperty: EnumProperty<typeof HorizontalAlignment>;
    static readonly verticalCellContentAlignmentProperty: EnumProperty<typeof VerticalAlignment>;
    horizontalCellContentAlignment?: HorizontalAlignment;
    verticalCellContentAlignment?: VerticalAlignment;
    protected getDefaultPadding(): PaddingDefinition;
    protected applyBackground(): void;
    protected getCollectionPropertyName(): string;
    protected createItemInstance(typeName: string): TableCell | undefined;
    protected internalRender(): HTMLElement | undefined;
    protected shouldSerialize(context: SerializationContext): boolean;
    addCell(cell: TableCell): void;
    removeCellAt(columnIndex: number): boolean;
    ensureHasEnoughCells(cellCount: number): void;
    getJsonTypeName(): string;
    getIsFirstRow(): boolean;
    get parentTable(): Table;
    get isStandalone(): boolean;
}
export declare class Table extends StylableContainer<TableRow> {
    private static readonly columnsProperty;
    static readonly firstRowAsHeadersProperty: BoolProperty;
    static readonly showGridLinesProperty: BoolProperty;
    static readonly gridStyleProperty: ContainerStyleProperty;
    static readonly horizontalCellContentAlignmentProperty: EnumProperty<typeof HorizontalAlignment>;
    static readonly verticalCellContentAlignmentProperty: EnumProperty<typeof VerticalAlignment>;
    private _columns;
    firstRowAsHeaders: boolean;
    showGridLines: boolean;
    get gridStyle(): string | undefined;
    set gridStyle(value: string | undefined);
    horizontalCellContentAlignment?: HorizontalAlignment;
    verticalCellContentAlignment?: VerticalAlignment;
    private ensureRowsHaveEnoughCells;
    private removeCellsFromColumn;
    protected getCollectionPropertyName(): string;
    protected createItemInstance(typeName: string): TableRow | undefined;
    protected internalParse(source: PropertyBag, context: SerializationContext): void;
    protected internalRender(): HTMLElement | undefined;
    addColumn(column: TableColumnDefinition): void;
    removeColumn(column: TableColumnDefinition): void;
    getColumnCount(): number;
    getColumnAt(index: number): TableColumnDefinition;
    addRow(row: TableRow): void;
    getJsonTypeName(): string;
}
