import { Authentication, AuthCardButton, ExecuteAction, TokenExchangeResource } from "./card-elements";
export declare enum ActivityRequestTrigger {
    Automatic = "automatic",
    Manual = "manual"
}
export interface IActivityRequest {
    readonly action: ExecuteAction;
    readonly trigger: ActivityRequestTrigger;
    readonly attemptNumber: number;
    readonly consecutiveRefreshes: number;
    authCode?: string;
    authToken?: string;
    retryAsync(): void;
}
export declare class ActivityRequestError {
    readonly code?: string | undefined;
    readonly message?: string | undefined;
    constructor(code?: string | undefined, message?: string | undefined);
}
export declare abstract class ActivityResponse {
    readonly request: IActivityRequest;
    constructor(request: IActivityRequest);
}
export declare class SuccessResponse extends ActivityResponse {
    readonly request: IActivityRequest;
    readonly rawContent?: string | undefined;
    constructor(request: IActivityRequest, rawContent?: string | undefined);
}
export declare class ErrorResponse extends ActivityResponse {
    readonly request: IActivityRequest;
    readonly error: ActivityRequestError;
    constructor(request: IActivityRequest, error: ActivityRequestError);
}
export declare class LoginRequestResponse extends ActivityResponse {
    readonly request: IActivityRequest;
    private _auth;
    readonly signinButton?: AuthCardButton;
    constructor(request: IActivityRequest, _auth: Authentication);
    get tokenExchangeResource(): TokenExchangeResource | undefined;
}
