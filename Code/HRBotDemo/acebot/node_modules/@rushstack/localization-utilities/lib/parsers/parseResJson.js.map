{"version":3,"file":"parseResJson.js","sourceRoot":"","sources":["../../src/parsers/parseResJson.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,oEAAwD;AAIxD;;GAEG;AACH,SAAgB,YAAY,CAAC,EAAE,OAAO,EAAE,YAAY,EAAE,QAAQ,EAAqB;IACjF,MAAM,WAAW,GAA2B,4BAAQ,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;IAC1E,MAAM,UAAU,GAAsB,EAAE,CAAC;IAEzC,MAAM,YAAY,GAAyB,IAAI,GAAG,EAAE,CAAC;IACrD,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE;QACtD,IAAI,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE;YACnD,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;gBAC1B,YAAY,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;aAC9B;SACF;aAAM;YACL,MAAM,UAAU,GAAW,IAAI,GAAG,UAAU,CAAC;YAC7C,MAAM,OAAO,GAAuB,WAAW,CAAC,UAAU,CAAC,CAAC;YAC5D,YAAY,CAAC,GAAG,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YAEnC,IAAI,CAAC,CAAA,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAG,QAAQ,EAAE,GAAG,CAAC,CAAA,EAAE;gBAClC,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC;aACtC;SACF;KACF;IAED,MAAM,cAAc,GAAa,EAAE,CAAC;IACpC,KAAK,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,YAAY,EAAE;QACtC,IAAI,CAAC,IAAI,EAAE;YACT,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;SACvD;KACF;IAED,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE;QAC7B,MAAM,IAAI,KAAK,CACb,4EAA4E;YAC1E,2BAA2B,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAC1D,CAAC;KACH;IAED,OAAO,UAAU,CAAC;AACpB,CAAC;AApCD,oCAoCC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { JsonFile } from '@rushstack/node-core-library';\n\nimport type { ILocalizationFile, IParseFileOptions } from '../interfaces';\n\n/**\n * @public\n */\nexport function parseResJson({ content, ignoreString, filePath }: IParseFileOptions): ILocalizationFile {\n  const resjsonFile: Record<string, string> = JsonFile.parseString(content);\n  const parsedFile: ILocalizationFile = {};\n\n  const usedComments: Map<string, boolean> = new Map();\n  for (const [key, value] of Object.entries(resjsonFile)) {\n    if (key.startsWith('_') && key.endsWith('.comment')) {\n      if (!usedComments.has(key)) {\n        usedComments.set(key, false);\n      }\n    } else {\n      const commentKey: string = `_${key}.comment`;\n      const comment: string | undefined = resjsonFile[commentKey];\n      usedComments.set(commentKey, true);\n\n      if (!ignoreString?.(filePath, key)) {\n        parsedFile[key] = { value, comment };\n      }\n    }\n  }\n\n  const orphanComments: string[] = [];\n  for (const [key, used] of usedComments) {\n    if (!used) {\n      orphanComments.push(key.slice(1, -'.comment'.length));\n    }\n  }\n\n  if (orphanComments.length > 0) {\n    throw new Error(\n      'The resjson file is invalid. Comments exist for the following string keys ' +\n        `that don't have values: ${orphanComments.join(', ')}.`\n    );\n  }\n\n  return parsedFile;\n}\n"]}