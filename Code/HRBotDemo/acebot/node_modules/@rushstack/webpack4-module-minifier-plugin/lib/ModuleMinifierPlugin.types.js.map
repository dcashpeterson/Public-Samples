{"version":3,"file":"ModuleMinifierPlugin.types.js","sourceRoot":"","sources":["../src/ModuleMinifierPlugin.types.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport type { IModuleMinifier } from '@rushstack/module-minifier';\nimport type { AsyncSeriesWaterfallHook, SyncWaterfallHook } from 'tapable';\nimport type * as webpack from 'webpack';\nimport type { ReplaceSource, Source } from 'webpack-sources';\n\n/**\n * Information about where the module was rendered in the emitted asset.\n * @public\n */\nexport interface IRenderedModulePosition {\n  /**\n   * The offset from the start of tha asset to the start of the module, in characters.\n   */\n  charOffset: number;\n  /**\n   * The length of the rendered module, in characters.\n   */\n  charLength: number;\n}\n\n/**\n * Information about a dehydrated webpack ECMAScript asset\n * @public\n */\nexport interface IAssetInfo {\n  /**\n   * The (minified) boilerplate code for the asset. Will contain a token to be replaced by the minified modules.\n   */\n  source: Source;\n\n  /**\n   * The name of the asset, used to index into compilation.assets\n   */\n  fileName: string;\n\n  /**\n   * The ids of the modules that are part of the chunk corresponding to this asset\n   */\n  modules: (string | number)[];\n\n  /**\n   * Information about the offsets and character lengths for each rendered module in the final asset.\n   */\n  renderInfo: Map<string | number, IRenderedModulePosition>;\n\n  /**\n   * The raw chunk object from Webpack, in case information from it is necessary for reconstruction\n   */\n  chunk: webpack.compilation.Chunk;\n\n  /**\n   * The set of external names to postprocess\n   */\n  externalNames: Map<string, string>;\n}\n\n/**\n * Statistics from the plugin. Namely module sizes.\n * @public\n */\nexport interface IModuleMinifierPluginStats {\n  metadataByAssetFileName: Map<string, IAssetStats>;\n}\n\n/**\n * Rendered positional data\n * @public\n */\nexport interface IAssetStats {\n  positionByModuleId: Map<string | number, IRenderedModulePosition>;\n}\n\n/**\n * Information about a minified module\n * @public\n */\nexport interface IModuleInfo {\n  /**\n   * The (minified) code of this module. Will be a function expression.\n   */\n  source: Source;\n\n  /**\n   * The raw module object from Webpack, in case information from it is necessary for reconstruction\n   */\n  module: IExtendedModule;\n}\n\n/**\n * Extension of the webpack Module typings with members that are used by this Plugin\n * @public\n */\nexport interface IExtendedModule extends webpack.compilation.Module {\n  /**\n   * Is this module external?\n   */\n  external?: boolean;\n  /**\n   * Concatenated modules\n   */\n  modules?: IExtendedModule[];\n  /**\n   * Recursively scan the dependencies of a module\n   */\n  hasDependencies(callback: (dep: webpack.compilation.Dependency) => boolean | void): boolean;\n  /**\n   * Id for the module\n   */\n  // eslint-disable-next-line @rushstack/no-new-null\n  id: string | number | null;\n  /**\n   * Gets a descriptive identifier for the module.\n   */\n  identifier(): string;\n  /**\n   * Gets a friendly identifier for the module.\n   */\n  readableIdentifier(requestShortener: unknown): string;\n  /**\n   * Path to the physical file this module represents\n   */\n  resource?: string;\n}\n\ndeclare module 'webpack' {\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  namespace compilation {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    interface RuntimeTemplate {\n      requestShortener: webpack.compilation.RequestShortener;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    interface RequestShortener {}\n  }\n}\n\n/**\n * This is the second parameter to the thisCompilation and compilation webpack.Compiler hooks.\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface _IWebpackCompilationData {\n  normalModuleFactory: webpack.compilation.NormalModuleFactory;\n}\n\n/**\n * This is the second parameter to the NormalModuleFactory `module` hook\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface _INormalModuleFactoryModuleData {\n  resourceResolveData?: {\n    /**\n     * Contents of the description file (package.json) for the module\n     */\n    descriptionFileData?: {\n      /**\n       * The name of the package\n       */\n      name: string;\n    };\n    /**\n     * Absolute path of the description file (package.json) for the module\n     */\n    descriptionFilePath?: string;\n    /**\n     * Absolute path of the directory containing the description file (package.json) for the module\n     */\n    descriptionFileRoot?: string;\n    /**\n     * Relative path from the description file (package.json) to the module\n     */\n    relativePath?: string;\n  };\n}\n\n/**\n * A map from file names to dehydrated assets\n * @public\n */\nexport type IAssetMap = Map<string, IAssetInfo>;\n/**\n * A map from module ids to minified modules\n * @public\n */\nexport type IModuleMap = Map<string | number, IModuleInfo>;\n\n/**\n * Options to the ModuleMinifierPlugin constructor\n * @public\n */\nexport interface IModuleMinifierPluginOptions {\n  /**\n   * Minifier implementation to use. Required.\n   */\n  minifier: IModuleMinifier;\n\n  /**\n   * Whether to enable source map processing. If not provided, will attempt to guess based on `mode` and `devtool` in the webpack config.\n   * Set to `false` for faster builds at the expense of debuggability.\n   */\n  sourceMap?: boolean;\n\n  /**\n   * Instructs the plugin to alter the code of modules to maximize portability across compilations.\n   */\n  usePortableModules?: boolean;\n\n  /**\n   * Instructs the plugin to alter the code of async import statements to compress better and be portable across compilations.\n   */\n  compressAsyncImports?: boolean;\n}\n\n/**\n * The set of data remaining to rehydrate in the current compilation\n * @public\n */\nexport interface IDehydratedAssets {\n  /**\n   * The set of remaining assets to rehydrate. Each tap may remove some or all assets from this collection\n   */\n  assets: IAssetMap;\n\n  /**\n   * The set of modules to use for rehydrating assets.\n   */\n  modules: IModuleMap;\n}\n\n/**\n * Argument to the postProcessCodeFragment hook for the current execution context\n * @public\n */\nexport interface IPostProcessFragmentContext {\n  /**\n   * The current webpack compilation, for error reporting\n   */\n  compilation: webpack.compilation.Compilation;\n  /**\n   * A name to use for logging\n   */\n  loggingName: string;\n  /**\n   * The current module being processed, or `undefined` if not in a module (e.g. the bootstrapper)\n   */\n  module: webpack.compilation.Module | undefined;\n}\n\n/**\n * Hooks provided by the ModuleMinifierPlugin\n * @public\n */\nexport interface IModuleMinifierPluginHooks {\n  /**\n   * Hook invoked at the start of optimizeChunkAssets to rehydrate the minified boilerplate and runtime into chunk assets.\n   */\n  rehydrateAssets: AsyncSeriesWaterfallHook<IDehydratedAssets, webpack.compilation.Compilation>;\n\n  /**\n   * Hook invoked on a module id to get the final rendered id.\n   */\n  finalModuleId: SyncWaterfallHook<string | number | undefined, webpack.compilation.Compilation>;\n\n  /**\n   * Hook invoked on code after it has been returned from the minifier.\n   */\n  postProcessCodeFragment: SyncWaterfallHook<ReplaceSource, IPostProcessFragmentContext>;\n}\n\n/**\n * The comment objects from the Acorn parser inside of webpack\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface _IAcornComment {\n  type: 'Line' | 'Block';\n  value: string;\n  start: number;\n  end: number;\n}\n"]}