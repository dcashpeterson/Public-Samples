"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsalBrowserClientManager = void 0;
var msalBrowserLegacy_1 = require("msalBrowserLegacy");
var MsalMonitor_1 = require("../MsalMonitor");
var MsalUtilities_1 = require("../MsalUtilities");
/**
 * This class manages Msal Browser client instances and provides the caller with a client to use.
 *
 * MSAL.js team strongly encourages us to have a 1:1 relationship between client IDs and Msal Browser clients
 * for performance and reliability reasons.
 * This class will ensure that there is only 1 Msal Browser client per client ID.
 *
 * MsalBrowserClientManager also ensures that all Msal Browser clients have invoked handleRedirectPromise()
 * and waited for the result.
 */
var MsalBrowserClientManager = /** @class */ (function () {
    function MsalBrowserClientManager() {
    }
    /**
     * This method registers a new Msal Browser client. Calling this method tells MsalBrowserClientManager
     * that you will soon request a client with the same authority, client ID, and redirect URI.
     *
     * Registering before requesting a client is optional, you may instead directly call getMsalBrowserClient().
     * By registering early (e.g., during the constructor of MsalBrowserTokenProvider), handleRedirectPromise()
     * will have time to resolve before the client is needed for a request
     *
     * @param authority - URL of AAD auth server.
     * @param clientId - AAD issued client ID that tokens are being requested for.
     * @param redirectUri - URL the user will be redirected to after calling any redirect methods.
     */
    MsalBrowserClientManager.registerMsalBrowserClient = function (authority, clientId, redirectUri) {
        var _this = this;
        if (!this._isClientRegistered(clientId)) {
            MsalBrowserClientManager._msalBrowserClients.set(clientId, new Promise(function (resolve) {
                var msalBrowserClient = _this._createMsalBrowserClient(authority, clientId, redirectUri);
                return msalBrowserClient
                    .handleRedirectPromise()
                    .then(function () {
                    resolve(msalBrowserClient);
                })
                    .catch(function (error) {
                    var handleRedirectPromiseQos = new MsalMonitor_1.MsalMonitor('MsalBrowserClientManager._handleRedirectPromise');
                    handleRedirectPromiseQos.writeUnexpectedFailure(error.errorCode, error);
                });
            }));
        }
    };
    /**
     * This method returns an initialized Msal Browser client that has also invoked and fulfilled the
     * handleRedirectPromise() call. If the requested Msal Browser client does not exist, this method
     * will create and return it.
     *
     * @param authority - URL of AAD auth server.
     * @param clientId - AAD issued client ID that tokens are being requested for.
     * @param redirectUri - URL the user will be redirected to after calling any redirect methods.
     * @returns A promise containing an initialized Msal Browser client.
     */
    MsalBrowserClientManager.getMsalBrowserClient = function (authority, clientId, redirectUri) {
        if (!this._isClientRegistered(clientId)) {
            this.registerMsalBrowserClient(authority, clientId, redirectUri);
        }
        return MsalBrowserClientManager._msalBrowserClients.get(clientId);
    };
    MsalBrowserClientManager._isClientRegistered = function (clientId) {
        return MsalBrowserClientManager._msalBrowserClients.has(clientId);
    };
    /**
     * Creates and returns a PublicClientApplication with a custom configuration.
     * PublicClientApplication is the object used for interacting with the MSAL library,
     * AKA MSAL client.
     *
     * Options:
     *   - authority: URL of AAD auth server.
     *   - clientId: AAD issued client ID that tokens are being requested for.
     *   - navigateToLoginRequestUrl: Whether or not to navigate to the original request URL after
     *                                the auth server navigates to the redirect URL.
     *   - redirectUri: URL the user will be redirected to after calling any redirect methods.
     *   - loadFrameTimeout: Timeout for waiting for a response hash in an iFrame.
     *   - navigateFrameWait: Maximum time MSAL will wait for a frame to load.
     *   - loggerOptions: Configuration for MSAL logging. See below for details.
     *
     * Logging:
     *   - MSAL can enable logging to the console for debugging purposes.
     *   - To enable logging, use the query string parameter 'msalLogging=true'.
     *   - To disable logging, use the query string parameter 'msalLogging=false'.
     *   - Logs are printed in the format "[sp-http][msal.js]: \<LOG_MESSAGE\>.
     *
     * @returns An initialized PublicClientApplication.
     */
    MsalBrowserClientManager._createMsalBrowserClient = function (authority, clientId, redirectUri) {
        var configuration = {
            auth: {
                authority: authority,
                clientId: clientId,
                navigateToLoginRequestUrl: true,
                redirectUri: redirectUri
            },
            system: {
                loadFrameTimeout: 10000,
                navigateFrameWait: 0
            }
        };
        if (MsalUtilities_1.MsalUtilities.shouldPrintMsalLogsToConsole()) {
            configuration.system.loggerOptions = {
                loggerCallback: MsalUtilities_1.MsalUtilities.msalLoggerCallback,
                piiLoggingEnabled: true,
                logLevel: msalBrowserLegacy_1.LogLevel.Verbose
            };
        }
        return new msalBrowserLegacy_1.PublicClientApplication(configuration);
    };
    MsalBrowserClientManager._msalBrowserClients = new Map();
    return MsalBrowserClientManager;
}());
exports.MsalBrowserClientManager = MsalBrowserClientManager;
//# sourceMappingURL=MsalBrowserClientManager.js.map