import { type ITerminal } from '@rushstack/node-core-library';
import type { CommandLineConfiguration } from '../api/CommandLineConfiguration';
import type { RushConfiguration } from '../api/RushConfiguration';
import { type IBuiltInPluginConfiguration } from './PluginLoader/BuiltInPluginLoader';
import { AutoinstallerPluginLoader } from './PluginLoader/AutoinstallerPluginLoader';
import type { RushSession } from './RushSession';
import type { PluginLoaderBase } from './PluginLoader/PluginLoaderBase';
import type { RushGlobalFolder } from '../api/RushGlobalFolder';
export interface IPluginManagerOptions {
    terminal: ITerminal;
    rushConfiguration: RushConfiguration;
    rushSession: RushSession;
    builtInPluginConfigurations: IBuiltInPluginConfiguration[];
    restrictConsoleOutput: boolean;
    rushGlobalFolder: RushGlobalFolder;
}
export interface ICustomCommandLineConfigurationInfo {
    commandLineConfiguration: CommandLineConfiguration;
    pluginLoader: PluginLoaderBase;
}
export declare class PluginManager {
    private readonly _terminal;
    private readonly _rushConfiguration;
    private readonly _rushSession;
    private readonly _restrictConsoleOutput;
    private readonly _builtInPluginLoaders;
    private readonly _autoinstallerPluginLoaders;
    private readonly _installedAutoinstallerNames;
    private readonly _loadedPluginNames;
    private readonly _rushGlobalFolder;
    private _error;
    constructor(options: IPluginManagerOptions);
    /**
     * If an error occurs while attempting to load plugins, it will be saved in this property.
     * Rush will attempt to continue and will report the error later by `BaseRushAction._throwPluginErrorIfNeed()`
     * (unless we are invoking a command that is used to fix plugin problems).
     */
    get error(): Error | undefined;
    updateAsync(): Promise<void>;
    reinitializeAllPluginsForCommandAsync(commandName: string): Promise<void>;
    _preparePluginAutoinstallersAsync(pluginLoaders: AutoinstallerPluginLoader[]): Promise<void>;
    tryInitializeUnassociatedPluginsAsync(): Promise<void>;
    tryInitializeAssociatedCommandPluginsAsync(commandName: string): Promise<void>;
    tryGetCustomCommandLineConfigurationInfos(): ICustomCommandLineConfigurationInfo[];
    private _initializePlugins;
    private _getUnassociatedPluginLoaders;
    private _getPluginLoadersForCommand;
    private _applyPlugin;
}
//# sourceMappingURL=PluginManager.d.ts.map