{"version":3,"file":"LocalizationPlugin.js","sourceRoot":"","sources":["../src/LocalizationPlugin.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { JsonFile, FileSystem, type ITerminal, NewlineKind } from '@rushstack/node-core-library';\nimport * as Webpack from 'webpack';\nimport * as path from 'path';\nimport type * as Tapable from 'tapable';\nimport {\n  getPseudolocalizer,\n  type ILocalizationFile,\n  parseLocFile,\n  TypingsGenerator\n} from '@rushstack/localization-utilities';\n\nimport { Constants } from './utilities/Constants';\nimport {\n  type IWebpackConfigurationUpdaterOptions,\n  WebpackConfigurationUpdater\n} from './WebpackConfigurationUpdater';\nimport type {\n  ILocalizationPluginOptions,\n  ILocalizationStats,\n  ILocaleFileData,\n  ILocaleElementMap,\n  ILocalizedStrings,\n  IResolvedMissingTranslations\n} from './interfaces';\nimport type { ILocalizedWebpackChunk } from './webpackInterfaces';\nimport { EntityMarker } from './utilities/EntityMarker';\nimport { type IAsset, type IProcessAssetResult, AssetProcessor, PLACEHOLDER_REGEX } from './AssetProcessor';\n\n/**\n * @internal\n */\nexport interface IStringPlaceholder {\n  value: string;\n  suffix: string;\n}\n\n/**\n * @internal\n */\nexport interface IAddDefaultLocFileResult {\n  /**\n   * A list of paths to translation files that were loaded\n   */\n  additionalLoadedFilePaths: string[];\n\n  errors: Error[];\n}\n\ninterface IExtendedMainTemplate {\n  hooks: {\n    assetPath: Tapable.SyncHook<string, IAssetPathOptions>;\n  };\n}\n\ninterface IExtendedConfiguration extends Webpack.compilation.Compilation {\n  options: Webpack.Configuration;\n}\n\ninterface IExtendedChunkGroup extends Webpack.compilation.ChunkGroup {\n  getChildren(): Webpack.compilation.Chunk[];\n}\n\ninterface IExtendedChunk extends Webpack.compilation.Chunk {\n  filenameTemplate: string;\n}\n\ninterface IAssetPathOptions {\n  chunk: Webpack.compilation.Chunk;\n  contentHashType: string;\n  filename: string;\n}\n\n/**\n * @internal\n */\nexport interface IStringSerialNumberData {\n  values: ILocaleElementMap;\n  locFilePath: string;\n  stringName: string;\n}\n\nconst PLUGIN_NAME: string = 'localization';\n\n/**\n * This plugin facilitates localization in webpack.\n *\n * @public\n */\nexport class LocalizationPlugin implements Webpack.Plugin {\n  /**\n   * @internal\n   */\n  public stringKeys: Map<string, IStringPlaceholder> = new Map<string, IStringPlaceholder>();\n\n  private _options: ILocalizationPluginOptions;\n  private _resolvedTranslatedStringsFromOptions!: ILocalizedStrings;\n  private _globsToIgnore: string[] | undefined;\n  private _stringPlaceholderCounter: number = 0;\n  private _stringPlaceholderMap: Map<string, IStringSerialNumberData> = new Map<\n    string,\n    IStringSerialNumberData\n  >();\n  private _locales: Set<string> = new Set<string>();\n  private _passthroughLocaleName!: string;\n  private _defaultLocale!: string;\n  private _noStringsLocaleName!: string;\n  private _fillMissingTranslationStrings!: boolean;\n  private _pseudolocalizers: Map<string, (str: string) => string> = new Map<\n    string,\n    (str: string) => string\n  >();\n  private _resxNewlineNormalization: NewlineKind | undefined;\n  private _ignoreMissingResxComments: boolean | undefined;\n\n  /**\n   * The outermost map's keys are the locale names.\n   * The middle map's keys are the resolved, file names.\n   * The innermost map's keys are the string identifiers and its values are the string values.\n   */\n  private _resolvedLocalizedStrings: Map<string, Map<string, Map<string, string>>> = new Map<\n    string,\n    Map<string, Map<string, string>>\n  >();\n\n  public constructor(options: ILocalizationPluginOptions) {\n    if (options.filesToIgnore) {\n      throw new Error('The filesToIgnore option is no longer supported. Please use globsToIgnore instead.');\n    }\n\n    if (options.typingsOptions?.ignoreString) {\n      throw new Error(\n        'The typingsOptions.ignoreString option is no longer supported. Please use the ignoreString ' +\n          'option directly on the constructor options object instead.'\n      );\n    }\n\n    this._options = options;\n  }\n\n  public apply(compiler: Webpack.Compiler): void {\n    const isWebpack4: boolean = !!compiler.hooks;\n\n    if (!isWebpack4) {\n      throw new Error(`The ${LocalizationPlugin.name} plugin requires Webpack 4`);\n    }\n\n    if (this._options.typingsOptions && compiler.context) {\n      if (\n        this._options.typingsOptions.generatedTsFolder &&\n        !path.isAbsolute(this._options.typingsOptions.generatedTsFolder)\n      ) {\n        this._options.typingsOptions.generatedTsFolder = path.resolve(\n          compiler.context,\n          this._options.typingsOptions.generatedTsFolder\n        );\n      }\n\n      if (\n        this._options.typingsOptions.sourceRoot &&\n        !path.isAbsolute(this._options.typingsOptions.sourceRoot)\n      ) {\n        this._options.typingsOptions.sourceRoot = path.resolve(\n          compiler.context,\n          this._options.typingsOptions.sourceRoot\n        );\n      }\n\n      const secondaryGeneratedTsFolders: string[] | undefined =\n        this._options.typingsOptions.secondaryGeneratedTsFolders;\n      if (secondaryGeneratedTsFolders) {\n        for (let i: number = 0; i < secondaryGeneratedTsFolders.length; i++) {\n          const secondaryGeneratedTsFolder: string = secondaryGeneratedTsFolders[i];\n          if (!path.isAbsolute(secondaryGeneratedTsFolder)) {\n            secondaryGeneratedTsFolders[i] = path.resolve(compiler.context, secondaryGeneratedTsFolder);\n          }\n        }\n      }\n    }\n\n    // https://github.com/webpack/webpack-dev-server/pull/1929/files#diff-15fb51940da53816af13330d8ce69b4eR66\n    const isWebpackDevServer: boolean = process.env.WEBPACK_DEV_SERVER === 'true';\n\n    const { errors, warnings } = this._initializeAndValidateOptions(compiler.options, isWebpackDevServer);\n\n    let typingsPreprocessor: TypingsGenerator | undefined;\n    if (this._options.typingsOptions) {\n      typingsPreprocessor = new TypingsGenerator({\n        srcFolder: this._options.typingsOptions.sourceRoot || compiler.context,\n        generatedTsFolder: this._options.typingsOptions.generatedTsFolder,\n        secondaryGeneratedTsFolders: this._options.typingsOptions.secondaryGeneratedTsFolders,\n        exportAsDefault: this._options.typingsOptions.exportAsDefault,\n        globsToIgnore: this._options.globsToIgnore,\n        ignoreString: this._options.ignoreString,\n        processComment: this._options.typingsOptions.processComment\n      });\n    } else {\n      typingsPreprocessor = undefined;\n    }\n\n    const webpackConfigurationUpdaterOptions: IWebpackConfigurationUpdaterOptions = {\n      pluginInstance: this,\n      configuration: compiler.options,\n      globsToIgnore: this._globsToIgnore,\n      localeNameOrPlaceholder: Constants.LOCALE_NAME_PLACEHOLDER,\n      resxNewlineNormalization: this._resxNewlineNormalization,\n      ignoreMissingResxComments: this._ignoreMissingResxComments,\n      ignoreString: this._options.ignoreString\n    };\n\n    if (errors.length > 0 || warnings.length > 0) {\n      compiler.hooks.compilation.tap(PLUGIN_NAME, (compilation: Webpack.compilation.Compilation) => {\n        compilation.errors.push(...errors);\n        compilation.warnings.push(...warnings);\n      });\n\n      if (errors.length > 0) {\n        // If there are any errors, just pass through the resources in source and don't do any\n        // additional configuration\n        WebpackConfigurationUpdater.amendWebpackConfigurationForInPlaceLocFiles(\n          webpackConfigurationUpdaterOptions\n        );\n        return;\n      }\n    }\n\n    if (isWebpackDevServer) {\n      if (typingsPreprocessor) {\n        compiler.hooks.afterEnvironment.tap(PLUGIN_NAME, () => typingsPreprocessor!.runWatcherAsync());\n\n        if (!compiler.options.plugins) {\n          compiler.options.plugins = [];\n        }\n\n        compiler.options.plugins.push(\n          new Webpack.WatchIgnorePlugin([this._options.typingsOptions!.generatedTsFolder])\n        );\n      }\n\n      WebpackConfigurationUpdater.amendWebpackConfigurationForInPlaceLocFiles(\n        webpackConfigurationUpdaterOptions\n      );\n    } else {\n      if (typingsPreprocessor) {\n        compiler.hooks.beforeRun.tapPromise(\n          PLUGIN_NAME,\n          async () => await typingsPreprocessor!.generateTypingsAsync()\n        );\n      }\n\n      WebpackConfigurationUpdater.amendWebpackConfigurationForMultiLocale(webpackConfigurationUpdaterOptions);\n\n      if (errors.length === 0) {\n        compiler.hooks.thisCompilation.tap(\n          PLUGIN_NAME,\n          (untypedCompilation: Webpack.compilation.Compilation) => {\n            const compilation: IExtendedConfiguration = untypedCompilation as IExtendedConfiguration;\n            (compilation.mainTemplate as unknown as IExtendedMainTemplate).hooks.assetPath.tap(\n              PLUGIN_NAME,\n              (assetPath: string, options: IAssetPathOptions) => {\n                if (\n                  options.contentHashType === 'javascript' &&\n                  assetPath.match(Constants.LOCALE_FILENAME_TOKEN_REGEX)\n                ) {\n                  // Does this look like an async chunk URL generator?\n                  if (typeof options.chunk.id === 'string' && (options.chunk.id as string).match(/^\\\" \\+/)) {\n                    return assetPath.replace(\n                      Constants.LOCALE_FILENAME_TOKEN_REGEX,\n                      `\" + ${Constants.JSONP_PLACEHOLDER} + \"`\n                    );\n                  } else {\n                    return assetPath.replace(\n                      Constants.LOCALE_FILENAME_TOKEN_REGEX,\n                      Constants.LOCALE_NAME_PLACEHOLDER\n                    );\n                  }\n                } else if (assetPath.match(Constants.NO_LOCALE_SOURCE_MAP_FILENAME_TOKEN_REGEX)) {\n                  // Replace the placeholder with the [locale] token for sourcemaps\n                  const deLocalizedFilename: string = options.filename.replace(\n                    PLACEHOLDER_REGEX,\n                    Constants.LOCALE_FILENAME_TOKEN\n                  );\n                  return assetPath.replace(\n                    Constants.NO_LOCALE_SOURCE_MAP_FILENAME_TOKEN_REGEX,\n                    deLocalizedFilename\n                  );\n                } else {\n                  return assetPath;\n                }\n              }\n            );\n\n            compilation.hooks.optimizeChunks.tap(\n              PLUGIN_NAME,\n              (\n                untypedChunks: Webpack.compilation.Chunk[],\n                untypedChunkGroups: Webpack.compilation.ChunkGroup[]\n              ) => {\n                const chunks: IExtendedChunk[] = untypedChunks as IExtendedChunk[];\n                const chunkGroups: IExtendedChunkGroup[] = untypedChunkGroups as IExtendedChunkGroup[];\n\n                let chunksHaveAnyChildren: boolean = false;\n                for (const chunkGroup of chunkGroups) {\n                  const children: Webpack.compilation.Chunk[] = chunkGroup.getChildren();\n                  if (children.length > 0) {\n                    chunksHaveAnyChildren = true;\n                    break;\n                  }\n                }\n\n                if (\n                  chunksHaveAnyChildren &&\n                  (!compilation.options.output ||\n                    !compilation.options.output.chunkFilename ||\n                    compilation.options.output.chunkFilename.indexOf(Constants.LOCALE_FILENAME_TOKEN) === -1)\n                ) {\n                  compilation.errors.push(\n                    new Error(\n                      'The configuration.output.chunkFilename property must be provided and must include ' +\n                        `the ${Constants.LOCALE_FILENAME_TOKEN} placeholder`\n                    )\n                  );\n\n                  return;\n                }\n\n                for (const chunk of chunks) {\n                  // See if the chunk contains any localized modules or loads any localized chunks\n                  const localizedChunk: boolean = this._chunkHasLocalizedModules(chunk);\n\n                  // Change the chunk's name to include either the locale name or the locale name for chunks without strings\n                  const replacementValue: string = localizedChunk\n                    ? Constants.LOCALE_NAME_PLACEHOLDER\n                    : this._noStringsLocaleName;\n                  if (chunk.hasRuntime()) {\n                    chunk.filenameTemplate = (compilation.options.output!.filename as string).replace(\n                      Constants.LOCALE_FILENAME_TOKEN_REGEX,\n                      replacementValue\n                    );\n                  } else {\n                    chunk.filenameTemplate = compilation.options.output!.chunkFilename!.replace(\n                      Constants.LOCALE_FILENAME_TOKEN_REGEX,\n                      replacementValue\n                    );\n                  }\n                }\n              }\n            );\n          }\n        );\n\n        compiler.hooks.emit.tap(PLUGIN_NAME, (compilation: Webpack.compilation.Compilation) => {\n          const localizationStats: ILocalizationStats = {\n            entrypoints: {},\n            namedChunkGroups: {}\n          };\n\n          const alreadyProcessedAssets: Set<string> = new Set<string>();\n          const hotUpdateRegex: RegExp = /\\.hot-update\\.js$/;\n\n          for (const untypedChunk of compilation.chunks) {\n            const chunk: ILocalizedWebpackChunk = untypedChunk;\n            const chunkFilesSet: Set<string> = new Set(chunk.files);\n            function processChunkJsFile(callback: (chunkFilename: string) => void): void {\n              let alreadyProcessedAFileInThisChunk: boolean = false;\n              for (const chunkFilename of chunk.files) {\n                if (\n                  chunkFilename.endsWith('.js') && // Ensure this is a JS file\n                  !hotUpdateRegex.test(chunkFilename) && // Ensure this is not a webpack hot update\n                  !alreadyProcessedAssets.has(chunkFilename) // Ensure this isn't a vendor chunk we've already processed\n                ) {\n                  if (alreadyProcessedAFileInThisChunk) {\n                    throw new Error(\n                      `Found more than one JS file in chunk \"${chunk.name}\". This is not expected.`\n                    );\n                  }\n\n                  alreadyProcessedAFileInThisChunk = true;\n                  alreadyProcessedAssets.add(chunkFilename);\n                  callback(chunkFilename);\n                }\n              }\n            }\n\n            if (this._chunkHasLocalizedModules(chunk)) {\n              processChunkJsFile((chunkFilename) => {\n                if (chunkFilename.indexOf(Constants.LOCALE_NAME_PLACEHOLDER) === -1) {\n                  throw new Error(\n                    `Asset ${chunkFilename} is expected to be localized, but is missing a locale placeholder`\n                  );\n                }\n\n                const asset: IAsset = compilation.assets[chunkFilename];\n\n                const resultingAssets: Map<string, IProcessAssetResult> =\n                  AssetProcessor.processLocalizedAsset({\n                    plugin: this,\n                    compilation,\n                    assetName: chunkFilename,\n                    asset,\n                    chunk,\n                    chunkHasLocalizedModules: this._chunkHasLocalizedModules.bind(this),\n                    locales: this._locales,\n                    noStringsLocaleName: this._noStringsLocaleName,\n                    fillMissingTranslationStrings: this._fillMissingTranslationStrings,\n                    defaultLocale: this._defaultLocale\n                  });\n\n                // Delete the existing asset because it's been renamed\n                delete compilation.assets[chunkFilename];\n                chunkFilesSet.delete(chunkFilename);\n\n                const localizedChunkAssets: ILocaleElementMap = {};\n                for (const [locale, newAsset] of resultingAssets) {\n                  compilation.assets[newAsset.filename] = newAsset.asset;\n                  localizedChunkAssets[locale] = newAsset.filename;\n                  chunkFilesSet.add(newAsset.filename);\n                }\n\n                if (chunk.hasRuntime()) {\n                  // This is an entrypoint\n                  localizationStats.entrypoints[chunk.name] = {\n                    localizedAssets: localizedChunkAssets\n                  };\n                } else {\n                  // This is a secondary chunk\n                  if (chunk.name) {\n                    localizationStats.namedChunkGroups[chunk.name] = {\n                      localizedAssets: localizedChunkAssets\n                    };\n                  }\n                }\n\n                chunk.localizedFiles = localizedChunkAssets;\n              });\n            } else {\n              processChunkJsFile((chunkFilename) => {\n                const asset: IAsset = compilation.assets[chunkFilename];\n\n                const resultingAsset: IProcessAssetResult = AssetProcessor.processNonLocalizedAsset({\n                  plugin: this,\n                  compilation,\n                  assetName: chunkFilename,\n                  asset,\n                  chunk,\n                  noStringsLocaleName: this._noStringsLocaleName,\n                  chunkHasLocalizedModules: this._chunkHasLocalizedModules.bind(this)\n                });\n\n                // Delete the existing asset because it's been renamed\n                delete compilation.assets[chunkFilename];\n                chunkFilesSet.delete(chunkFilename);\n\n                compilation.assets[resultingAsset.filename] = resultingAsset.asset;\n                chunkFilesSet.add(resultingAsset.filename);\n              });\n            }\n\n            chunk.files = Array.from(chunkFilesSet);\n          }\n\n          if (this._options.localizationStats) {\n            if (this._options.localizationStats.dropPath) {\n              const resolvedLocalizationStatsDropPath: string = path.resolve(\n                compiler.outputPath,\n                this._options.localizationStats.dropPath\n              );\n              JsonFile.save(localizationStats, resolvedLocalizationStatsDropPath, {\n                ensureFolderExists: true\n              });\n            }\n\n            if (this._options.localizationStats.callback) {\n              try {\n                this._options.localizationStats.callback(localizationStats);\n              } catch (e) {\n                /* swallow errors from the callback */\n              }\n            }\n          }\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   *\n   * @returns\n   */\n  public addDefaultLocFile(\n    terminal: ITerminal,\n    localizedResourcePath: string,\n    localizedResourceData: ILocalizationFile\n  ): IAddDefaultLocFileResult {\n    const additionalLoadedFilePaths: string[] = [];\n    const errors: Error[] = [];\n\n    const locFileData: ILocaleFileData = this._convertLocalizationFileToLocData(localizedResourceData);\n    this._addLocFile(this._defaultLocale, localizedResourcePath, locFileData);\n\n    const normalizeLocalizedData: (localizedData: ILocaleFileData | string) => ILocaleFileData = (\n      localizedData\n    ) => {\n      if (typeof localizedData === 'string') {\n        additionalLoadedFilePaths.push(localizedData);\n        const localizationFile: ILocalizationFile = parseLocFile({\n          filePath: localizedData,\n          content: FileSystem.readFile(localizedData),\n          terminal: terminal,\n          resxNewlineNormalization: this._resxNewlineNormalization,\n          ignoreMissingResxComments: this._ignoreMissingResxComments\n        });\n\n        return this._convertLocalizationFileToLocData(localizationFile);\n      } else {\n        return localizedData;\n      }\n    };\n\n    const missingLocales: string[] = [];\n    for (const [translatedLocaleName, translatedStrings] of Object.entries(\n      this._resolvedTranslatedStringsFromOptions\n    )) {\n      const translatedLocFileFromOptions: ILocaleFileData | string | undefined =\n        translatedStrings[localizedResourcePath];\n      if (!translatedLocFileFromOptions) {\n        missingLocales.push(translatedLocaleName);\n      } else {\n        const translatedLocFileData: ILocaleFileData = normalizeLocalizedData(translatedLocFileFromOptions);\n        this._addLocFile(translatedLocaleName, localizedResourcePath, translatedLocFileData);\n      }\n    }\n\n    if (missingLocales.length > 0 && this._options.localizedData.resolveMissingTranslatedStrings) {\n      let resolvedTranslatedData: IResolvedMissingTranslations | undefined = undefined;\n      try {\n        resolvedTranslatedData = this._options.localizedData.resolveMissingTranslatedStrings(\n          missingLocales,\n          localizedResourcePath\n        );\n      } catch (e) {\n        errors.push(e as Error);\n      }\n\n      if (resolvedTranslatedData) {\n        for (const [resolvedLocaleName, resolvedLocaleData] of Object.entries(resolvedTranslatedData)) {\n          if (resolvedLocaleData) {\n            const translatedLocFileData: ILocaleFileData = normalizeLocalizedData(resolvedLocaleData);\n            this._addLocFile(resolvedLocaleName, localizedResourcePath, translatedLocFileData);\n          }\n        }\n      }\n    }\n\n    this._pseudolocalizers.forEach((pseudolocalizer: (str: string) => string, pseudolocaleName: string) => {\n      const pseudolocFileData: ILocaleFileData = {};\n\n      for (const [stringName, stringValue] of Object.entries(locFileData)) {\n        pseudolocFileData[stringName] = pseudolocalizer(stringValue);\n      }\n\n      this._addLocFile(pseudolocaleName, localizedResourcePath, pseudolocFileData);\n    });\n\n    return { additionalLoadedFilePaths, errors };\n  }\n\n  /**\n   * @internal\n   */\n  public getDataForSerialNumber(serialNumber: string): IStringSerialNumberData | undefined {\n    return this._stringPlaceholderMap.get(serialNumber);\n  }\n\n  private _addLocFile(\n    localeName: string,\n    localizedFilePath: string,\n    localizedFileData: ILocaleFileData\n  ): void {\n    const filesMap: Map<string, Map<string, string>> = this._resolvedLocalizedStrings.get(localeName)!;\n\n    const stringsMap: Map<string, string> = new Map<string, string>();\n    filesMap.set(localizedFilePath, stringsMap);\n\n    for (const [stringName, stringValue] of Object.entries(localizedFileData)) {\n      const stringKey: string = `${localizedFilePath}?${stringName}`;\n      if (!this.stringKeys.has(stringKey)) {\n        const placeholder: IStringPlaceholder = this._getPlaceholderString();\n        this.stringKeys.set(stringKey, placeholder);\n      }\n\n      const placeholder: IStringPlaceholder = this.stringKeys.get(stringKey)!;\n      if (!this._stringPlaceholderMap.has(placeholder.suffix)) {\n        this._stringPlaceholderMap.set(placeholder.suffix, {\n          values: {\n            [this._passthroughLocaleName]: stringName\n          },\n          locFilePath: localizedFilePath,\n          stringName: stringName\n        });\n      }\n\n      this._stringPlaceholderMap.get(placeholder.suffix)!.values[localeName] = stringValue;\n\n      stringsMap.set(stringName, stringValue);\n    }\n  }\n\n  private _initializeAndValidateOptions(\n    configuration: Webpack.Configuration,\n    isWebpackDevServer: boolean\n  ): { errors: Error[]; warnings: Error[] } {\n    const errors: Error[] = [];\n    const warnings: Error[] = [];\n\n    function ensureValidLocaleName(localeName: string): boolean {\n      const LOCALE_NAME_REGEX: RegExp = /[a-z-]/i;\n      if (!localeName.match(LOCALE_NAME_REGEX)) {\n        errors.push(\n          new Error(`Invalid locale name: ${localeName}. Locale names may only contain letters and hyphens.`)\n        );\n        return false;\n      } else {\n        return true;\n      }\n    }\n\n    // START configuration\n    if (\n      !configuration.output ||\n      !configuration.output.filename ||\n      typeof configuration.output.filename !== 'string' ||\n      configuration.output.filename.indexOf(Constants.LOCALE_FILENAME_TOKEN) === -1\n    ) {\n      errors.push(\n        new Error(\n          'The configuration.output.filename property must be provided, must be a string, and must include ' +\n            `the ${Constants.LOCALE_FILENAME_TOKEN} placeholder`\n        )\n      );\n    }\n    // END configuration\n\n    // START misc options\n    // eslint-disable-next-line no-lone-blocks\n    {\n      this._globsToIgnore = this._options.globsToIgnore;\n    }\n    // END misc options\n\n    // START options.localizedData\n    if (this._options.localizedData) {\n      this._ignoreMissingResxComments = this._options.localizedData.ignoreMissingResxComments;\n\n      // START options.localizedData.passthroughLocale\n      if (this._options.localizedData.passthroughLocale) {\n        const { usePassthroughLocale, passthroughLocaleName = 'passthrough' } =\n          this._options.localizedData.passthroughLocale;\n        if (usePassthroughLocale) {\n          this._passthroughLocaleName = passthroughLocaleName;\n          this._locales.add(passthroughLocaleName);\n        }\n      }\n      // END options.localizedData.passthroughLocale\n\n      // START options.localizedData.translatedStrings\n      const { translatedStrings } = this._options.localizedData;\n      this._resolvedTranslatedStringsFromOptions = {};\n      if (translatedStrings) {\n        for (const [localeName, locale] of Object.entries(translatedStrings)) {\n          if (this._locales.has(localeName)) {\n            errors.push(\n              Error(\n                `The locale \"${localeName}\" appears multiple times. ` +\n                  'There may be multiple instances with different casing.'\n              )\n            );\n            return { errors, warnings };\n          }\n\n          if (!ensureValidLocaleName(localeName)) {\n            return { errors, warnings };\n          }\n\n          this._locales.add(localeName);\n          this._resolvedLocalizedStrings.set(localeName, new Map<string, Map<string, string>>());\n          this._resolvedTranslatedStringsFromOptions[localeName] = {};\n\n          const locFilePathsInLocale: Set<string> = new Set<string>();\n\n          for (const [locFilePath, locFileDataFromOptions] of Object.entries(locale)) {\n            if (locale.hasOwnProperty(locFilePath)) {\n              const normalizedLocFilePath: string = path.resolve(configuration.context!, locFilePath);\n\n              if (locFilePathsInLocale.has(normalizedLocFilePath)) {\n                errors.push(\n                  new Error(\n                    `The localization file path \"${locFilePath}\" appears multiple times in locale ${localeName}. ` +\n                      'There may be multiple instances with different casing.'\n                  )\n                );\n                return { errors, warnings };\n              }\n\n              locFilePathsInLocale.add(normalizedLocFilePath);\n\n              const normalizedLocFileDataFromOptions: string | ILocaleFileData =\n                typeof locFileDataFromOptions === 'string'\n                  ? path.resolve(configuration.context!, locFileDataFromOptions)\n                  : locFileDataFromOptions;\n\n              this._resolvedTranslatedStringsFromOptions[localeName][normalizedLocFilePath] =\n                normalizedLocFileDataFromOptions;\n            }\n          }\n        }\n      }\n      // END options.localizedData.translatedStrings\n\n      // START options.localizedData.defaultLocale\n      if (this._options.localizedData.defaultLocale) {\n        const { localeName, fillMissingTranslationStrings } = this._options.localizedData.defaultLocale;\n        if (this._options.localizedData.defaultLocale.localeName) {\n          if (this._locales.has(localeName)) {\n            errors.push(new Error('The default locale is also specified in the translated strings.'));\n            return { errors, warnings };\n          } else if (!ensureValidLocaleName(localeName)) {\n            return { errors, warnings };\n          }\n\n          this._locales.add(localeName);\n          this._resolvedLocalizedStrings.set(localeName, new Map<string, Map<string, string>>());\n          this._defaultLocale = localeName;\n          this._fillMissingTranslationStrings = !!fillMissingTranslationStrings;\n        } else {\n          errors.push(new Error('Missing default locale name'));\n          return { errors, warnings };\n        }\n      } else {\n        errors.push(new Error('Missing default locale options.'));\n        return { errors, warnings };\n      }\n      // END options.localizedData.defaultLocale\n\n      // START options.localizedData.pseudoLocales\n      if (this._options.localizedData.pseudolocales) {\n        for (const [pseudolocaleName, pseudoLocaleOpts] of Object.entries(\n          this._options.localizedData.pseudolocales\n        )) {\n          if (this._defaultLocale === pseudolocaleName) {\n            errors.push(\n              new Error(`A pseudolocale (${pseudolocaleName}) name is also the default locale name.`)\n            );\n            return { errors, warnings };\n          }\n\n          if (this._locales.has(pseudolocaleName)) {\n            errors.push(\n              new Error(\n                `A pseudolocale (${pseudolocaleName}) name is also specified in the translated strings.`\n              )\n            );\n            return { errors, warnings };\n          }\n\n          this._pseudolocalizers.set(pseudolocaleName, getPseudolocalizer(pseudoLocaleOpts));\n          this._locales.add(pseudolocaleName);\n          this._resolvedLocalizedStrings.set(pseudolocaleName, new Map<string, Map<string, string>>());\n        }\n      }\n      // END options.localizedData.pseudoLocales\n\n      // START options.localizedData.normalizeResxNewlines\n      if (this._options.localizedData.normalizeResxNewlines) {\n        switch (this._options.localizedData.normalizeResxNewlines) {\n          case 'crlf': {\n            this._resxNewlineNormalization = NewlineKind.CrLf;\n            break;\n          }\n\n          case 'lf': {\n            this._resxNewlineNormalization = NewlineKind.Lf;\n            break;\n          }\n\n          default: {\n            errors.push(\n              new Error(\n                `Unexpected value \"${this._options.localizedData.normalizeResxNewlines}\" for option ` +\n                  '\"localizedData.normalizeResxNewlines\"'\n              )\n            );\n            break;\n          }\n        }\n      }\n      // END options.localizedData.normalizeResxNewlines\n    } else if (!isWebpackDevServer) {\n      throw new Error('Localized data must be provided unless webpack dev server is running.');\n    }\n    // END options.localizedData\n\n    // START options.noStringsLocaleName\n    if (\n      this._options.noStringsLocaleName === undefined ||\n      this._options.noStringsLocaleName === null ||\n      !ensureValidLocaleName(this._options.noStringsLocaleName)\n    ) {\n      this._noStringsLocaleName = 'none';\n    } else {\n      this._noStringsLocaleName = this._options.noStringsLocaleName;\n    }\n    // END options.noStringsLocaleName\n\n    return { errors, warnings };\n  }\n\n  private _getPlaceholderString(): IStringPlaceholder {\n    const suffix: string = (this._stringPlaceholderCounter++).toString();\n    return {\n      value: `${Constants.STRING_PLACEHOLDER_PREFIX}_\\\\_${Constants.STRING_PLACEHOLDER_LABEL}_${suffix}`,\n      suffix: suffix\n    };\n  }\n\n  private _chunkHasLocalizedModules(chunk: Webpack.compilation.Chunk): boolean {\n    let chunkHasAnyLocModules: boolean | undefined = EntityMarker.getMark(chunk);\n    if (chunkHasAnyLocModules === undefined) {\n      chunkHasAnyLocModules = false;\n      for (const module of chunk.getModules()) {\n        if (EntityMarker.getMark(module)) {\n          chunkHasAnyLocModules = true;\n          break;\n        }\n      }\n\n      // If this chunk doesn't directly contain any localized resources, it still\n      // needs to be localized if it's an entrypoint chunk (i.e. - it has a runtime)\n      // and it loads localized async chunks.\n      // In that case, the generated chunk URL generation code needs to contain\n      // the locale name.\n      if (!chunkHasAnyLocModules && chunk.hasRuntime()) {\n        for (const asyncChunk of chunk.getAllAsyncChunks()) {\n          if (this._chunkHasLocalizedModules(asyncChunk)) {\n            chunkHasAnyLocModules = true;\n            break;\n          }\n        }\n      }\n\n      EntityMarker.markEntity(chunk, chunkHasAnyLocModules);\n    }\n\n    return chunkHasAnyLocModules;\n  }\n\n  private _convertLocalizationFileToLocData(locFile: ILocalizationFile): ILocaleFileData {\n    const locFileData: ILocaleFileData = {};\n    for (const [stringName, locFileEntry] of Object.entries(locFile)) {\n      locFileData[stringName] = locFileEntry.value;\n    }\n\n    return locFileData;\n  }\n}\n"]}