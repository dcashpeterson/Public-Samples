"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateSolutionDefinition = void 0;
const ISolutionMetadata_1 = require("../models/packageDefinition/ISolutionMetadata");
/**
 * Checks that a solution definition is valid
 */
function validateSolutionDefinition(terminal, options, customFeatures, manifests) {
    let hasWarning = false;
    if (options.solution.skipFeatureDeployment) {
        // iterate each feature, counting the customAssets. If there is an Extension, log a warning
        const customAssetFiles = options.solution
            .features.map((feature) => {
            feature.components.forEach((component) => {
                // HACK: The description is a extensionType - title, but really extensionType should be a first
                // class property
                if (component.manifest.componentType === 'Extension' &&
                    component.description.substring(0, 15) === 'FieldCustomizer') {
                    terminal.writeWarningLine(`${component.manifest.alias}: Admins can make this solution available to all sites in the` +
                        ` organization, but field customizers won't automatically appear. SharePoint Framework field ` +
                        `customizers must be specifically associated to fields programmatically to be visible to site users.`);
                    hasWarning = true;
                }
            });
            return (feature.assets.elementFiles.length +
                feature.assets.elementManifests.length +
                feature.assets.upgradeActions.length);
        })
            .reduce((prev, cur) => {
            return cur + prev;
        });
        const hasFeatureXml = !!(customAssetFiles + customFeatures.files.length);
        // if there is feature XML or Custom Assets, we have encountered a serious error
        if (hasFeatureXml) {
            const hasExtensions = [...manifests.values()].some((value) => value.componentType === 'Extension' || value.componentType === 'Application');
            const featureXmlMessage = `Admins can make this solution available to all sites immediately, but the solution also contains` +
                ` feature.xml elements for provisioning. Feature.xml elements are not automatically applied unless the` +
                ` solution is explicitly installed on a site.`;
            if (hasExtensions) {
                terminal.writeLine(featureXmlMessage);
            }
            else {
                terminal.writeWarningLine(featureXmlMessage);
                hasWarning = true;
            }
        }
    }
    if (options.solution.metadata &&
        options.solution.metadata.categories &&
        options.solution.metadata.categories.length > ISolutionMetadata_1.MAX_SOLUTION_CATEGORIES_COUNT) {
        hasWarning = true;
        terminal.writeWarningLine(`You can add up to ${ISolutionMetadata_1.MAX_SOLUTION_CATEGORIES_COUNT} categories for the solution. All others will be ignored.`);
    }
    return !hasWarning;
}
exports.validateSolutionDefinition = validateSolutionDefinition;
//# sourceMappingURL=validateSolutionDefinition.js.map