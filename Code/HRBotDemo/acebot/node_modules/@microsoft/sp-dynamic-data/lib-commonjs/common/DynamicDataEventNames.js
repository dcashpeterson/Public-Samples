"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DynamicDataEventNames = void 0;
var DynamicDataEventConstants_1 = require("./DynamicDataEventConstants");
/**
 * Event names for DynamicData related events.
 *
 * @internal
 */
var DynamicDataEventNames = /** @class */ (function () {
    function DynamicDataEventNames() {
    }
    /**
     * Returns the event name used when all properties in a Dynamic Data source have changed.
     * Example: DynamicData_AllPropertiesChanged_WebPart.<componentId>.<instanceId>
     *
     * @param sourceId - Id of the Dynamic Data source.
     */
    DynamicDataEventNames.getAllPropertiesChangedEventName = function (sourceId) {
        return "".concat(DynamicDataEventConstants_1.ALL_PROPERTIES_EVENT_PREFIX).concat(DynamicDataEventConstants_1.EVENT_NAME_SEPARATOR).concat(sourceId);
    };
    /**
     * Returns the event name used when any property in a Dynamic Data source has changed.
     * Example: DynamicData_AnyPropertyChanged_WebPart.<componentId>.<instanceId>
     *
     * @param sourceId - Id of the Dynamic Data source.
     */
    DynamicDataEventNames.getAnyPropertyChangedEventName = function (sourceId) {
        return "".concat(DynamicDataEventConstants_1.ANY_PROPERTY_EVENT_PREFIX).concat(DynamicDataEventConstants_1.EVENT_NAME_SEPARATOR).concat(sourceId);
    };
    /**
     * Returns the event name used when a properties in a Dynamic Data source has changed.
     * Example: DynamicData_PropertyChanged_WebPart.<componentId>.<instanceId>_myProperty
     *
     * @param sourceId - Id of the Dynamic Data source.
     * @param propertyId - Id of the property that has changed.
     */
    DynamicDataEventNames.getPropertyChangedEventName = function (sourceId, propertyId) {
        return "".concat(this.getPropertyChangedEventPrefix(sourceId)).concat(DynamicDataEventConstants_1.EVENT_NAME_SEPARATOR).concat(propertyId);
    };
    /**
     * Returns the event name prefix used when a property in a Dynamic Data source has changed.
     * This should not be used as a final name for an event, but to be used inside _getPropertyChangedEventName.
     * Example: DynamicData_PropertyChanged_WebPart.<componentId>.<instanceId>
     *
     * @param sourceId - Id of the Dynamic Data source.
     */
    DynamicDataEventNames.getPropertyChangedEventPrefix = function (sourceId) {
        return "".concat(DynamicDataEventConstants_1.PROPERTY_EVENT_PREFIX).concat(DynamicDataEventConstants_1.EVENT_NAME_SEPARATOR).concat(sourceId);
    };
    /**
     * Returns the event name used to publish and consume the event for when a specific property
     * has changed its value on a source.
     *
     * @param sourceId - Id of the Dynamic Data source.
     * @param propertyId - Property Id on the source.
     * @param isAnnotated - Indicates whether the event name is for the annotated value.
     */
    DynamicDataEventNames.getPropertyValueEventName = function (sourceId, propertyId, isAnnotated) {
        var scenario = isAnnotated ? DynamicDataEventConstants_1.GET_ANNOTATED_PROPERTY_VALUE : DynamicDataEventConstants_1.GET_PROPERTY_VALUE;
        return "".concat(scenario).concat(DynamicDataEventConstants_1.EVENT_NAME_SEPARATOR).concat(sourceId).concat(DynamicDataEventConstants_1.EVENT_NAME_SEPARATOR).concat(propertyId);
    };
    /**
     * Returns the event name used to publish and consume the event to request and receive the
     * property definitions from a specific Dynamic Data soource, from the parent window.
     *
     * @param sourceId - Id of the Dynamic Data source.
     */
    DynamicDataEventNames.getPropertyDefintionsEventName = function (sourceId) {
        return "".concat(DynamicDataEventConstants_1.GET_PROPERTY_DEFINITIONS).concat(DynamicDataEventConstants_1.EVENT_NAME_SEPARATOR).concat(sourceId);
    };
    /**
     * Returns the event name used to publish and consume the event to request and receive the
     * allowed events on a specific Dynamic Data soource, from the parent window.
     *
     * @param sourceId - Id of the Dynamic Data source.
     */
    DynamicDataEventNames.getAllowedEventsEventName = function (sourceId) {
        return "".concat(DynamicDataEventConstants_1.GET_ALLOWED_EVENTS).concat(DynamicDataEventConstants_1.EVENT_NAME_SEPARATOR).concat(sourceId);
    };
    /**
     * Returns the event name used for to raise any event on the native source on the isolated app.
     */
    DynamicDataEventNames.getNativeSourceApiEventName = function () {
        return "".concat(DynamicDataEventConstants_1.NATIVE_SOURCE_API_EVENT);
    };
    DynamicDataEventNames.getDynamicDataManagerExceptionEventName = function (sourceId) {
        return "".concat(DynamicDataEventConstants_1.DYNAMICDATAMANAGER_EXCEPTION).concat(DynamicDataEventConstants_1.EVENT_NAME_SEPARATOR).concat(sourceId);
    };
    return DynamicDataEventNames;
}());
exports.DynamicDataEventNames = DynamicDataEventNames;
//# sourceMappingURL=DynamicDataEventNames.js.map