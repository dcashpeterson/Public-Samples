import type { RushCommandLineParser } from '../RushCommandLineParser';
import { BaseRushAction } from './BaseRushAction';
export declare class PublishAction extends BaseRushAction {
    private readonly _addCommitDetails;
    private readonly _apply;
    private readonly _includeAll;
    private readonly _npmAuthToken;
    private readonly _npmTag;
    private readonly _npmAccessLevel;
    private readonly _publish;
    private readonly _regenerateChangelogs;
    private readonly _registryUrl;
    private readonly _targetBranch;
    private readonly _prereleaseName;
    private readonly _partialPrerelease;
    private readonly _suffix;
    private readonly _force;
    private readonly _versionPolicy;
    private readonly _applyGitTagsOnPack;
    private readonly _commitId;
    private readonly _releaseFolder;
    private readonly _pack;
    private readonly _ignoreGitHooksParameter;
    private _prereleaseToken;
    private _hotfixTagOverride;
    private _targetNpmrcPublishFolder;
    private _targetNpmrcPublishPath;
    constructor(parser: RushCommandLineParser);
    /**
     * Executes the publish action, which will read change request files, apply changes to package.jsons,
     */
    protected runAsync(): Promise<void>;
    /**
     * Validate some input parameters
     */
    private _validate;
    private _publishChangesAsync;
    private _publishAll;
    private _gitAddTags;
    private _npmPublish;
    private _packageExists;
    private _npmPack;
    private _calculateTarballName;
    private _setDependenciesBeforePublish;
    private _setDependenciesBeforeCommit;
    private _addNpmPublishHome;
    private _addSharedNpmConfig;
}
//# sourceMappingURL=PublishAction.d.ts.map