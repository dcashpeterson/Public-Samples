import type { CommonVersionsConfiguration } from '../api/CommonVersionsConfiguration';
import type { RushConfiguration } from '../api/RushConfiguration';
export interface IDependencyAnalysis {
    /**
     * The common versions configuration from the repo's rush configuration.
     */
    commonVersionsConfiguration: CommonVersionsConfiguration;
    /**
     * A map of all direct dependencies that only have a single semantic version specifier,
     * unless the variant has the {@link CommonVersionsConfiguration.implicitlyPreferredVersions} option
     * set to `false`.
     */
    implicitlyPreferredVersionByPackageName: Map<string, string>;
    /**
     * A map of dependency name to the set of version specifiers used in the repo.
     */
    allVersionsByPackageName: Map<string, Set<string>>;
}
export declare class DependencyAnalyzer {
    private static _dependencyAnalyzerByRushConfiguration;
    private _rushConfiguration;
    private _analysisByVariant;
    private constructor();
    static forRushConfiguration(rushConfiguration: RushConfiguration): DependencyAnalyzer;
    getAnalysis(variant?: string): IDependencyAnalysis;
    /**
     * Generates the {@link IDependencyAnalysis} for a variant.
     *
     * @remarks
     * The result of this function is not cached.
     */
    private _getAnalysisInternal;
}
//# sourceMappingURL=DependencyAnalyzer.d.ts.map