"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var sp_diagnostics_1 = require("@microsoft/sp-diagnostics");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var sp_page_context_1 = require("@microsoft/sp-page-context");
var DigestCache_1 = tslib_1.__importDefault(require("./DigestCache"));
var FetchProvider_1 = require("../httpClient/FetchProvider");
var SPHttpClientConfiguration_1 = require("./SPHttpClientConfiguration");
var SPHttpClientBatch_1 = tslib_1.__importDefault(require("./SPHttpClientBatch"));
var SPHttpClientHelper_1 = tslib_1.__importDefault(require("./SPHttpClientHelper"));
var CacheManager_1 = require("../caching/CacheManager");
var ICacheDataProvider_1 = require("../caching/ICacheDataProvider");
var CacheDataProviderService_1 = require("../caching/CacheDataProviderService");
var PrefetchDataProviderService_1 = require("../prefetch/PrefetchDataProviderService");
/**
 * SPHttpClient is used to perform REST calls against SharePoint.  It adds default
 * headers, manages the digest needed for writes, and collects telemetry that
 * helps the service to monitor the performance of an application.
 *
 * @remarks
 * For communicating with other internet services, use the {@link HttpClient} class.
 *
 * @public
 * @sealed
 */
var SPHttpClient = /** @class */ (function () {
    function SPHttpClient(serviceScope) {
        var _this = this;
        this._serviceScope = serviceScope;
        this._serviceScope.whenFinished(function () {
            _this._digestCache = _this._serviceScope.consume(DigestCache_1.default.serviceKey);
            _this._parentSource = _this._serviceScope.consume(sp_diagnostics_1._logSourceServiceKey);
            _this._fetchProvider = _this._serviceScope.consume(FetchProvider_1.fetchProviderServiceKey);
        });
        this._isNavigate = false;
    }
    /**
     * Use a heuristic to infer the base URL for authentication.
     *
     * @remarks
     * Attempts to infer the SPWeb URL associated with the provided REST URL, by looking
     * for common SharePoint path components such as "_api", "_layouts", or "_vit_bin".
     * This is necessary for operations such as the X-RequestDigest
     * and ODATA batching, which require POSTing to a separate REST endpoint
     * in order to complete a request.
     *
     * For example, if the requestUrl is "/sites/site/web/_api/service",
     * the returned URL would be "/sites/site/web".  Or if the requestUrl
     * is "http://example.com/_layouts/service", the returned URL would be
     * "http://example.com".
     *
     * If the URL cannot be determined, an exception is thrown.
     *
     * @param requestUrl - The URL for a SharePoint REST service
     * @returns the inferred SPWeb URL
     */
    SPHttpClient.getWebUrlFromRequestUrl = function (requestUrl) {
        return SPHttpClientHelper_1.default.getWebUrlFromRequestUrl(requestUrl);
    };
    Object.defineProperty(SPHttpClient.prototype, "isNavigate", {
        get: function () {
            return this._isNavigate;
        },
        set: function (isNavigate) {
            this._isNavigate = isNavigate;
        },
        enumerable: false,
        configurable: true
    });
    SPHttpClient.prototype.fetch = function (url, configuration, options, cacheConfiguration) {
        var _this = this;
        var _a;
        // Default fetch behavior - No caching
        // If no caching options are provided, or If Cache Provider is not present continue to API call
        if (!cacheConfiguration || !this._cacheDataProvider) {
            return this._fetch(url, configuration, options);
        }
        // Get the cache Key
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var cacheKey = this._cacheDataProvider.getCacheKey(ICacheDataProvider_1.CacheKeyType.HttpGenerated, url, configuration, options, cacheConfiguration);
        // Fetch data and Cache according to the cacheConfiguration
        return CacheManager_1.CacheManager.fetchAndCache(cacheKey, this._cacheDataProvider, cacheConfiguration, function () { return _this._fetch(url, configuration, options); }, ((_a = cacheConfiguration === null || cacheConfiguration === void 0 ? void 0 : cacheConfiguration.extraProps) === null || _a === void 0 ? void 0 : _a.get('enableDataPrefetch')) ? this._prefetchDataProvider : undefined);
    };
    SPHttpClient.prototype.get = function (url, configuration, options, cacheConfiguration) {
        if (cacheConfiguration) {
            return this.fetch(url, configuration, SPHttpClientHelper_1.default.overrideHttpMethod(options, 'GET'), cacheConfiguration);
        }
        else {
            return this.fetch(url, configuration, SPHttpClientHelper_1.default.overrideHttpMethod(options, 'GET'));
        }
    };
    /**
     * Calls fetch(), but sets the method to "POST".
     *
     * @param url - the URL to fetch
     * @param configuration - determines the default behavior of SPHttpClient; normally this should
     *   be the latest version number from SPHttpClientConfigurations
     * @param options - additional options that affect the request
     * @returns A promise with behavior similar to WHATWG fetch().  This promise will resolve normally
     * (with {@link HttpClientResponse.ok} being false) for error status codes such as HTTP 404
     * or 500.  The promise will only reject for network failures or other errors that prevent communication
     * with the server.
     */
    SPHttpClient.prototype.post = function (url, configuration, options) {
        return this._fetch(url, configuration, SPHttpClientHelper_1.default.overrideHttpMethod(options, 'POST'));
    };
    /**
     * Begins an ODATA batch, which allows multiple REST queries to be bundled into
     * a single web request.
     *
     * @returns An {@link SPHttpClientBatch} object used to manage the batch operation.
     *
     * @beta
     */
    SPHttpClient.prototype.beginBatch = function (batchCreationOptions) {
        return new SPHttpClientBatch_1.default(this._serviceScope, batchCreationOptions);
    };
    SPHttpClient.prototype._fetch = function (url, configuration, options) {
        var _a;
        var pageContext = this._serviceScope.consume(sp_page_context_1.PageContext.serviceKey);
        var originalCorrelationId;
        if (this._isNavigate) {
            originalCorrelationId = '';
        }
        else {
            originalCorrelationId = (_a = pageContext === null || pageContext === void 0 ? void 0 : pageContext.legacyPageContext) === null || _a === void 0 ? void 0 : _a.CorrelationId;
        }
        return SPHttpClientHelper_1.default.fetchCore(url, configuration, options, this._serviceScope, this._digestCache, this._fetchProvider, this._logSourceId, originalCorrelationId);
    };
    Object.defineProperty(SPHttpClient.prototype, "_cacheDataProvider", {
        /**
         * Gets the cache data provider
         */
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        get: function () {
            if (!this._cacheProvider) {
                this._cacheProvider = this._serviceScope.consume((0, CacheDataProviderService_1.getCacheDataProviderServiceKey)())._provider;
            }
            return this._cacheProvider;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SPHttpClient.prototype, "_logSourceId", {
        get: function () {
            if (this._parentSource.isEmpty()) {
                return SPHttpClient._logSource.id;
            }
            return this._parentSource.id;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SPHttpClient.prototype, "_prefetchDataProvider", {
        /**
         * Gets the prefetch data provider
         */
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        get: function () {
            if (!this._prefetchProvider) {
                this._prefetchProvider = this._serviceScope.consume((0, PrefetchDataProviderService_1.getPrefetchDataProviderServiceKey)())._provider;
            }
            return this._prefetchProvider;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * The standard predefined SPHttpClientConfiguration objects for use with
     * the SPHttpClient class.
     */
    SPHttpClient.configurations = SPHttpClientConfiguration_1.predefinedConfigurations;
    /**
     * The service key for SPHttpClient.
     */
    SPHttpClient.serviceKey = sp_core_library_1.ServiceKey.create('sp-http:SPHttpClient', SPHttpClient);
    SPHttpClient._logSource = sp_diagnostics_1._LogSource.create('spHttpClient');
    return SPHttpClient;
}());
exports.default = SPHttpClient;
//# sourceMappingURL=SPHttpClient.js.map