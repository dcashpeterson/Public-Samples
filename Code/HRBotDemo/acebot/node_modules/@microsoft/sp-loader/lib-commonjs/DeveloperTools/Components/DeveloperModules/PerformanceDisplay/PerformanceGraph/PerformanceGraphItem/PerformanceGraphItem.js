"use strict";
/**
 *
 * Sub-component for PerformanceGraph. One of these exists for each bar in the graph.
 * Each bar has a start value and a width corresponding to some performance data.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = tslib_1.__importStar(require("react"));
var sp_core_library_1 = require("@microsoft/sp-core-library");
var PerformanceGraphItem_module_scss_1 = tslib_1.__importDefault(require("./PerformanceGraphItem.module.scss"));
var PerformanceLegend_module_scss_1 = tslib_1.__importDefault(require("../../PerformanceHeader/PerformanceLegend/PerformanceLegend.module.scss"));
var PerformanceDisplay_resx_1 = tslib_1.__importDefault(require("../../PerformanceDisplay.resx"));
var PerformanceGraphItem = /** @class */ (function (_super) {
    tslib_1.__extends(PerformanceGraphItem, _super);
    function PerformanceGraphItem(props) {
        var _this = _super.call(this, props) || this;
        _this._drawGraphBar = _this._drawGraphBar.bind(_this);
        return _this;
    }
    PerformanceGraphItem.prototype.render = function () {
        var nameStyle = [
            PerformanceGraphItem_module_scss_1.default.tableRowPerfList,
            PerformanceGraphItem_module_scss_1.default.tableRowBottomLight,
            PerformanceGraphItem_module_scss_1.default.tableRowRightLight
        ].join(' ');
        var durationStyle = [PerformanceGraphItem_module_scss_1.default.tableRowPerfList, PerformanceGraphItem_module_scss_1.default.tableRowBottomLight].join(' ');
        var graphBar = [];
        var perfItem = this.props.perfItem;
        if (perfItem.breakdown) {
            /**
             * Graph bars are pushed into array and rendered in this specific order, which shouldn't be changed.
             * Don't care about showing the entire 'render' time, only what is left beyond init, modules loaded, etc.
             * That one gets rendered first so part of it can be covered up. This makes start time calculation much easier.
             */
            graphBar.push(this._drawGraphBar(perfItem.breakdown.render.startVal, perfItem.breakdown.render.duration, PerformanceLegend_module_scss_1.default.msBlueMid, "".concat(PerformanceDisplay_resx_1.default.RenderTimeLegendLabel, " ").concat(perfItem.breakdown.render.duration, " ms")));
            if (perfItem.breakdown.modulesLoaded) {
                graphBar.push(this._drawGraphBar(perfItem.breakdown.modulesLoaded.startVal, perfItem.breakdown.modulesLoaded.duration, PerformanceLegend_module_scss_1.default.msBlue, "".concat(PerformanceDisplay_resx_1.default.ModuleLoadingTimeLabel, " ").concat(perfItem.breakdown.modulesLoaded.duration, " ms")));
            }
            if (perfItem.breakdown.lazyLoading) {
                graphBar.push(this._drawGraphBar(perfItem.breakdown.lazyLoading.startVal, perfItem.breakdown.lazyLoading.duration, PerformanceLegend_module_scss_1.default.msLightGreen, "".concat(PerformanceDisplay_resx_1.default.ModuleLazyLoadingDelayLabel, " ").concat(perfItem.breakdown.lazyLoading.duration, " ms")));
            }
            if (perfItem.breakdown.init) {
                graphBar.push(this._drawGraphBar(perfItem.breakdown.init.startVal, perfItem.breakdown.init.duration, PerformanceLegend_module_scss_1.default.msPurpleLight, "".concat(PerformanceDisplay_resx_1.default.InitializationTimeLabel, " ").concat(perfItem.breakdown.init.duration, " ms")));
            }
            if (perfItem.breakdown.dataFetch) {
                for (var _i = 0, _a = perfItem.breakdown.dataFetch; _i < _a.length; _i++) {
                    var apiCall = _a[_i];
                    graphBar.push(this._drawGraphBar(apiCall.startVal, apiCall.duration, PerformanceLegend_module_scss_1.default.msTealLight, "".concat(PerformanceDisplay_resx_1.default.DataFetchTimeLabel, " ").concat(apiCall.duration, " ms")));
                }
            }
        }
        else {
            graphBar.push(this._drawGraphBar(perfItem.startVal, perfItem.duration, PerformanceLegend_module_scss_1.default.msThemeTertiary, "".concat(perfItem.name, " ").concat(perfItem.duration, " ms")));
        }
        return (React.createElement("tr", null,
            React.createElement("td", { className: nameStyle }, this.props.perfItem.name),
            React.createElement("td", { className: durationStyle }, sp_core_library_1.Text.format(PerformanceDisplay_resx_1.default.MillisecondsUnitLabel, this.props.perfItem.duration)),
            React.createElement("td", { className: PerformanceGraphItem_module_scss_1.default.tdDelimiter }, graphBar),
            React.createElement("td", { className: PerformanceGraphItem_module_scss_1.default.tdDelimiter }),
            React.createElement("td", { className: PerformanceGraphItem_module_scss_1.default.tdDelimiter }),
            React.createElement("td", { className: PerformanceGraphItem_module_scss_1.default.tdDelimiter }),
            React.createElement("td", { className: PerformanceGraphItem_module_scss_1.default.tdDelimiter }),
            React.createElement("td", { className: PerformanceGraphItem_module_scss_1.default.tdDelimiter }),
            React.createElement("td", { className: PerformanceGraphItem_module_scss_1.default.tdDelimiter }),
            React.createElement("td", { className: PerformanceGraphItem_module_scss_1.default.tdDelimiter }),
            React.createElement("td", { className: PerformanceGraphItem_module_scss_1.default.tdDelimiter }),
            React.createElement("td", { className: PerformanceGraphItem_module_scss_1.default.tdDelimiter })));
    };
    /**
     * Creates a div to show the bar on the graph.
     * startVal: start time integer representing where the bar starts
     * duration: time duration integer representing width of the bar
     * barColor: class name specifying the color of the bar
     */
    PerformanceGraphItem.prototype._drawGraphBar = function (startVal, duration, barColor, tooltip) {
        /**
         * Calculate the left value and width by percentage so that they will always fit on the screen
         * and be scaled properly
         */
        var leftVal = (startVal - this.props.startTime) / this.props.overallDuration;
        var widthVal = duration / this.props.overallDuration;
        /**
         * nameTableWidth: The pixel width of the name & duration section of the table.
         * This needs to be factored into the calculation because the bars are absolutely positioned to cross table lines
         * so the position needs to be offset from the edge of the name/duration section of the table.
         */
        var nameTableWidth = '320px';
        var barStyling = {
            left: "calc(".concat(leftVal, " * (100% - ").concat(nameTableWidth, ") + ").concat(nameTableWidth, ")"),
            width: "calc(".concat(widthVal, " * (100% - ").concat(nameTableWidth, "))")
        };
        var barClass = [PerformanceGraphItem_module_scss_1.default.bar, barColor].join(' ');
        return React.createElement("div", { key: "".concat(leftVal).concat(widthVal), className: barClass, style: barStyling, title: tooltip });
    };
    return PerformanceGraphItem;
}(React.Component));
exports.default = PerformanceGraphItem;
//# sourceMappingURL=PerformanceGraphItem.js.map