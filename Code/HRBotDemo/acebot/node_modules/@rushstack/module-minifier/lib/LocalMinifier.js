"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalMinifier = void 0;
const crypto_1 = require("crypto");
const serialize_javascript_1 = __importDefault(require("serialize-javascript"));
const MinifySingleFile_1 = require("./MinifySingleFile");
/**
 * Minifier implementation that minifies code on the main thread.
 * @public
 */
class LocalMinifier {
    constructor(options) {
        const { terserOptions = {} } = options || {};
        this._terserOptions = {
            ...terserOptions,
            output: terserOptions.output
                ? {
                    ...terserOptions.output
                }
                : {}
        };
        const { version: terserVersion } = require('terser/package.json');
        this._configHash = (0, crypto_1.createHash)('sha256')
            .update(LocalMinifier.name, 'utf8')
            .update(`terser@${terserVersion}`)
            .update((0, serialize_javascript_1.default)(terserOptions))
            .digest('base64');
        this._resultCache = new Map();
    }
    /**
     * Transform that invokes Terser on the main thread
     * @param request - The request to process
     * @param callback - The callback to invoke
     */
    minify(request, callback) {
        const { hash } = request;
        const cached = this._resultCache.get(hash);
        if (cached) {
            return callback(cached);
        }
        (0, MinifySingleFile_1.minifySingleFileAsync)(request, this._terserOptions)
            .then((result) => {
            this._resultCache.set(hash, result);
            callback(result);
        })
            .catch((error) => {
            // This branch is here to satisfy the no-floating-promises lint rule
            callback({
                error: error,
                code: undefined,
                map: undefined,
                hash
            });
        });
    }
    async connect() {
        return {
            configHash: this._configHash,
            disconnect: async () => {
                // Do nothing.
            }
        };
    }
}
exports.LocalMinifier = LocalMinifier;
//# sourceMappingURL=LocalMinifier.js.map