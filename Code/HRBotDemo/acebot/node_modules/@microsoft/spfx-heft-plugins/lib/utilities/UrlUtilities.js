"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UrlUtilities = void 0;
const url = __importStar(require("url"));
/**
 * Utility functions for working with urls
 * @public
 */
class UrlUtilities {
    static joinUrlSegments(...segments) {
        if (!segments || segments.length === 0) {
            return '';
        }
        segments = segments.filter((value) => !!value);
        let result = segments[0];
        for (let i = 1; i < segments.length; i++) {
            result = url.resolve(`${UrlUtilities.trimTrailingSlashes(result)}/`, UrlUtilities.trimLeadingSlashes(segments[i]));
        }
        return UrlUtilities.trimTrailingSlashes(result);
    }
    static ensureTrailingSlash(str) {
        if (!str) {
            return str;
        }
        return str.replace(/\/*$/, '/');
    }
    static isUrl(path) {
        /* Matches the following:
         * http://contoso.org/foo.js
         * https://contoso
         * http:/\foo.bar
         * https:\/foo.bar
         * http:\\foo.bar
         * https:\\foo.bar
         * HTTp:\\foo.bar
         */
        const urlRegex = /([hH][tT]{2}[pP]s?):[/\\]{2}/;
        return !!path.match(urlRegex);
    }
    static trimTrailingSlashes(str) {
        if (!str) {
            return '';
        }
        return str.replace(/\/+$/, '');
    }
    static trimLeadingSlashes(str) {
        if (!str) {
            return '';
        }
        return str.replace(/^\/+/, '');
    }
}
exports.UrlUtilities = UrlUtilities;
//# sourceMappingURL=UrlUtilities.js.map