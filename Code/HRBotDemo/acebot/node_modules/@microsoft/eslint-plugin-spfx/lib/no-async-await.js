"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
exports.noAsyncAwaitRule = void 0;
const noAsyncAwaitRule = {
    defaultOptions: [],
    meta: {
        type: 'problem',
        messages: {
            'error-async-await': 'Usage of "async" has overhead when using in older browsers.'
        },
        schema: [],
        docs: {
            description: 'Prevent usage of JavaScript\'s "async" and "await" keywords',
            category: 'Best Practices',
            recommended: false,
            url: 'https://www.npmjs.com/package/@rushstack/eslint-plugin'
        }
    },
    create: (context) => {
        // Check for any functions with the `async` modifier. If a function does not have the `async`
        // modifier then we defer to TSC to fail on `await` keywords since `await` has to be used
        // within an `async` context. `MethodDefinition` is already handled by the `FunctionExpression`
        // case, so we can ignore it here.
        const checkAndReportAsyncFunction = (node) => {
            if (node.async) {
                context.report({ node, messageId: 'error-async-await' });
            }
        };
        return {
            ArrowFunctionExpression: checkAndReportAsyncFunction,
            FunctionDeclaration: checkAndReportAsyncFunction,
            FunctionExpression: checkAndReportAsyncFunction
        };
    }
};
exports.noAsyncAwaitRule = noAsyncAwaitRule;
//# sourceMappingURL=no-async-await.js.map