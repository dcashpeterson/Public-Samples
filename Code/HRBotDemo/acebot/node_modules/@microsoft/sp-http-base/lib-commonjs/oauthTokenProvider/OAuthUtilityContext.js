"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var sp_diagnostics_1 = require("@microsoft/sp-diagnostics");
var SPHttpClient_1 = tslib_1.__importDefault(require("../spHttpClient/SPHttpClient"));
var TokenUtilityLogger = /** @class */ (function () {
    function TokenUtilityLogger() {
    }
    TokenUtilityLogger.prototype.logInfo = function (message) {
        sp_diagnostics_1._TraceLogger.logVerbose(TokenUtilityLogger._logSource, message);
    };
    TokenUtilityLogger.prototype.logError = function (message) {
        sp_diagnostics_1._TraceLogger.logError(TokenUtilityLogger._logSource, new Error(message));
    };
    TokenUtilityLogger.prototype.logWarning = function (message) {
        sp_diagnostics_1._TraceLogger.logVerbose(TokenUtilityLogger._logSource, 'Warning: ' + message);
    };
    TokenUtilityLogger._logSource = sp_diagnostics_1._LogSource.create('TokenUtility');
    return TokenUtilityLogger;
}());
/**
 * The DelegationTokenProvider's implementation was moved into the sp-client-shared
 * package so that it can be shared with other teams that are not using sp-client-base
 * platform. To support this, the sp-client-shared package defines an interface
 * ITokenUtilityContext which abstracts the basic services that are needed by that
 * code. TokenUtilityContext is our adapter that wires up this interface to the
 * corresponding services in sp-client-base; it can be considered part of the
 * internal implementation of DelegationTokenProvider; it is not intended to be
 * used by other parts of our framework.
 */
var OAuthUtilityContext = /** @class */ (function () {
    function OAuthUtilityContext(serviceScope) {
        var _this = this;
        serviceScope.whenFinished(function () {
            _this._spHttpClient = serviceScope.consume(SPHttpClient_1.default.serviceKey);
            _this._logger = new TokenUtilityLogger();
        });
    }
    Object.defineProperty(OAuthUtilityContext.prototype, "logger", {
        get: function () {
            return this._logger;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OAuthUtilityContext.prototype, "webUrl", {
        get: function () {
            // @TODO: VSO 270783 -- Convert this into an input parameter.
            return '';
        },
        enumerable: false,
        configurable: true
    });
    OAuthUtilityContext.prototype.fetchWithDigest = function (request) {
        var _this = this;
        return request.blob().then(function (requestBody) {
            return _this._spHttpClient.fetch(request.url, SPHttpClient_1.default.configurations.v1, {
                method: request.method,
                headers: request.headers,
                body: requestBody
            });
        });
    };
    OAuthUtilityContext.prototype.qosMonitor = function () {
        return new sp_diagnostics_1._QosMonitor(OAuthUtilityContext._qosName);
    };
    OAuthUtilityContext._qosName = 'OAuthTokenProvider';
    return OAuthUtilityContext;
}());
exports.default = OAuthUtilityContext;
//# sourceMappingURL=OAuthUtilityContext.js.map