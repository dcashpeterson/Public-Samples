{"version":3,"file":"no-null.js","sourceRoot":"","sources":["../src/no-null.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAO3D,MAAM,UAAU,GAA6C;IAC3D,IAAI,EAAE;QACJ,IAAI,EAAE,SAAS;QACf,QAAQ,EAAE;YACR,qBAAqB,EACnB,8FAA8F;SACjG;QACD,MAAM,EAAE,EAAE;QACV,IAAI,EAAE;YACJ,WAAW,EAAE,+CAA+C;YAC5D,4DAA4D;YAC5D,QAAQ,EAAE,kBAAkB;YAC5B,WAAW,EAAE,OAAO;YACpB,GAAG,EAAE,wDAAwD;SACjC;KAC/B;IACD,MAAM,EAAE,CAAC,OAAkD,EAAE,EAAE;QAC7D,OAAO;YACL,OAAO,EAAE,UAAU,IAAsB;gBACvC,0BAA0B;gBAC1B,IAAI,IAAI,CAAC,KAAK,KAAK,IAAI,EAAE;oBACvB,oEAAoE;oBACpE,IAAI,YAAY,GAAY,KAAK,CAAC;oBAClC,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,KAAK,kBAAkB,EAAE;wBAC1D,MAAM,QAAQ,GAAW,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC;wBAC9C,YAAY,GAAG,QAAQ,KAAK,KAAK,IAAI,QAAQ,KAAK,KAAK,IAAI,QAAQ,KAAK,IAAI,IAAI,QAAQ,KAAK,IAAI,CAAC;qBACnG;oBAED,IAAI,CAAC,YAAY,EAAE;wBACjB,OAAO,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,qBAAqB,EAAE,CAAC,CAAC;qBAC5D;iBACF;YACH,CAAC;SACF,CAAC;IACJ,CAAC;CACF,CAAC;AAEO,gCAAU","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { TSESTree, TSESLint } from '@typescript-eslint/experimental-utils';\r\n\r\ntype MessageIds = 'error-usage-of-null';\r\ntype Options = [];\r\n\r\nconst noNullRule: TSESLint.RuleModule<MessageIds, Options> = {\r\n  meta: {\r\n    type: 'problem',\r\n    messages: {\r\n      'error-usage-of-null':\r\n        'Usage of \"null\" is deprecated except when received from legacy APIs; use \"undefined\" instead'\r\n    },\r\n    schema: [],\r\n    docs: {\r\n      description: 'Prevent usage of JavaScript\\'s \"null\" keyword',\r\n      // Deprecated in ESLint v8; Keep for backwards compatibility\r\n      category: 'Stylistic Issues',\r\n      recommended: 'error',\r\n      url: 'https://www.npmjs.com/package/@rushstack/eslint-plugin'\r\n    } as TSESLint.RuleMetaDataDocs\r\n  },\r\n  create: (context: TSESLint.RuleContext<MessageIds, Options>) => {\r\n    return {\r\n      Literal: function (node: TSESTree.Literal) {\r\n        // Is it a \"null\" literal?\r\n        if (node.value === null) {\r\n          // Does the \"null\" appear in a comparison such as \"if (x === null)\"?\r\n          let isComparison: boolean = false;\r\n          if (node.parent && node.parent.type === 'BinaryExpression') {\r\n            const operator: string = node.parent.operator;\r\n            isComparison = operator === '!==' || operator === '===' || operator === '!=' || operator === '==';\r\n          }\r\n\r\n          if (!isComparison) {\r\n            context.report({ node, messageId: 'error-usage-of-null' });\r\n          }\r\n        }\r\n      }\r\n    };\r\n  }\r\n};\r\n\r\nexport { noNullRule };\r\n"]}