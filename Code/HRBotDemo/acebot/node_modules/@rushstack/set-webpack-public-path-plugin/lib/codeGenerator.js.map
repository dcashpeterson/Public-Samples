{"version":3,"file":"codeGenerator.js","sourceRoot":"","sources":["../src/codeGenerator.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport type { ISetWebpackPublicPathOptions } from './SetPublicPathPlugin';\n\n/**\n * @public\n */\nexport const registryVariableName: string = 'window.__setWebpackPublicPathLoaderSrcRegistry__';\n\nexport interface IInternalOptions extends ISetWebpackPublicPathOptions {\n  webpackPublicPathVariable?: string;\n  regexName?: string;\n  linePrefix?: string;\n}\n\nconst varName: string = 'publicPath';\n\nfunction joinLines(lines: string[], linePrefix?: string): string {\n  return lines\n    .map((line: string) => {\n      if (line) {\n        return `${linePrefix || ''}${line}`;\n      } else {\n        return line;\n      }\n    })\n    .join('\\n')\n    .replace(/\\n\\n+/g, '\\n\\n');\n}\n\nfunction escapeSingleQuotes(str: string): string | undefined {\n  if (str) {\n    return str.replace(\"'\", \"\\\\'\");\n  } else {\n    return undefined;\n  }\n}\n\nfunction appendSlashAndEscapeSingleQuotes(str: string): string | undefined {\n  if (str && str.substr(-1) !== '/') {\n    str = str + '/';\n  }\n\n  return escapeSingleQuotes(str);\n}\n\nexport function getSetPublicPathCode(\n  options: IInternalOptions,\n  emitWarning: (warning: string) => void\n): string {\n  if (!options.webpackPublicPathVariable) {\n    throw new Error('\"webpackPublicPathVariable\" option must be defined.');\n  }\n\n  let lines: string[] = [];\n  if (options.regexName) {\n    lines = [`var scripts = document.getElementsByTagName('script');`];\n\n    const regexInitializationSnippet: string = `/${options.regexName}/i`;\n    const regexVarName: string | undefined = options.regexVariable;\n    if (options.regexVariable) {\n      lines.push(\n        ...[\n          `var regex = (typeof ${regexVarName} !== 'undefined') ? ${regexVarName} : ${regexInitializationSnippet};`\n        ]\n      );\n    } else {\n      lines.push(...[`var regex = ${regexInitializationSnippet};`]);\n    }\n\n    lines.push(\n      ...[\n        `var ${varName};`,\n        '',\n        'if (scripts && scripts.length) {',\n        '  for (var i = 0; i < scripts.length; i++) {',\n        '    if (!scripts[i]) continue;',\n        `    var path = scripts[i].getAttribute('src');`,\n        '    if (path && path.match(regex)) {',\n        `      ${varName} = path.substring(0, path.lastIndexOf('/') + 1);`,\n        ...(options.preferLastFoundScript ? [] : ['      break;']),\n        '    }',\n        '  }',\n        '}',\n        '',\n        `if (!${varName}) {`,\n        `  for (var global in ${registryVariableName}) {`,\n        '    if (global && global.match(regex)) {',\n        `      ${varName} = global.substring(0, global.lastIndexOf('/') + 1);`,\n        ...(options.preferLastFoundScript ? [] : ['      break;']),\n        '    }',\n        '  }',\n        '}'\n      ]\n    );\n\n    if (options.getPostProcessScript) {\n      lines.push(...['', `if (${varName}) {`, `  ${options.getPostProcessScript(varName)};`, '}', '']);\n    }\n  } else {\n    if (options.publicPath) {\n      lines.push(...[`var ${varName} = '${appendSlashAndEscapeSingleQuotes(options.publicPath)}';`, '']);\n    } else if (options.systemJs) {\n      lines.push(\n        ...[\n          `var ${varName} = window.System ? window.System.baseURL || '' : '';`,\n          `if (${varName} !== '' && ${varName}.substr(-1) !== '/') ${varName} += '/';`,\n          ''\n        ]\n      );\n    } else {\n      emitWarning(`Neither 'publicPath' nor 'systemJs' is defined, so the public path will not be modified`);\n\n      return '';\n    }\n\n    if (options.urlPrefix && options.urlPrefix !== '') {\n      lines.push(...[`${varName} += '${appendSlashAndEscapeSingleQuotes(options.urlPrefix)}';`, '']);\n    }\n\n    if (options.getPostProcessScript) {\n      lines.push(...[`if (${varName}) {`, `  ${options.getPostProcessScript(varName)};`, '}', '']);\n    }\n  }\n\n  lines.push(`${options.webpackPublicPathVariable} = ${varName};`);\n\n  return joinLines(lines, options.linePrefix);\n}\n\n/**\n * /**\n * This function returns a block of JavaScript that maintains a global register of script tags.\n *\n * @param debug - If true, the code returned code is not minified. Defaults to false.\n *\n * @public\n */\nexport function getGlobalRegisterCode(debug: boolean = false): string {\n  // Minified version of this code:\n  // (function(){\n  // if (!window.__setWebpackPublicPathLoaderSrcRegistry__) window.__setWebpackPublicPathLoaderSrcRegistry__={};\n  // var scripts = document.getElementsByTagName('script');\n  // if (scripts && scripts.length) {\n  //   for (var i = 0; i < scripts.length; i++) {\n  //     if (!scripts[i]) continue;\n  //     var path = scripts[i].getAttribute('src');\n  //     if (path) window.__setWebpackPublicPathLoaderSrcRegistry__[path]=true;\n  //   }\n  // }\n  // })()\n\n  return `\\n!function(){${registryVariableName}||(${registryVariableName}={});var e=document.getElementsByTagName(\"script\");if(e&&e.length)for(var t=0;t<e.length;t++)if(e[t]){var r=e[t].getAttribute(\"src\");r&&(${registryVariableName}[r]=!0)}}();`;\n}\n"]}