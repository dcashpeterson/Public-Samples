"use strict";
/**
 * Creates XML definitions for the relationships files
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = __importStar(require("path"));
const xml_1 = __importDefault(require("xml"));
const constants_1 = __importDefault(require("../config/constants"));
let relationshipId = 0;
function relationshipToXmlDefinition(rel) {
    var _a;
    if (((_a = rel.target) === null || _a === void 0 ? void 0 : _a[0]) !== '/') {
        rel.target = '/' + rel.target;
    }
    return {
        Relationship: [
            {
                _attr: {
                    Type: `http://schemas.microsoft.com/sharepoint/2012/app/relationships/${rel.type}`,
                    Target: rel.target,
                    Id: `r${relationshipId++}`
                }
            }
        ]
    };
}
function createRelationshipsXml(xmlSerializationOptions, currentFilename, rels) {
    const file = path.basename(currentFilename);
    const folder = path.dirname(currentFilename);
    return {
        filename: path.posix.join(folder, constants_1.default.RelsFolder, file + constants_1.default.RelsXml),
        contents: Buffer.from((0, xml_1.default)({
            Relationships: [
                {
                    _attr: {
                        xmlns: 'http://schemas.openxmlformats.org/package/2006/relationships'
                    }
                },
                ...rels.map((rel) => relationshipToXmlDefinition(rel))
            ]
        }, xmlSerializationOptions))
    };
}
exports.default = createRelationshipsXml;
//# sourceMappingURL=createRelationshipsXml.js.map