{"version":3,"file":"StringValuesTypingsGenerator.js","sourceRoot":"","sources":["../src/StringValuesTypingsGenerator.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,2BAAyB;AAEzB,yDAI4B;AAmD5B,MAAM,gCAAgC,GAAW,SAAS,CAAC;AAE3D,SAAS,gCAAgC,CACvC,OAA8E;IAE9E,KAAK,UAAU,uBAAuB,CACpC,YAA2B,EAC3B,QAAgB,EAChB,YAAoB;QAEpB,MAAM,kBAAkB,GAAoC,MAAM,OAAO,CAAC,uBAAuB,CAC/F,YAAY,EACZ,QAAQ,EACR,YAAY,CACb,CAAC;QAEF,IAAI,kBAAkB,KAAK,SAAS,EAAE;YACpC,OAAO;SACR;QAED,MAAM,WAAW,GAAa,EAAE,CAAC;QACjC,MAAM,aAAa,GAAW,OAAO,CAAC,4BAA4B;YAChE,CAAC,CAAC,OAAO,CAAC,4BAA4B;YACtC,CAAC,CAAC,gCAAgC,CAAC;QACrC,IAAI,MAAM,GAAW,EAAE,CAAC;QACxB,IAAI,OAAO,CAAC,eAAe,EAAE;YAC3B,WAAW,CAAC,IAAI,CAAC,oBAAoB,aAAa,IAAI,CAAC,CAAC;YACxD,MAAM,GAAG,IAAI,CAAC;SACf;QAED,KAAK,MAAM,iBAAiB,IAAI,kBAAkB,CAAC,OAAO,EAAE;YAC1D,MAAM,EAAE,UAAU,EAAE,OAAO,EAAE,GAAG,iBAAiB,CAAC;YAElD,IAAI,OAAO,IAAI,OAAO,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE;gBACpC,WAAW,CAAC,IAAI,CAAC,GAAG,MAAM,KAAK,EAAE,GAAG,MAAM,MAAM,OAAO,CAAC,OAAO,CAAC,OAAO,EAAE,MAAM,CAAC,EAAE,EAAE,GAAG,MAAM,KAAK,CAAC,CAAC;aACrG;YAED,IAAI,OAAO,CAAC,eAAe,EAAE;gBAC3B,WAAW,CAAC,IAAI,CAAC,GAAG,MAAM,IAAI,UAAU,YAAY,EAAE,EAAE,CAAC,CAAC;aAC3D;iBAAM;gBACL,WAAW,CAAC,IAAI,CAAC,wBAAwB,UAAU,WAAW,EAAE,EAAE,CAAC,CAAC;aACrE;SACF;QAED,IAAI,OAAO,CAAC,eAAe,EAAE;YAC3B,WAAW,CAAC,IAAI,CAAC,GAAG,EAAE,EAAE,EAAE,0BAA0B,aAAa,GAAG,EAAE,EAAE,EAAE,yBAAyB,CAAC,CAAC;SACtG;QAED,OAAO,WAAW,CAAC,IAAI,CAAC,QAAG,CAAC,CAAC;IAC/B,CAAC;IAED,MAAM,gBAAgB,mCACjB,OAAO,KACV,uBAAuB,GACxB,CAAC;IAEF,OAAO,gBAAgB,CAAC;AAC1B,CAAC;AAED;;;;;GAKG;AACH,MAAa,4BAAqD,SAAQ,mCAA+B;IAKvG,YAAmB,OAA8E;QAC/F,KAAK,CAAC,gCAAgC,CAAC,OAAO,CAAC,CAAC,CAAC;IACnD,CAAC;CACF;AARD,oEAQC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { EOL } from 'os';\n\nimport {\n  type ITypingsGeneratorOptions,\n  TypingsGenerator,\n  type ITypingsGeneratorOptionsWithCustomReadFile\n} from './TypingsGenerator';\n\n/**\n * @public\n */\nexport interface IStringValueTyping {\n  exportName: string;\n  comment?: string;\n}\n\n/**\n * @public\n */\nexport interface IStringValueTypings {\n  typings: IStringValueTyping[];\n}\n\n/**\n * @public\n */\nexport interface IStringValuesTypingsGeneratorBaseOptions {\n  /**\n   * Setting this option wraps the typings export in a default property.\n   */\n  exportAsDefault?: boolean;\n\n  /**\n   * When `exportAsDefault` is true, this optional setting determines the interface name\n   * for the default wrapped export. Ignored when `exportAsDefault` is false.\n   */\n  exportAsDefaultInterfaceName?: string;\n}\n\n/**\n * @public\n */\nexport interface IStringValuesTypingsGeneratorOptions<TFileContents extends string = string>\n  extends ITypingsGeneratorOptions<IStringValueTypings | undefined, TFileContents>,\n    IStringValuesTypingsGeneratorBaseOptions {\n  // Nothing added.\n}\n\n/**\n * @public\n */\nexport interface IStringValuesTypingsGeneratorOptionsWithCustomReadFile<TFileContents = string>\n  extends ITypingsGeneratorOptionsWithCustomReadFile<IStringValueTypings | undefined, TFileContents>,\n    IStringValuesTypingsGeneratorBaseOptions {\n  // Nothing added.\n}\n\nconst EXPORT_AS_DEFAULT_INTERFACE_NAME: string = 'IExport';\n\nfunction convertToTypingsGeneratorOptions<TFileContents>(\n  options: IStringValuesTypingsGeneratorOptionsWithCustomReadFile<TFileContents>\n): ITypingsGeneratorOptionsWithCustomReadFile<string | undefined, TFileContents> {\n  async function parseAndGenerateTypings(\n    fileContents: TFileContents,\n    filePath: string,\n    relativePath: string\n  ): Promise<string | undefined> {\n    const stringValueTypings: IStringValueTypings | undefined = await options.parseAndGenerateTypings(\n      fileContents,\n      filePath,\n      relativePath\n    );\n\n    if (stringValueTypings === undefined) {\n      return;\n    }\n\n    const outputLines: string[] = [];\n    const interfaceName: string = options.exportAsDefaultInterfaceName\n      ? options.exportAsDefaultInterfaceName\n      : EXPORT_AS_DEFAULT_INTERFACE_NAME;\n    let indent: string = '';\n    if (options.exportAsDefault) {\n      outputLines.push(`export interface ${interfaceName} {`);\n      indent = '  ';\n    }\n\n    for (const stringValueTyping of stringValueTypings.typings) {\n      const { exportName, comment } = stringValueTyping;\n\n      if (comment && comment.trim() !== '') {\n        outputLines.push(`${indent}/**`, `${indent} * ${comment.replace(/\\*\\//g, '*\\\\/')}`, `${indent} */`);\n      }\n\n      if (options.exportAsDefault) {\n        outputLines.push(`${indent}'${exportName}': string;`, '');\n      } else {\n        outputLines.push(`export declare const ${exportName}: string;`, '');\n      }\n    }\n\n    if (options.exportAsDefault) {\n      outputLines.push('}', '', `declare const strings: ${interfaceName};`, '', 'export default strings;');\n    }\n\n    return outputLines.join(EOL);\n  }\n\n  const convertedOptions: ITypingsGeneratorOptionsWithCustomReadFile<string | undefined, TFileContents> = {\n    ...options,\n    parseAndGenerateTypings\n  };\n\n  return convertedOptions;\n}\n\n/**\n * This is a simple tool that generates .d.ts files for non-TS files that can be represented as\n * a simple set of named string exports.\n *\n * @public\n */\nexport class StringValuesTypingsGenerator<TFileContents = string> extends TypingsGenerator<TFileContents> {\n  public constructor(\n    options: TFileContents extends string ? IStringValuesTypingsGeneratorOptions<TFileContents> : never\n  );\n  public constructor(options: IStringValuesTypingsGeneratorOptionsWithCustomReadFile<TFileContents>);\n  public constructor(options: IStringValuesTypingsGeneratorOptionsWithCustomReadFile<TFileContents>) {\n    super(convertToTypingsGeneratorOptions(options));\n  }\n}\n"]}