"use strict";
/**
 * Creates an package's Solution.Xml for a ClientSideSolution
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = __importStar(require("path"));
const uuid = __importStar(require("uuid"));
const xml_1 = __importDefault(require("xml"));
const lodash_1 = require("lodash");
const createRelationshipsXml_1 = __importDefault(require("./createRelationshipsXml"));
const createFeatureXml_1 = __importDefault(require("./createFeatureXml"));
const createIcon_1 = __importDefault(require("./createIcon"));
const constants_1 = __importDefault(require("../config/constants"));
const ISolutionMetadata_1 = require("../models/packageDefinition/ISolutionMetadata");
function createContentTypeXml(extension, mimeType) {
    return {
        Default: [
            {
                _attr: {
                    Extension: extension,
                    ContentType: mimeType
                }
            }
        ]
    };
}
function createSolutionXml(terminal, xmlSerializationOptions, solution, customFeatureFilenames, resources, contentTypes) {
    solution = (0, lodash_1.merge)({
        version: '1.0.0.0'
    }, solution);
    // Create the top-level .rels file which points at the AppManifest
    const relationshipsXml = (0, createRelationshipsXml_1.default)(xmlSerializationOptions, '', [
        {
            type: 'package-manifest',
            target: constants_1.default.appManifestFileName
        }
    ]);
    // Create the top-level content types, defining content types in this package
    const contentTypesMap = new Map();
    if (contentTypes) {
        Object.keys(contentTypes).forEach((extension) => {
            contentTypesMap.set(extension, contentTypes[extension]);
        });
    }
    const includeClientAssets = solution.includeClientSideAssets ||
        (solution.clientSideAssets !== undefined && solution.clientSideAssets.length > 0);
    if (includeClientAssets) {
        solution.clientSideAssets.forEach((file) => {
            const extension = path.extname(file.originalFilename).substr(1);
            if (!contentTypesMap.has(extension)) {
                contentTypesMap.set(extension, 'application/octet-stream');
            }
        });
    }
    const contentTypeInformation = [
        {
            _attr: {
                xmlns: 'http://schemas.openxmlformats.org/package/2006/content-types'
            }
        }
    ];
    contentTypesMap.forEach((mimeType, extension) => {
        contentTypeInformation.push(createContentTypeXml(extension, mimeType));
    });
    const contentTypesXml = {
        filename: constants_1.default.contentTypesXmlFilename,
        contents: Buffer.from((0, xml_1.default)({
            Types: contentTypeInformation
        }, xmlSerializationOptions))
    };
    // Create the top-level AppManifest's XML, note that it is missing relationships
    const manifestXml = {
        filename: constants_1.default.appManifestFileName,
        // eslint-disable-next-line @odsp-web-tools/no-null
        relationships: null,
        contents: Buffer.from((0, xml_1.default)({
            App: buildAppManifestJson(solution)
        }, xmlSerializationOptions))
    };
    // Collect the XML for the individual features
    const featuresXml = solution.features.map((feature) => (0, createFeatureXml_1.default)(terminal, xmlSerializationOptions, feature, resources));
    const clientSideAssetsFeatureFileName = 'ClientSideAssets.xml';
    if (includeClientAssets) {
        // generate a guid
        const guid = uuid.v4();
        const clientSideAssetsFeature = {
            title: 'Client Side Assets',
            description: 'A feature that help deploy client side component assets to SharePoint Online.',
            id: guid,
            version: '1.0.0.0',
            components: [],
            assets: {
                elementFiles: [],
                elementManifests: [],
                upgradeActions: []
            }
        };
        // create a new feature for Assets:
        //    => ClientSideAssets.xml
        //    => ClientSideAssets.xml.config.xml
        const clientSideFeatureXml = (0, createFeatureXml_1.default)(terminal, xmlSerializationOptions, clientSideAssetsFeature, {
            localizedResourcePaths: [],
            defaultResourcePath: undefined
        }, solution.clientSideAssets, clientSideAssetsFeatureFileName);
        featuresXml.push(clientSideFeatureXml);
    }
    // Create icon data if a path to an icon is provided
    const icon = solution.iconPath
        ? (0, createIcon_1.default)(xmlSerializationOptions, solution.iconPath)
        : undefined;
    // Ensure the Manifest's relationships to features are stored
    let relsList = featuresXml.map((feature) => {
        return {
            type: feature.filename === clientSideAssetsFeatureFileName
                ? 'manifest-clientsideasset'
                : 'manifest-feature',
            target: feature.filename
        };
    });
    relsList = relsList.concat(customFeatureFilenames.map((filename) => {
        return {
            type: 'manifest-feature',
            target: filename
        };
    }));
    relsList = relsList.concat(resources.localizedResourcePaths.map((filename) => {
        return {
            type: 'content-resource',
            target: filename
        };
    }));
    if (resources.defaultResourcePath) {
        relsList = relsList.concat({
            type: 'content-defaultresource',
            target: resources.defaultResourcePath
        });
    }
    if (icon) {
        relsList = relsList.concat({
            type: 'manifest-icon',
            target: icon.path
        });
    }
    manifestXml.relationships = (0, createRelationshipsXml_1.default)(xmlSerializationOptions, constants_1.default.appManifestFileName, relsList);
    return {
        manifest: manifestXml,
        features: featuresXml,
        relationships: relationshipsXml,
        contentTypesXml: contentTypesXml,
        icon: icon,
        customFiles: undefined
    };
}
exports.default = createSolutionXml;
function buildAppManifestJson(solution) {
    const appXmlContents = [];
    appXmlContents.push({ _attr: buildAttributesJson(solution) });
    appXmlContents.push({ Properties: buildPropertiesJson(solution) });
    const webApiPermissionRequests = buildWebApiPermissionRequestsJson(solution);
    if (webApiPermissionRequests) {
        appXmlContents.push({ WebApiPermissionRequests: webApiPermissionRequests });
    }
    return appXmlContents;
}
function buildAttributesJson(solution) {
    const attributes = {
        xmlns: 'http://schemas.microsoft.com/sharepoint/2012/app/manifest',
        Name: solution.name,
        ProductID: solution.id,
        SharePointMinVersion: '16.0.0.0',
        IsClientSideSolution: 'true'
    };
    if (solution.version) {
        attributes.Version = solution.version;
    }
    if (solution.skipFeatureDeployment) {
        // SkipFeatureDeployment should not be present in the Solution XML unless it is set to true
        attributes.SkipFeatureDeployment = solution.skipFeatureDeployment;
    }
    if (solution.isDomainIsolated !== undefined) {
        attributes.IsDomainIsolated = solution.isDomainIsolated;
    }
    return attributes;
}
function buildPropertiesJson(solution) {
    const properties = [];
    // Add title to properties
    properties.push({
        Title: solution.title ? solution.title : solution.name
    });
    if (solution.developer) {
        properties.push({
            DeveloperProperties: buildDeveloperPropertiesJson(solution.developer)
        });
    }
    // Add supported locales to properties, if needed
    const supportedLocales = solution.supportedLocales && solution.supportedLocales.length > 0
        ? solution.supportedLocales.map((locale) => {
            return {
                SupportedLocale: [
                    {
                        _attr: {
                            CultureName: locale
                        }
                    }
                ]
            };
        })
        : undefined;
    if (supportedLocales) {
        properties.push({
            SupportedLocales: supportedLocales
        });
    }
    if (solution.iconPath) {
        properties.push({
            AppIconPath: path.basename(solution.iconPath)
        });
    }
    const { metadata } = solution;
    if (metadata) {
        if (metadata.shortDescription) {
            const localizedShortDescription = Object.keys(metadata.shortDescription).map((key) => {
                return {
                    LocalizedString: [
                        {
                            _attr: {
                                CultureName: key
                            }
                        },
                        metadata.shortDescription[key]
                    ]
                };
            });
            properties.push({
                ShortDescription: localizedShortDescription
            });
        }
        if (metadata.longDescription) {
            const localizedLongDescription = Object.keys(metadata.longDescription).map((key) => {
                return {
                    LocalizedString: [
                        {
                            _attr: {
                                CultureName: key
                            }
                        },
                        metadata.longDescription[key]
                    ]
                };
            });
            properties.push({
                LongDescription: localizedLongDescription
            });
        }
        if (metadata.categories && metadata.categories.length) {
            properties.push({
                CategoryID: metadata.categories.slice(0, ISolutionMetadata_1.MAX_SOLUTION_CATEGORIES_COUNT).join(',')
            });
        }
        if (metadata.screenshotPaths) {
            const screenshotPaths = metadata.screenshotPaths.map((screenshotPath) => {
                return {
                    Screenshot: [
                        {
                            Filename: screenshotPath
                        }
                    ]
                };
            });
            properties.push({
                Screenshots: screenshotPaths
            });
        }
        if (metadata.videoUrl) {
            properties.push({
                VideoUrl: metadata.videoUrl
            });
        }
    }
    return properties;
}
function buildDeveloperPropertiesJson(solutionDevProperties) {
    const devProperties = {
        name: solutionDevProperties.name,
        websiteUrl: solutionDevProperties.websiteUrl,
        privacyUrl: solutionDevProperties.privacyUrl,
        termsOfUseUrl: solutionDevProperties.termsOfUseUrl,
        mpnId: solutionDevProperties.mpnId
    };
    return [JSON.stringify(devProperties)];
}
function buildWebApiPermissionRequestsJson(solution) {
    const webApiPermissionRequests = solution.webApiPermissionRequests && solution.webApiPermissionRequests.length > 0
        ? solution.webApiPermissionRequests.map((webApiPermissionRequest) => {
            return {
                WebApiPermissionRequest: [
                    {
                        _attr: {
                            ResourceId: webApiPermissionRequest.resource,
                            Scope: webApiPermissionRequest.scope,
                            ...(webApiPermissionRequest.appId
                                ? {
                                    AppId: webApiPermissionRequest.appId,
                                    ReplyUrl: webApiPermissionRequest.replyUrl
                                }
                                : {})
                        }
                    }
                ]
            };
        })
        : undefined;
    return webApiPermissionRequests;
}
//# sourceMappingURL=createSolutionXml.js.map