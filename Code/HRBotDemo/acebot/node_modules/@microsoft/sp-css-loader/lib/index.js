"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isSingleClassName = void 0;
/**
 * Inspired by css-loader
 */
const path = __importStar(require("path"));
const loaderUtils = __importStar(require("loader-utils"));
const cssLoaderPlugins = __importStar(require("css-loader/dist/plugins"));
const Warning_1 = __importDefault(require("css-loader/dist/Warning"));
const CssSyntaxError_1 = __importDefault(require("css-loader/dist/CssSyntaxError"));
const postcss_1 = __importDefault(require("postcss"));
const cssnano_1 = __importDefault(require("cssnano"));
const postcss_modules_values_1 = __importDefault(require("postcss-modules-values"));
const postcss_modules_local_by_default_1 = __importDefault(require("postcss-modules-local-by-default"));
const postcss_modules_extract_imports_1 = __importDefault(require("postcss-modules-extract-imports"));
const postcss_modules_scope_1 = __importDefault(require("postcss-modules-scope"));
const autoprefixer_1 = __importDefault(require("autoprefixer"));
const node_core_library_1 = require("@rushstack/node-core-library");
/**
 * @beta
 */
const isSingleClassName = (className) => {
    const singleClassNameReg = /^\.[a-zA-Z0-9_-]+$/;
    return singleClassNameReg.test(className);
};
exports.isSingleClassName = isSingleClassName;
/**
 * @public
 */
// eslint-disable-next-line func-style
const loaderFn = function (source) {
    const callback = this.async();
    if (!callback) {
        throw new Error('Plugin is async, but a callback was not provided');
    }
    processCssAsync
        .call(this, source, this.resourcePath)
        .then((result) => callback(undefined, result))
        .catch((error) => callback(error));
};
const GET_URL_IMPORT_NAME = '___CSS_LOADER_GET_URL_IMPORT___';
const LOAD_THEMED_STYLES_IMPORT_NAME = '__LOAD_THEMED_STYLES__';
async function processCssAsync(content, resourcePath) {
    const options = loaderUtils.getOptions(this);
    const processor = getPostcssProcessor(options.generateCssClassName, options.production, options.includeHtmlPrefixForSingleClassNames);
    let result;
    try {
        result = await processor.process(content, { from: resourcePath, to: resourcePath });
    }
    catch (error) {
        if (error.name === 'CssSyntaxError') {
            throw new CssSyntaxError_1.default(error);
        }
        else {
            throw error;
        }
    }
    for (const warning of result.warnings()) {
        this.emitWarning(new Warning_1.default(warning));
    }
    const loadThemedStylesModulePath = options.loadThemedStylesImportPath || getLoadThemedStylesModulePath(this.context);
    const importLines = [
        `import * as ${LOAD_THEMED_STYLES_IMPORT_NAME} from ${JSON.stringify(loadThemedStylesModulePath)};`
    ];
    const codeLines = [];
    const exportLines = [];
    let getUrlHasBeenImported = false;
    let urlImportCounter = 0;
    let cssText = JSON.stringify(result.content);
    for (const message of result.messages) {
        switch (message.type) {
            case 'import': {
                const importMessage = message.value;
                if (importMessage.type !== 'url') {
                    throw new Error(`Only the "url" import type is supported. Encountered "${importMessage.type}"`);
                }
                if (!getUrlHasBeenImported) {
                    const getUrlModulePath = getGetUrlModulePath(this.context);
                    importLines.push(`import ${GET_URL_IMPORT_NAME} from ${JSON.stringify(getUrlModulePath)};`);
                    getUrlHasBeenImported = true;
                }
                const importName = `__URL_IMPORT_${urlImportCounter++}__`;
                importLines.push(`import ${importName} from ${JSON.stringify(importMessage.url)}`);
                codeLines.push(`var ${importMessage.replacementName} = ${GET_URL_IMPORT_NAME}(${importName})`);
                break;
            }
            case 'export': {
                const exportMessage = message.value;
                const exportName = exportMessage.name.match(/^[A-z_][A-z0-9_]*$/)
                    ? exportMessage.name
                    : JSON.stringify(exportMessage.name);
                exportLines.push(`  ${exportName}: ${JSON.stringify(exportMessage.value)}`);
                break;
            }
            case 'replacer': {
                const replacerMessage = message.value;
                if (replacerMessage.type !== 'url') {
                    throw new Error(`Only the "url" replacer type is supported. Encountered "${replacerMessage.type}"`);
                }
                cssText = cssText.replace(
                // eslint-disable-next-line @rushstack/security/no-unsafe-regexp
                new RegExp(replacerMessage.replacementName, 'g'), `" + ${replacerMessage.replacementName} + "`);
                break;
            }
            case 'removal': {
                if (message.plugin !== 'postcss-discard-empty') {
                    throw new Error('Unknown source of "removal" message type encountered in simple-css-loader.');
                }
                // This message was created because empty selectors were discarded. It can be ignored.
                // https://github.com/cssnano/cssnano/blob/master/packages/postcss-discard-empty/src/index.js
                break;
            }
            case 'warning': {
                this.emitWarning(message.value);
                break;
            }
            default: {
                throw new Error(`Unexpected message type: "${message.type}"`);
            }
        }
    }
    if (options.async) {
        codeLines.push(`${LOAD_THEMED_STYLES_IMPORT_NAME}.loadStyles(${cssText}, true);`);
    }
    else {
        codeLines.push(`${LOAD_THEMED_STYLES_IMPORT_NAME}.loadStyles(${cssText});`);
    }
    const allLines = ['// Imports', ...importLines, '', ...codeLines, ''];
    if (exportLines.length > 0) {
        allLines.push('// Exports', 'export default {', exportLines.join(',\n'), '};', '');
    }
    return allLines.join('\n');
}
const PRE_MODULE_PLUGINS = [
    (0, cssnano_1.default)({ preset: 'default' }),
    (0, autoprefixer_1.default)({ overrideBrowserslist: ['> 1%', 'ie >= 11'] })
];
const POST_MODULE_PLUGINS = [
    cssLoaderPlugins.icssParser({}),
    cssLoaderPlugins.importParser({}),
    cssLoaderPlugins.urlParser({
        filter: loaderUtils.isUrlRequest
    })
];
const POSTCSS_PROCESSOR_CACHE = new Map();
const prefixHTMLToSingleClassName = (opts) => {
    return {
        postcssPlugin: 'postcss-html',
        Rule(rule) {
            rule.selectors = rule.selectors.map((selector) => {
                if ((0, exports.isSingleClassName)(selector)) {
                    return `html ${selector}`;
                }
                else {
                    return selector;
                }
            });
        }
    };
};
function getPostcssProcessor(generateCssClassName, production, includeHtmlPrefixForSingleClassNames) {
    let processor = POSTCSS_PROCESSOR_CACHE.get(generateCssClassName);
    if (!processor) {
        let plugins;
        const localPreModulePlugins = [];
        if (includeHtmlPrefixForSingleClassNames) {
            localPreModulePlugins.push(prefixHTMLToSingleClassName({}));
        }
        if (generateCssClassName) {
            plugins = [
                ...PRE_MODULE_PLUGINS,
                ...localPreModulePlugins,
                postcss_modules_values_1.default,
                (0, postcss_modules_local_by_default_1.default)({ mode: 'local' }),
                (0, postcss_modules_extract_imports_1.default)(),
                (0, postcss_modules_scope_1.default)({
                    generateScopedName: (existingClassName, cssFilePath, cssContent) => {
                        return generateCssClassName(existingClassName, cssFilePath, cssContent, production);
                    }
                }),
                ...POST_MODULE_PLUGINS
            ];
        }
        else {
            plugins = [...PRE_MODULE_PLUGINS, ...localPreModulePlugins, ...POST_MODULE_PLUGINS];
        }
        processor = (0, postcss_1.default)(plugins);
        POSTCSS_PROCESSOR_CACHE.set(generateCssClassName, processor);
    }
    return processor;
}
const CSS_LOADER_PACKAGE_PATH = node_core_library_1.Import.resolvePackage({
    packageName: 'css-loader',
    baseFolderPath: __dirname
});
const CSS_LOADER_RELATIVE_PATH_CACHE = new Map();
function getGetUrlModulePath(context) {
    let relativePath = CSS_LOADER_RELATIVE_PATH_CACHE.get(context);
    if (!relativePath) {
        relativePath = path.relative(context, CSS_LOADER_PACKAGE_PATH);
        relativePath = relativePath.replace(/\\/g, '/');
        CSS_LOADER_RELATIVE_PATH_CACHE.set(context, relativePath);
    }
    return path.posix.join(relativePath, 'dist', 'runtime', 'getUrl.js');
}
let LOAD_THEMED_STYLES_PATH;
const LOAD_THEMED_STYLES_RELATIVE_PATH_CACHE = new Map();
function getLoadThemedStylesModulePath(context) {
    let relativePath = LOAD_THEMED_STYLES_RELATIVE_PATH_CACHE.get(context);
    if (!relativePath) {
        if (!LOAD_THEMED_STYLES_PATH) {
            LOAD_THEMED_STYLES_PATH = node_core_library_1.Import.resolvePackage({
                packageName: '@microsoft/load-themed-styles',
                baseFolderPath: __dirname
            });
        }
        relativePath = path.relative(context, LOAD_THEMED_STYLES_PATH);
        relativePath = relativePath.replace(/\\/g, '/');
        LOAD_THEMED_STYLES_RELATIVE_PATH_CACHE.set(context, relativePath);
    }
    return path.posix.join(relativePath, 'lib-es6', 'index.js');
}
exports.default = loaderFn;
//# sourceMappingURL=index.js.map