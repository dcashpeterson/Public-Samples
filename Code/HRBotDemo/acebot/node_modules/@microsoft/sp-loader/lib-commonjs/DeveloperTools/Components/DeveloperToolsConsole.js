"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = tslib_1.__importStar(require("react"));
var Pivot_1 = require("@fluentui/react/lib/Pivot");
var Button_1 = require("@fluentui/react/lib/Button");
var Utilities_1 = require("@fluentui/react/lib/Utilities");
var DeveloperToolsConsoleStore_1 = tslib_1.__importDefault(require("../Stores/DeveloperToolsConsoleStore"));
var LoadingOrErrorModule_1 = tslib_1.__importDefault(require("./DeveloperModules/LoadingOrErrorModule/LoadingOrErrorModule"));
var DeveloperToolsConsole_module_scss_1 = tslib_1.__importDefault(require("./DeveloperToolsConsole.module.scss"));
var DeveloperTools_resx_1 = tslib_1.__importDefault(require("../DeveloperTools.resx"));
var DeveloperToolsConsole = /** @class */ (function (_super) {
    tslib_1.__extends(DeveloperToolsConsole, _super);
    function DeveloperToolsConsole(props) {
        var _this = _super.call(this, props) || this;
        _this._handleCancelClick = function () {
            DeveloperToolsConsoleStore_1.default.showHideConsole(false);
        };
        _this._onDrag = function (mouseEvent) {
            if (mouseEvent.pageY !== 0) {
                var clientHeight = document.documentElement.clientHeight;
                var height = (clientHeight - mouseEvent.pageY) / clientHeight;
                DeveloperToolsConsoleStore_1.default.resizeConsole(height);
            }
        };
        _this._setState = function () {
            _this.setState({
                topPosition: DeveloperToolsConsoleStore_1.default.height,
                visible: DeveloperToolsConsoleStore_1.default.visible,
                tabs: DeveloperToolsConsoleStore_1.default.tabs,
                selectedTabId: DeveloperToolsConsoleStore_1.default.selectedTabId
            });
        };
        _this.state = {
            topPosition: DeveloperToolsConsoleStore_1.default.height,
            visible: DeveloperToolsConsoleStore_1.default.visible,
            tabs: DeveloperToolsConsoleStore_1.default.tabs,
            selectedTabId: DeveloperToolsConsoleStore_1.default.selectedTabId
        };
        return _this;
    }
    DeveloperToolsConsole.prototype.componentDidMount = function () {
        DeveloperToolsConsoleStore_1.default.addListener(this._setState);
    };
    DeveloperToolsConsole.prototype.componentWillUnmount = function () {
        DeveloperToolsConsoleStore_1.default.removeListener(this._setState);
    };
    DeveloperToolsConsole.prototype.render = function () {
        if (this.state.visible) {
            var tabs = this.state.tabs.map(function (tab, id) {
                return (React.createElement(Pivot_1.PivotItem, { linkText: tab.title, itemIcon: tab.iconName, key: id },
                    React.createElement(LoadingOrErrorModule_1.default, { tab: tab })));
            });
            return (React.createElement("div", { className: DeveloperToolsConsole_module_scss_1.default.container, style: { height: "".concat(this.state.topPosition * 100, "%") } },
                React.createElement("div", { className: DeveloperToolsConsole_module_scss_1.default.resizeBar, draggable: true, onDrag: this._onDrag }),
                React.createElement("div", { className: DeveloperToolsConsole_module_scss_1.default.toolsArea },
                    React.createElement(Pivot_1.Pivot, { linkSize: 'normal', linkFormat: 'links', styles: this._calculatePivotStyles(this.props.theme) }, tabs),
                    React.createElement(Button_1.IconButton, { className: DeveloperToolsConsole_module_scss_1.default.closeButton, iconProps: { iconName: 'Cancel' }, title: DeveloperTools_resx_1.default.closeDeveloperToolsAriaLabel, ariaLabel: DeveloperTools_resx_1.default.closeDeveloperToolsAriaLabel, onClick: this._handleCancelClick }))));
        }
        else {
            return React.createElement(React.Fragment, null);
        }
    };
    DeveloperToolsConsole.prototype._calculatePivotStyles = function (theme) {
        if (theme) {
            var isInverted = theme.isInverted, semanticColors = theme.semanticColors;
            var buttonBackground = semanticColors.buttonBackground, buttonText = semanticColors.buttonText;
            return {
                linkContent: { color: isInverted ? buttonBackground : buttonText }
            };
        }
        else {
            return undefined;
        }
    };
    DeveloperToolsConsole = tslib_1.__decorate([
        (0, Utilities_1.customizable)('DeveloperToolsConsole', ['theme'])
    ], DeveloperToolsConsole);
    return DeveloperToolsConsole;
}(React.Component));
exports.default = DeveloperToolsConsole;
//# sourceMappingURL=DeveloperToolsConsole.js.map