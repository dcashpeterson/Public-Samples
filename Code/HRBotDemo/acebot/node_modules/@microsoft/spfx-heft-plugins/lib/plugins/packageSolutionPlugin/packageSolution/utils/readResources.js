"use strict";
/**
 * Reads resources (RESX format) files from folder specified by config. It
 * returns an IResources object with the paths to both the default resources file
 * and a list of all the localized resources files.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.readResourcesAsync = void 0;
const getFiles_1 = require("./getFiles");
/**
 * Reads all resources files from folder specified by config.
 * The file with name "Resources.resx" will be considered the default resource file.
 * More than one Resources.resx file will end up in an error.
 * All files following Resources.??-??.resx (such as Resources.en-US.resx) will be considered as
 * localized resources. It won't match against valid locales but that expression
 */
async function readResourcesAsync(terminal, options) {
    const defaultResourcePaths = await getResourceFilePathsAsync(terminal, options.paths.featureXmlDir, '**/Resources.resx');
    if (defaultResourcePaths.length > 1) {
        throw new Error('More than one default resources file');
    }
    const localizedResourcePaths = await getResourceFilePathsAsync(terminal, options.paths.featureXmlDir, '**/Resources.??-??.resx');
    return {
        localizedResourcePaths: localizedResourcePaths,
        defaultResourcePath: defaultResourcePaths[0]
    };
}
exports.readResourcesAsync = readResourcesAsync;
/** Reads the list of resources files relative path from a specified folder */
async function getResourceFilePathsAsync(terminal, featureXmlDir, globs) {
    return await (0, getFiles_1.getRelativeFilePathsAsync)(terminal, featureXmlDir, globs, 'Found resources file: ');
}
//# sourceMappingURL=readResources.js.map