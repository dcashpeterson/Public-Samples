import type { OperationExecutionRecord } from './OperationExecutionRecord';
/**
 * When the queue returns an unassigned operation, it means there is at least one remote executing operation,
 * at this time, the caller has a chance to make a decision:
 * 1. Manually invoke `tryGetRemoteExecutingOperation()` to get the remote executing operation.
 * 2. If there is no remote executing operation available, wait for some time and return in callback, which
 * internally invoke `assignOperations()` to assign new operations.
 * NOTE: the caller must wait for some time to avoid busy loop and burn CPU cycles.
 */
export declare const UNASSIGNED_OPERATION: 'UNASSIGNED_OPERATION';
export type IOperationIteratorResult = OperationExecutionRecord | typeof UNASSIGNED_OPERATION;
/**
 * Implementation of the async iteration protocol for a collection of IOperation objects.
 * The async iterator will wait for an operation to be ready for execution, or terminate if there are no more operations.
 *
 * @remarks
 * If the caller does not update dependencies prior to invoking `next()` on the iterator again,
 * it must manually invoke `assignOperations()` after performing the updates, otherwise iterators will
 * stall until another operations completes.
 */
export declare class AsyncOperationQueue implements AsyncIterable<IOperationIteratorResult>, AsyncIterator<IOperationIteratorResult> {
    private readonly _queue;
    private readonly _pendingIterators;
    private readonly _totalOperations;
    private readonly _completedOperations;
    private _isDone;
    /**
     * @param operations - The set of operations to be executed
     * @param sortFn - A function that sorts operations in reverse priority order:
     *   - Returning a positive value indicates that `a` should execute before `b`.
     *   - Returning a negative value indicates that `b` should execute before `a`.
     *   - Returning 0 indicates no preference.
     */
    constructor(operations: Iterable<OperationExecutionRecord>, sortFn: IOperationSortFunction);
    /**
     * For use with `for await (const operation of taskQueue)`
     * @see {AsyncIterator}
     */
    next(): Promise<IteratorResult<IOperationIteratorResult>>;
    /**
     * Set a callback to be invoked when one operation is completed.
     * If all operations are completed, set the queue to done, resolve all pending iterators in next cycle.
     */
    complete(record: OperationExecutionRecord): void;
    /**
     * Routes ready operations with 0 dependencies to waiting iterators. Normally invoked as part of `next()`, but
     * if the caller does not update operation dependencies prior to calling `next()`, may need to be invoked manually.
     */
    assignOperations(): void;
    tryGetRemoteExecutingOperation(): OperationExecutionRecord | undefined;
    /**
     * Returns this queue as an async iterator, such that multiple functions iterating this object concurrently
     * receive distinct iteration results.
     */
    [Symbol.asyncIterator](): AsyncIterator<IOperationIteratorResult>;
}
export interface IOperationSortFunction {
    /**
     * A function that sorts operations in reverse priority order:
     * Returning a positive value indicates that `a` should execute before `b`.
     * Returning a negative value indicates that `b` should execute before `a`.
     * Returning 0 indicates no preference.
     */
    (a: OperationExecutionRecord, b: OperationExecutionRecord): number;
}
//# sourceMappingURL=AsyncOperationQueue.d.ts.map