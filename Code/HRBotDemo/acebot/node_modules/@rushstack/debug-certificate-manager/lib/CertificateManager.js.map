{"version":3,"file":"CertificateManager.js","sourceRoot":"","sources":["../src/CertificateManager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport type { pki } from 'node-forge';\nimport * as path from 'path';\nimport { EOL } from 'os';\nimport { FileSystem, ITerminal, Import } from '@rushstack/node-core-library';\n\nimport { runSudoAsync, IRunResult, runAsync } from './runCommand';\nimport { CertificateStore } from './CertificateStore';\n\nconst forge: typeof import('node-forge') = Import.lazy('node-forge', require);\n\nconst SERIAL_NUMBER: string = '731c321744e34650a202e3ef91c3c1b0';\nconst FRIENDLY_NAME: string = 'debug-certificate-manager Development Certificate';\nconst MAC_KEYCHAIN: string = '/Library/Keychains/System.keychain';\nconst CERTUTIL_EXE_NAME: string = 'certutil';\n\n/**\n * The interface for a debug certificate instance\n *\n * @public\n */\nexport interface ICertificate {\n  /**\n   * Generated pem certificate contents\n   */\n  pemCertificate: string | undefined;\n\n  /**\n   * Private key used to sign the pem certificate\n   */\n  pemKey: string | undefined;\n}\n\n/**\n * A utility class to handle generating, trusting, and untrustring a debug certificate.\n * Contains two public methods to `ensureCertificate` and `untrustCertificate`.\n * @public\n */\nexport class CertificateManager {\n  private _certificateStore: CertificateStore;\n\n  public constructor() {\n    this._certificateStore = new CertificateStore();\n  }\n\n  /**\n   * Get a development certificate from the store, or optionally, generate a new one\n   * and trust it if one doesn't exist in the store.\n   *\n   * @public\n   */\n  public async ensureCertificateAsync(\n    canGenerateNewCertificate: boolean,\n    terminal: ITerminal\n  ): Promise<ICertificate> {\n    if (this._certificateStore.certificateData && this._certificateStore.keyData) {\n      let invalidCertificate: boolean = false;\n      const messages: string[] = [];\n\n      if (!this._certificateHasSubjectAltName()) {\n        invalidCertificate = true;\n        messages.push(\n          'The existing development certificate is missing the subjectAltName ' +\n            'property and will not work with the latest versions of some browsers.'\n        );\n      }\n\n      if (!(await this._detectIfCertificateIsTrustedAsync(terminal))) {\n        invalidCertificate = true;\n        messages.push('The existing development certificate is not currently trusted by your system.');\n      }\n\n      if (invalidCertificate) {\n        if (canGenerateNewCertificate) {\n          messages.push('Attempting to untrust the certificate and generate a new one.');\n          terminal.writeWarningLine(messages.join(' '));\n          await this.untrustCertificateAsync(terminal);\n          await this._ensureCertificateInternalAsync(terminal);\n        } else {\n          messages.push(\n            'Untrust the certificate and generate a new one, or set the ' +\n              '`canGenerateNewCertificate` parameter to `true` when calling `ensureCertificateAsync`.'\n          );\n          throw new Error(messages.join(' '));\n        }\n      }\n    } else if (canGenerateNewCertificate) {\n      await this._ensureCertificateInternalAsync(terminal);\n    } else {\n      throw new Error(\n        'No development certificate found. Generate a new certificate manually, or set the ' +\n          '`canGenerateNewCertificate` parameter to `true` when calling `ensureCertificateAsync`.'\n      );\n    }\n\n    return {\n      pemCertificate: this._certificateStore.certificateData,\n      pemKey: this._certificateStore.keyData\n    };\n  }\n\n  /**\n   * Attempt to locate a previously generated debug certificate and untrust it.\n   *\n   * @public\n   */\n  public async untrustCertificateAsync(terminal: ITerminal): Promise<boolean> {\n    this._certificateStore.certificateData = undefined;\n    this._certificateStore.keyData = undefined;\n\n    switch (process.platform) {\n      case 'win32':\n        const winUntrustResult: IRunResult = await runAsync(CERTUTIL_EXE_NAME, [\n          '-user',\n          '-delstore',\n          'root',\n          SERIAL_NUMBER\n        ]);\n\n        if (winUntrustResult.code !== 0) {\n          terminal.writeErrorLine(`Error: ${winUntrustResult.stderr.join(' ')}`);\n          return false;\n        } else {\n          terminal.writeVerboseLine('Successfully untrusted development certificate.');\n          return true;\n        }\n\n      case 'darwin':\n        terminal.writeVerboseLine('Trying to find the signature of the development certificate.');\n\n        const macFindCertificateResult: IRunResult = await runAsync('security', [\n          'find-certificate',\n          '-c',\n          'localhost',\n          '-a',\n          '-Z',\n          MAC_KEYCHAIN\n        ]);\n        if (macFindCertificateResult.code !== 0) {\n          terminal.writeErrorLine(\n            `Error finding the development certificate: ${macFindCertificateResult.stderr.join(' ')}`\n          );\n          return false;\n        }\n\n        const shaHash: string | undefined = this._parseMacOsMatchingCertificateHash(\n          macFindCertificateResult.stdout.join(EOL)\n        );\n\n        if (!shaHash) {\n          terminal.writeErrorLine('Unable to find the development certificate.');\n          return false;\n        } else {\n          terminal.writeVerboseLine(`Found the development certificate. SHA is ${shaHash}`);\n        }\n\n        const macUntrustResult: IRunResult = await runSudoAsync('security', [\n          'delete-certificate',\n          '-Z',\n          shaHash,\n          MAC_KEYCHAIN\n        ]);\n\n        if (macUntrustResult.code === 0) {\n          terminal.writeVerboseLine('Successfully untrusted development certificate.');\n          return true;\n        } else {\n          terminal.writeErrorLine(macUntrustResult.stderr.join(' '));\n          return false;\n        }\n\n      default:\n        // Linux + others: Have the user manually untrust the cert\n        terminal.writeLine(\n          'Automatic certificate untrust is only implemented for debug-certificate-manager on Windows ' +\n            'and macOS. To untrust the development certificate, remove this certificate from your trusted ' +\n            `root certification authorities: \"${this._certificateStore.certificatePath}\". The ` +\n            `certificate has serial number \"${SERIAL_NUMBER}\".`\n        );\n        return false;\n    }\n  }\n\n  private _createDevelopmentCertificate(): ICertificate {\n    const keys: pki.KeyPair = forge.pki.rsa.generateKeyPair(2048);\n    const certificate: pki.Certificate = forge.pki.createCertificate();\n    certificate.publicKey = keys.publicKey;\n\n    certificate.serialNumber = SERIAL_NUMBER;\n\n    const now: Date = new Date();\n    certificate.validity.notBefore = now;\n    // Valid for 3 years\n    certificate.validity.notAfter.setFullYear(certificate.validity.notBefore.getFullYear() + 3);\n\n    const attrs: pki.CertificateField[] = [\n      {\n        name: 'commonName',\n        value: 'localhost'\n      }\n    ];\n\n    certificate.setSubject(attrs);\n    certificate.setIssuer(attrs);\n\n    certificate.setExtensions([\n      {\n        name: 'subjectAltName',\n        altNames: [\n          {\n            type: 2, // DNS\n            value: 'localhost'\n          }\n        ]\n      },\n      {\n        name: 'keyUsage',\n        digitalSignature: true,\n        keyEncipherment: true,\n        dataEncipherment: true\n      },\n      {\n        name: 'extKeyUsage',\n        serverAuth: true\n      },\n      {\n        name: 'friendlyName',\n        value: FRIENDLY_NAME\n      }\n    ]);\n\n    // self-sign certificate\n    certificate.sign(keys.privateKey, forge.md.sha256.create());\n\n    // convert a Forge certificate to PEM\n    const pem: string = forge.pki.certificateToPem(certificate);\n    const pemKey: string = forge.pki.privateKeyToPem(keys.privateKey);\n\n    return {\n      pemCertificate: pem,\n      pemKey: pemKey\n    };\n  }\n\n  private async _tryTrustCertificateAsync(certificatePath: string, terminal: ITerminal): Promise<boolean> {\n    switch (process.platform) {\n      case 'win32':\n        terminal.writeLine(\n          'Attempting to trust a development certificate. This self-signed certificate only points to localhost ' +\n            'and will be stored in your local user profile to be used by other instances of ' +\n            'debug-certificate-manager. If you do not consent to trust this certificate, click \"NO\" in the dialog.'\n        );\n\n        const winTrustResult: IRunResult = await runAsync(CERTUTIL_EXE_NAME, [\n          '-user',\n          '-addstore',\n          'root',\n          certificatePath\n        ]);\n\n        if (winTrustResult.code !== 0) {\n          terminal.writeErrorLine(`Error: ${winTrustResult.stdout.toString()}`);\n\n          const errorLines: string[] = winTrustResult.stdout\n            .toString()\n            .split(EOL)\n            .map((line: string) => line.trim());\n\n          // Not sure if this is always the status code for \"cancelled\" - should confirm.\n          if (\n            winTrustResult.code === 2147943623 ||\n            errorLines[errorLines.length - 1].indexOf('The operation was canceled by the user.') > 0\n          ) {\n            terminal.writeLine('Certificate trust cancelled.');\n          } else {\n            terminal.writeErrorLine('Certificate trust failed with an unknown error.');\n          }\n\n          return false;\n        } else {\n          terminal.writeVerboseLine('Successfully trusted development certificate.');\n\n          return true;\n        }\n\n      case 'darwin':\n        terminal.writeLine(\n          'Attempting to trust a development certificate. This self-signed certificate only points to localhost ' +\n            'and will be stored in your local user profile to be used by other instances of ' +\n            'debug-certificate-manager. If you do not consent to trust this certificate, do not enter your ' +\n            'root password in the prompt.'\n        );\n\n        const result: IRunResult = await runSudoAsync('security', [\n          'add-trusted-cert',\n          '-d',\n          '-r',\n          'trustRoot',\n          '-k',\n          MAC_KEYCHAIN,\n          certificatePath\n        ]);\n\n        if (result.code === 0) {\n          terminal.writeVerboseLine('Successfully trusted development certificate.');\n          return true;\n        } else {\n          if (\n            result.stderr.some(\n              (value: string) => !!value.match(/The authorization was cancelled by the user\\./)\n            )\n          ) {\n            terminal.writeLine('Certificate trust cancelled.');\n            return false;\n          } else {\n            terminal.writeErrorLine(\n              `Certificate trust failed with an unknown error. Exit code: ${result.code}. ` +\n                `Error: ${result.stderr.join(' ')}`\n            );\n            return false;\n          }\n        }\n\n      default:\n        // Linux + others: Have the user manually trust the cert if they want to\n        terminal.writeLine(\n          'Automatic certificate trust is only implemented for debug-certificate-manager on Windows ' +\n            'and macOS. To trust the development certificate, add this certificate to your trusted root ' +\n            `certification authorities: \"${certificatePath}\".`\n        );\n        return true;\n    }\n  }\n\n  private async _detectIfCertificateIsTrustedAsync(terminal: ITerminal): Promise<boolean> {\n    switch (process.platform) {\n      case 'win32':\n        const winVerifyStoreResult: IRunResult = await runAsync(CERTUTIL_EXE_NAME, [\n          '-user',\n          '-verifystore',\n          'root',\n          SERIAL_NUMBER\n        ]);\n\n        if (winVerifyStoreResult.code !== 0) {\n          terminal.writeVerboseLine(\n            'The development certificate was not found in the store. CertUtil error: ',\n            winVerifyStoreResult.stderr.join(' ')\n          );\n          return false;\n        } else {\n          terminal.writeVerboseLine(\n            'The development certificate was found in the store. CertUtil output: ',\n            winVerifyStoreResult.stdout.join(' ')\n          );\n          return true;\n        }\n\n      case 'darwin':\n        terminal.writeVerboseLine('Trying to find the signature of the development certificate.');\n\n        const macFindCertificateResult: IRunResult = await runAsync('security', [\n          'find-certificate',\n          '-c',\n          'localhost',\n          '-a',\n          '-Z',\n          MAC_KEYCHAIN\n        ]);\n\n        if (macFindCertificateResult.code !== 0) {\n          terminal.writeVerboseLine(\n            'The development certificate was not found in keychain. Find certificate error: ',\n            macFindCertificateResult.stderr.join(' ')\n          );\n          return false;\n        }\n\n        const shaHash: string | undefined = this._parseMacOsMatchingCertificateHash(\n          macFindCertificateResult.stdout.join(EOL)\n        );\n\n        if (!shaHash) {\n          terminal.writeVerboseLine(\n            'The development certificate was not found in keychain. Find certificate output:\\n',\n            macFindCertificateResult.stdout.join(' ')\n          );\n          return false;\n        }\n\n        terminal.writeVerboseLine(`The development certificate was found in keychain.`);\n        return true;\n\n      default:\n        // Linux + others: Have the user manually verify the cert is trusted\n        terminal.writeVerboseLine(\n          'Automatic certificate trust validation is only implemented for debug-certificate-manager on Windows ' +\n            'and macOS. Manually verify this development certificate is present in your trusted ' +\n            `root certification authorities: \"${this._certificateStore.certificatePath}\". ` +\n            `The certificate has serial number \"${SERIAL_NUMBER}\".`\n        );\n        // Always return true on Linux to prevent breaking flow.\n        return true;\n    }\n  }\n\n  private async _trySetFriendlyNameAsync(certificatePath: string, terminal: ITerminal): Promise<boolean> {\n    if (process.platform === 'win32') {\n      const basePath: string = path.dirname(certificatePath);\n      const fileName: string = path.basename(certificatePath, path.extname(certificatePath));\n      const friendlyNamePath: string = path.join(basePath, `${fileName}.inf`);\n\n      const friendlyNameFile: string = [\n        '[Version]',\n        'Signature = \"$Windows NT$\"',\n        '[Properties]',\n        `11 = \"{text}${FRIENDLY_NAME}\"`,\n        ''\n      ].join(EOL);\n\n      await FileSystem.writeFileAsync(friendlyNamePath, friendlyNameFile);\n\n      const repairStoreResult: IRunResult = await runAsync(CERTUTIL_EXE_NAME, [\n        '-repairstore',\n        '-user',\n        'root',\n        SERIAL_NUMBER,\n        friendlyNamePath\n      ]);\n\n      if (repairStoreResult.code !== 0) {\n        terminal.writeErrorLine(`CertUtil Error: ${repairStoreResult.stderr.join('')}`);\n        return false;\n      } else {\n        terminal.writeVerboseLine('Successfully set certificate name.');\n        return true;\n      }\n    } else {\n      // No equivalent concept outside of Windows\n      return true;\n    }\n  }\n\n  private async _ensureCertificateInternalAsync(terminal: ITerminal): Promise<void> {\n    const certificateStore: CertificateStore = this._certificateStore;\n    const generatedCertificate: ICertificate = this._createDevelopmentCertificate();\n\n    const now: Date = new Date();\n    const certificateName: string = now.getTime().toString();\n    const tempDirName: string = path.join(__dirname, '..', 'temp');\n\n    const tempCertificatePath: string = path.join(tempDirName, `${certificateName}.pem`);\n    const pemFileContents: string | undefined = generatedCertificate.pemCertificate;\n    if (pemFileContents) {\n      await FileSystem.writeFileAsync(tempCertificatePath, pemFileContents, {\n        ensureFolderExists: true\n      });\n    }\n\n    const trustCertificateResult: boolean = await this._tryTrustCertificateAsync(\n      tempCertificatePath,\n      terminal\n    );\n    if (trustCertificateResult) {\n      certificateStore.certificateData = generatedCertificate.pemCertificate;\n      certificateStore.keyData = generatedCertificate.pemKey;\n\n      // Try to set the friendly name, and warn if we can't\n      if (!this._trySetFriendlyNameAsync(tempCertificatePath, terminal)) {\n        terminal.writeWarningLine(\"Unable to set the certificate's friendly name.\");\n      }\n    } else {\n      // Clear out the existing store data, if any exists\n      certificateStore.certificateData = undefined;\n      certificateStore.keyData = undefined;\n    }\n\n    await FileSystem.deleteFileAsync(tempCertificatePath);\n  }\n\n  private _certificateHasSubjectAltName(): boolean {\n    const certificateData: string | undefined = this._certificateStore.certificateData;\n    if (!certificateData) {\n      return false;\n    }\n    const certificate: pki.Certificate = forge.pki.certificateFromPem(certificateData);\n    return !!certificate.getExtension('subjectAltName');\n  }\n\n  private _parseMacOsMatchingCertificateHash(findCertificateOuput: string): string | undefined {\n    let shaHash: string | undefined = undefined;\n    for (const line of findCertificateOuput.split(EOL)) {\n      // Sets `shaHash` to the current certificate SHA-1 as we progress through the lines of certificate text.\n      const shaHashMatch: string[] | null = line.match(/^SHA-1 hash: (.+)$/);\n      if (shaHashMatch) {\n        shaHash = shaHashMatch[1];\n      }\n\n      const snbrMatch: string[] | null = line.match(/^\\s*\"snbr\"<blob>=0x([^\\s]+).+$/);\n      if (snbrMatch && (snbrMatch[1] || '').toLowerCase() === SERIAL_NUMBER) {\n        return shaHash;\n      }\n    }\n  }\n}\n"]}