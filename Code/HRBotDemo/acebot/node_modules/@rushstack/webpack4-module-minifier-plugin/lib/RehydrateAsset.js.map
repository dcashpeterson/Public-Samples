{"version":3,"file":"RehydrateAsset.js","sourceRoot":"","sources":["../src/RehydrateAsset.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { CachedSource, ConcatSource, ReplaceSource, type Source } from 'webpack-sources';\n\nimport { CHUNK_MODULES_TOKEN } from './Constants';\nimport type { IAssetInfo, IModuleMap, IModuleInfo } from './ModuleMinifierPlugin.types';\n\n/**\n * Rehydrates an asset with minified modules.\n * @param asset - The asset\n * @param moduleMap - The minified modules\n * @param banner - A banner to inject for license information\n * @param emitRenderInfo - If set, provide information about module offsets\n * @public\n */\nexport function rehydrateAsset(\n  asset: IAssetInfo,\n  moduleMap: IModuleMap,\n  banner: string,\n  emitRenderInfo?: boolean\n): Source {\n  const { source: assetSource, modules } = asset;\n\n  const assetCode: string = assetSource.source() as string;\n\n  const tokenIndex: number = assetCode.indexOf(CHUNK_MODULES_TOKEN);\n  if (tokenIndex < 0) {\n    // This is not a JS asset.\n    return handleExternals(assetSource, asset);\n  }\n  const suffixStart: number = tokenIndex + CHUNK_MODULES_TOKEN.length;\n  const suffix: string = assetCode.slice(suffixStart);\n\n  const prefix: ReplaceSource = new ReplaceSource(assetSource);\n  // Preserve source map via fiddly logic\n  prefix.replace(tokenIndex, assetCode.length, '');\n\n  if (!modules.length) {\n    // Empty chunk, degenerate case\n    return new ConcatSource(banner, prefix, '[]', suffix);\n  }\n\n  const emptyFunction = 'function(){}'; // eslint-disable-line @typescript-eslint/typedef\n  // This must not have the global flag set\n  const validIdRegex: RegExp = /^[A-Za-z_$][A-Za-z0-9_$]*$/;\n\n  const source: ConcatSource = new ConcatSource(banner, prefix);\n  // Source.size() is in bytes, we want characters\n  let charOffset: number = source.source().length;\n\n  const firstModuleId: string | number = modules[0];\n  const lastModuleId: string | number = modules[modules.length - 1];\n\n  // Extended logic from webpack.Template.getModulesArrayBounds\n  const minId: number = typeof firstModuleId === 'number' ? firstModuleId : 0;\n  const maxId: number = typeof lastModuleId === 'number' ? lastModuleId : Infinity;\n\n  const simpleArrayOverhead: number = 2 + maxId;\n  let concatArrayOverhead: number = simpleArrayOverhead + 9;\n\n  let useObject: boolean = typeof firstModuleId !== 'number' || typeof lastModuleId !== 'number';\n  let objectOverhead: number = 1;\n  let lastId: number = 0;\n\n  if (!useObject) {\n    for (const id of modules) {\n      if (typeof id !== 'number') {\n        // This must be an object\n        useObject = true;\n        break;\n      }\n\n      // This is the extension from webpack.Template.getModulesArrayBounds\n      // We can make smaller emit by injecting additional filler arrays\n      const delta: number = id - lastId - 1;\n\n      // Compare the length of `],Array(${delta}),[` to ','.repeat(delta + 1)\n      const threshold: number = (lastId === 0 ? 7 : 11) + ('' + delta).length;\n      const fillerArraySavings: number = delta + 1 - threshold;\n      if (fillerArraySavings > 0) {\n        concatArrayOverhead -= fillerArraySavings;\n      }\n\n      objectOverhead += 2 + ('' + id).length;\n      lastId = id;\n    }\n  }\n\n  const useConcat: boolean = concatArrayOverhead < simpleArrayOverhead;\n\n  const arrayOverhead: number = useConcat ? concatArrayOverhead : simpleArrayOverhead;\n\n  useObject = useObject || objectOverhead < arrayOverhead;\n\n  if (useObject) {\n    // Write an object literal\n    let separator: '{' | ',' = '{';\n    for (const id of modules) {\n      // If the id is legal to use as a key in a JavaScript object literal, use as-is\n      const javascriptId: string | number =\n        typeof id !== 'string' || validIdRegex.test(id) ? id : JSON.stringify(id);\n      const currentSeparator: string = `${separator}${javascriptId}:`;\n\n      source.add(currentSeparator);\n      charOffset += currentSeparator.length;\n\n      separator = ',';\n\n      const item: IModuleInfo | undefined = moduleMap.get(id);\n      const moduleCode: Source | string = item ? item.source : emptyFunction;\n      // Source.size() is in bytes, we want characters\n      const charLength: number =\n        typeof moduleCode === 'string' ? moduleCode.length : moduleCode.source().toString().length;\n\n      if (emitRenderInfo) {\n        asset.renderInfo.set(id, {\n          charOffset,\n          charLength\n        });\n      }\n\n      source.add(moduleCode);\n      charOffset += charLength;\n    }\n\n    source.add('}');\n  } else {\n    // Write one or more array literals, joined by Array(gap) expressions\n\n    // There will never be more than 16 + (\"\" + minId).length consecutive commas, so 40 is more than will ever be used\n    // This is because the above criteria triggers an Array(len) expression instead\n    const enoughCommas: string = ',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,';\n\n    const useConcatAtStart: boolean = useConcat && minId > 8;\n    lastId = useConcatAtStart ? minId : 0;\n    // TODO: Just because we want to use concat elsewhere doesn't mean its optimal to use at the start\n    let separator: string = useConcatAtStart ? `Array(${minId}).concat([` : '[';\n    let concatInserted: boolean = useConcatAtStart;\n    for (const id of modules) {\n      const delta: number = (id as number) - lastId - 1;\n      const deltaStr: string = '' + delta;\n      const fillerArrayThreshold: number = 11 + deltaStr.length;\n\n      const item: IModuleInfo | undefined = moduleMap.get(id);\n      const moduleCode: Source | string = item ? item.source : emptyFunction;\n      // Source.size() is in bytes, we want characters\n      const charLength: number =\n        typeof moduleCode === 'string' ? moduleCode.length : moduleCode.source().toString().length;\n\n      if (useConcat && delta + 1 > fillerArrayThreshold) {\n        if (concatInserted) {\n          const currentSeparator: string = `],Array(${deltaStr}),[`;\n\n          source.add(currentSeparator);\n          charOffset += currentSeparator.length;\n        } else {\n          const currentSeparator: string = `].concat(Array(${deltaStr}),[`;\n          concatInserted = true;\n\n          source.add(currentSeparator);\n          charOffset += currentSeparator.length;\n        }\n      } else {\n        const currentSeparator: string = separator + enoughCommas.slice(0, delta + 1);\n\n        source.add(currentSeparator);\n        charOffset += currentSeparator.length;\n      }\n      lastId = id as number;\n\n      if (emitRenderInfo) {\n        asset.renderInfo.set(id, {\n          charOffset,\n          charLength\n        });\n      }\n\n      source.add(moduleCode);\n      charOffset += charLength;\n\n      separator = '';\n    }\n\n    source.add(useConcat ? '])' : ']');\n  }\n\n  source.add(suffix);\n\n  return handleExternals(new CachedSource(source), asset);\n}\n\nfunction handleExternals(source: Source, asset: IAssetInfo): Source {\n  const { externalNames } = asset;\n\n  if (externalNames.size) {\n    const replaceSource: ReplaceSource = new ReplaceSource(source);\n    const code: string = source.source() as string;\n\n    const externalIdRegex: RegExp = /__WEBPACK_EXTERNAL_MODULE_[A-Za-z0-9_$]+/g;\n\n    // RegExp.exec uses null or an array as the return type, explicitly\n    let match: RegExpExecArray | null = null;\n    while ((match = externalIdRegex.exec(code))) {\n      const id: string = match[0];\n      const mapped: string | undefined = externalNames.get(id);\n\n      if (mapped === undefined) {\n        // eslint-disable-next-line no-console\n        console.error(`Missing minified external for ${id} in ${asset.fileName}!`);\n      } else {\n        replaceSource.replace(match.index, externalIdRegex.lastIndex - 1, mapped);\n      }\n    }\n\n    return new CachedSource(replaceSource);\n  }\n\n  return source;\n}\n"]}